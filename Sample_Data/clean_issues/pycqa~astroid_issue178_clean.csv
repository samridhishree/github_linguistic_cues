rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text
issue_title,178,pycqa,astroid,pylint-bot,2015-08-20 16:56:06,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

While working on my patch, I've lots of times had to resort to vars() and similar built-ins to get information about the state of node classes, inference contexts, and the like.  The `__repr__` and `__str__` methods for the node classes as currently written aren't adequate because they don't print out all the attributes.  Inference contexts don't have either and vars() also doesn't work because of slots.  dump() gives information about the nodes and some of their attributes, but doesn't play well with pdb (line breaks end up as '\n' literals, which makes the output hard to read) and is also not complete.  I think at a minimum, every object should have a method that will print out its complete (non-recursive) state in a format that pdb understands.  dump() should be changed to format correctly in pdb and possibly to include more information than it currently does.  Maybe the best way to do this is to add an optional parameter that gives a verbosity level?  For other recursive data structures, a pprint-equivalent would be good.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/178
",start issue,Provide a way to print the complete state of astroid objects,origin report bitbucket ceridwenv github ceridwen while work patch ive lot time resort var similar builtin get inform state node class infer context like the method node class current written arent adequ dont print attribut infer context dont either var also doesnt work slot dump give inform node attribut doesnt play well pdb line break end n liter make output hard read also complet I think minimum everi object method print complet nonrecurs state format pdb understand dump chang format correctli pdb possibl includ inform current mayb best way add option paramet give verbos level for recurs data structur pprintequival would good bitbucket
issue_closed,178,pycqa,astroid,pylint-bot,2015-12-09 05:54:35,,closed issue,Provide a way to print the complete state of astroid objects,
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-05 14:38:10,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Are there other objects that need some form of legible representation other than nodes and contexts?  Should I use `__str__`, `__repr__`, both, or another method for complete-state representations?
",,,origin comment bitbucket ceridwenv github ceridwen are object need form legibl represent node context should I use anoth method completest represent
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-05 14:57:29,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I think you could use `__str__` or maybe another method for complete-state representations. Usually when I try things with astroid, I do it in an interpreter session and it would be cumbersome to have the complete representation each time I do something like the following.

```
#!python

>>> node = astroid.parse('...')
>>> node
# Oups, prints a lot of stuff, instead of printing the tree node.
```
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor I think could use mayb anoth method completest represent usual I tri thing astroid I interpret session would cumbersom complet represent time I someth like follow
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-08 17:50:55,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

This is taking longer than I'd hoped to get right, mainly because the formatting is hard to get optimally legible.  How do you feel about my using the 3.4 functools.singledispatch library and the 2.7 backport on PyPi to handle the type dispatching in `as_string.dump`?  I've done some more refactoring of the fields, moving what I'd term as AST-dependent fields like `_style` and `locals` into `_other_other_fields` for lack of a better name.  I'm currently using repr_tree as the method, I may add another method if I can figure out a reasonable representation of the AST fields. 
",,,origin comment bitbucket ceridwenv github ceridwen thi take longer Id hope get right mainli format hard get optim legibl how feel use 34 functoolssingledispatch librari 27 backport pypi handl type dispatch ive done refactor field move Id term astdepend field like lack better name Im current use reprtre method I may add anoth method I figur reason represent ast field
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-08 17:53:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Sounds good! I'm fine with using singledispatch. 
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor sound good Im fine use singledispatch
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-24 18:38:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Does this needs to be open or can we consider it fixed?
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor doe need open consid fix
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-25 03:50:20,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Are there any other important cases of objects with state in astroid?  I did the ones I know about, but I'm not sure if there are any others.  If there aren't, I'd say this is finished.
",,,origin comment bitbucket ceridwenv github ceridwen are import case object state astroid I one I know Im sure other If arent Id say finish
issue_comment,178,pycqa,astroid,pylint-bot,2015-09-25 05:55:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I think it's done. There's still the CallContext object, but we have #194 for it.
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor I think done there still callcontext object 194
