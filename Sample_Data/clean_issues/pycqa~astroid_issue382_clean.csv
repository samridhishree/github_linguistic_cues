rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text
issue_title,382,pycqa,astroid,rogalski,2016-12-29 19:50:16,"Needed for PyCQA/pylint#1245.

It’s a very rough draft, input will be appreciated.",start issue,infer results of open() and file() calls,need pycqapylint1245 it’ rough draft input appreci
pull_request_title,382,pycqa,astroid,rogalski,2016-12-29 19:50:16,"Needed for PyCQA/pylint#1245.

It’s a very rough draft, input will be appreciated.",97d8fde555baf76105460155fdfeb0913a7c303d,infer results of open() and file() calls,need pycqapylint1245 it’ rough draft input appreci
issue_comment,382,pycqa,astroid,coveralls,2016-12-29 19:57:09,"
[![Coverage Status](https://coveralls.io/builds/9463307/badge)](https://coveralls.io/builds/9463307)

Coverage decreased (-0.1%) to 89.251% when pulling **1436e39fd048699b8f84d172d1dfefde72ca94a5 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
",,,coverag statu coverag decreas 01 89251 pull 1436e39fd048699b8f84d172d1dfefde72ca94a5 rogalskiinferopencal 9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd pycqamast
issue_comment,382,pycqa,astroid,coveralls,2016-12-29 20:05:41,"
[![Coverage Status](https://coveralls.io/builds/9463404/badge)](https://coveralls.io/builds/9463404)

Coverage decreased (-0.1%) to 89.251% when pulling **67f992c74e95d5c1e0930497ce519f577374c5f3 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
",,,coverag statu coverag decreas 01 89251 pull 67f992c74e95d5c1e0930497ce519f577374c5f3 rogalskiinferopencal 9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd pycqamast
issue_comment,382,pycqa,astroid,rogalski,2016-12-29 20:10:26,I'm not sure why coverage dropped.,,,Im sure coverag drop
issue_comment,382,pycqa,astroid,coveralls,2016-12-29 20:47:12,"
[![Coverage Status](https://coveralls.io/builds/9463821/badge)](https://coveralls.io/builds/9463821)

Coverage decreased (-0.1%) to 89.251% when pulling **ba9dff896aea967125da66d9b52e51fa978a9bd0 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
",,,coverag statu coverag decreas 01 89251 pull ba9dff896aea967125da66d9b52e51fa978a9bd0 rogalskiinferopencal 9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd pycqamast
issue_comment,382,pycqa,astroid,coveralls,2016-12-29 20:47:12,"
[![Coverage Status](https://coveralls.io/builds/9463821/badge)](https://coveralls.io/builds/9463821)

Coverage decreased (-0.3%) to 89.068% when pulling **ba9dff896aea967125da66d9b52e51fa978a9bd0 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
",,,coverag statu coverag decreas 03 89068 pull ba9dff896aea967125da66d9b52e51fa978a9bd0 rogalskiinferopencal 9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd pycqamast
issue_comment,382,pycqa,astroid,PCManticore,2016-12-30 16:05:05,"Looks good, but check my suggestion to see if it can improve the situation for Python 3.",,,look good check suggest see improv situat python 3
issue_comment,382,pycqa,astroid,rogalski,2016-12-30 16:07:51,"@PCManticore most definitely, Python3 will be improved, thanks for your comments!",,,pcmanticor definit python3 improv thank comment
issue_comment,382,pycqa,astroid,rogalski,2016-12-30 20:54:54,"@PCManticore

How would I reasonably infer arguments of function call? Covering only kwargs/only args/unpacking/defaults etc. will be tricky. Is `CallSite` something which may be used here?
",,,pcmanticor how would I reason infer argument function call cover kwargsonli argsunpackingdefault etc tricki Is someth may use
issue_comment,382,pycqa,astroid,coveralls,2016-12-30 21:20:20,"
[![Coverage Status](https://coveralls.io/builds/9474394/badge)](https://coveralls.io/builds/9474394)

Coverage decreased (-0.05%) to 89.318% when pulling **0432a6315e647e38ade645ccbdf68ac2c4871ffc on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
",,,coverag statu coverag decreas 005 89318 pull 0432a6315e647e38ade645ccbdf68ac2c4871ffc rogalskiinferopencal 9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd pycqamast
issue_comment,382,pycqa,astroid,rogalski,2016-12-30 21:28:53,"It needs more work, but conceptually it's much closer to final patch comparing to previous one.

Coverage drop is due to guard clauses not being hit.",,,It need work conceptu much closer final patch compar previou one coverag drop due guard claus hit
issue_comment,382,pycqa,astroid,coveralls,2016-12-30 23:09:54,"
[![Coverage Status](https://coveralls.io/builds/9475271/badge)](https://coveralls.io/builds/9475271)

Coverage decreased (-0.04%) to 89.326% when pulling **98fe5c8dd2ef305bb728cb4ce91bfc8fd21ff088 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
",,,coverag statu coverag decreas 004 89326 pull 98fe5c8dd2ef305bb728cb4ce91bfc8fd21ff088 rogalskiinferopencal 9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd pycqamast
issue_comment,382,pycqa,astroid,coveralls,2016-12-30 23:30:11,"
[![Coverage Status](https://coveralls.io/builds/9475428/badge)](https://coveralls.io/builds/9475428)

Coverage increased (+0.07%) to 89.326% when pulling **24180efab9bcb3f593bc5f9888f153b4d9dcc8df on rogalski:infer-open-calls** into **7b5a3bfb99d7a4554f64e3529daaf3275052cf74 on PyCQA:master**.
",,,coverag statu coverag increas 007 89326 pull 24180efab9bcb3f593bc5f9888f153b4d9dcc8df rogalskiinferopencal 7b5a3bfb99d7a4554f64e3529daaf3275052cf74 pycqamast
issue_comment,382,pycqa,astroid,rogalski,2017-01-01 19:52:16,"Quick question - why does astroid seems to be unable to fill arguments in inferred value for `open()` function? Inferred function seems to be correct - at least doc parameter is copied from proper built-in function.

`inspect` module seems to retrieve this signature easily, it looks like there's no reason for AST to not contain these information.

```
>>> print(next(astroid.extract_node('open').infer()).args)
Arguments(vararg=None,
          kwarg=None,
          args=None,
          defaults=[],
          kwonlyargs=[],
          kw_defaults=[],
          annotations=[],
          varargannotation=None,
          kwargannotation=None)
>>> import inspect
>>> inspect.signature(open)
<Signature (file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)>
>>> 

```",,,quick question astroid seem unabl fill argument infer valu function infer function seem correct least doc paramet copi proper builtin function modul seem retriev signatur easili look like there reason ast contain inform
issue_comment,382,pycqa,astroid,coveralls,2017-01-01 19:57:06,"
[![Coverage Status](https://coveralls.io/builds/9483988/badge)](https://coveralls.io/builds/9483988)

Coverage increased (+0.04%) to 89.297% when pulling **97d8fde555baf76105460155fdfeb0913a7c303d on rogalski:infer-open-calls** into **7b5a3bfb99d7a4554f64e3529daaf3275052cf74 on PyCQA:master**.
",,,coverag statu coverag increas 004 89297 pull 97d8fde555baf76105460155fdfeb0913a7c303d rogalskiinferopencal 7b5a3bfb99d7a4554f64e3529daaf3275052cf74 pycqamast
issue_comment,382,pycqa,astroid,PCManticore,2017-01-01 21:06:43,"Because it is a builtin and we have limited support for inferring builtins. Check raw_building, where everything happens (and also check the rewrite from 2.0; unfortunately, in 2.0, we cannot infer open() at all, but that is due to a bug). inspect.signature is not a good comparison, since it is inspecing ``__text_signature__`` for builtins. astroid might access this in the future, since, for builtins, we are operating with the actual objects, so we can take this hints into account.",,,becaus builtin limit support infer builtin check rawbuild everyth happen also check rewrit 20 unfortun 20 cannot infer open due bug inspectsignatur good comparison sinc inspec textsignatur builtin astroid might access futur sinc builtin oper actual object take hint account
issue_comment,382,pycqa,astroid,rogalski,2017-01-02 12:49:46,"@PCManticore I can either hardcode information on open() signature in astroid code, or use inspect module to try to fill all objects built in `raw_builder.py`. For me, second option is much better than the first, but I guess it should target 2.0 branch, given huge rewrite was merged in that branch. On the same time, it's such a ""big"" change that you may be reluctant to do right now.

I see three options:
- hard-code information on open signature in astroid code, merge changes in pylint and astroid, postpone implementing generic feature of inspecting live objects to build more rich AST
- start implementing using instect to build more rich AST (which should target 2.0 branch)
- mark PRs as blocked and start working on them again after 2.0 is released

What you think about it?",,,pcmanticor I either hardcod inform open signatur astroid code use inspect modul tri fill object built for second option much better first I guess target 20 branch given huge rewrit merg branch On time big chang may reluct right I see three option hardcod inform open signatur astroid code merg chang pylint astroid postpon implement gener featur inspect live object build rich ast start implement use instect build rich ast target 20 branch mark pr block start work 20 releas what think
issue_comment,382,pycqa,astroid,PCManticore,2017-01-03 07:58:21,"I think we can wait for 2.0, if you don't mind. We can just do the work once, in 2.0's ``raw_building.py``, rather than duplicating it for 1.5 and , then, for 2.0. 
While the code is there for quite some time, after pylint 2.0, I want to have more often releases, so this should be out pretty fast.",,,I think wait 20 dont mind We work 20 rawbuildingpi rather duplic 15 20 while code quit time pylint 20 I want often releas pretti fast
issue_comment,382,pycqa,astroid,ceridwen,2017-01-30 20:55:29,"Note that I rewrote raw_building.py in 2.0 to use inspect, including for building the builtin modules.  You should look at the result of that code and start from there, since this is target 2.0 anyways.",,,note I rewrot rawbuildingpi 20 use inspect includ build builtin modul you look result code start sinc target 20 anyway
issue_comment,382,pycqa,astroid,rogalski,2017-01-30 21:14:36,@ceridwen in which commit it was implemented?,,,ceridwen commit implement
issue_comment,382,pycqa,astroid,PCManticore,2017-01-30 21:17:04,"You can check the branch, I think there were multiple commits.",,,you check branch I think multipl commit
issue_comment,382,pycqa,astroid,ceridwen,2017-01-30 21:26:02,"@rogalski, It's a complete rewrite, so many different commits.  As @PCManticore said, the 2.0 branch holds the current version of raw_building.py.",,,rogalski it complet rewrit mani differ commit As pcmanticor said 20 branch hold current version rawbuildingpi
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 21:15:18,Is `CallSite` a way to go here?,97d8fde555baf76105460155fdfeb0913a7c303d,"(81, '', u'astroid/brain/brain_builtin_inference.py')",Is way go
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 21:18:28,"I think this is (or may be) a generic operation. We have a ""dummy"" `ClassDef` built based on C-implemented built-ins where `FunctionDef` in bodies are empty.

General task would be to patch instances (based on predicate)  - based on some fake node. Key statement here is to _patch_ selectively, not to _replace_ with stub.",97d8fde555baf76105460155fdfeb0913a7c303d,"(94, '', u'astroid/brain/brain_builtin_inference.py')",I think may gener oper We dummi built base cimplement builtin bodi empti gener task would patch instanc base predic base fake node key statement patch select replac stub
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 21:19:59,"It's duplicated here, because all brain modules weren't importing anything outside of `astroid` root.",97d8fde555baf76105460155fdfeb0913a7c303d,"(17, '', u'astroid/brain/brain_io.py')",it duplic brain modul werent import anyth outsid root
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 21:23:05,"Before my changes, inferred value was `Uninferable`. Now it's `InferenceError`.",97d8fde555baf76105460155fdfeb0913a7c303d,"(5, '', u'astroid/tests/unittest_regrtest.py')",befor chang infer valu now
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-31 09:14:51,"Yes, definitely, we can use CallSite here.",97d8fde555baf76105460155fdfeb0913a7c303d,"(81, '', u'astroid/brain/brain_builtin_inference.py')",ye definit use callsit
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-31 09:27:14,"This use case, dummy ``ClassDef`` built based on C-implemented builtin-ins, sounds like a case for ``raw_building.py``. We have there code for building exactly these dummy classes, in order to provide us with some hints on what might be going on at the built-in level. You can also check the code from 2.0 branch, which is rewritten and far better than what we have currently in master.

Now, leaving that aside, I think it would be better if you replace the enter method in ``node.body`` with a newly generated one and returning the same node from the transform. It should be okay as you did right now, but, for astroid 2.0, we are aiming to have immutable nodes, so every time one wants to patch a node, he will have to return another node instead. Not relying on monkey patching would ease my job for porting this code to 2.0.",97d8fde555baf76105460155fdfeb0913a7c303d,"(94, '', u'astroid/brain/brain_builtin_inference.py')",thi use case dummi classdef built base cimplement builtinin sound like case rawbuildingpi We code build exactli dummi class order provid us hint might go builtin level you also check code 20 branch rewritten far better current master now leav asid I think would better replac enter method nodebodi newli gener one return node transform It okay right astroid 20 aim immut node everi time one want patch node return anoth node instead not reli monkey patch would eas job port code 20
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-29 20:41:54,Extracted class nodes should be kept in module namespace instead of recreating them each time.,97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",extract class node kept modul namespac instead recreat time
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-29 20:44:08,"TODO: inheritance structure is fairly complicated in Py3 case (with BytesIO, TextIO, buffering etc.). For 100% proper inference logic here needs to be significantly improved.

Maybe we should write a simple testcase that generates all valid combos of input arguments and checks if inferred values are equivalent to actually interpreted objects.",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",todo inherit structur fairli complic py3 case bytesio textio buffer etc for 100 proper infer logic need significantli improv mayb write simpl testcas gener valid combo input argument check infer valu equival actual interpret object
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-30 16:00:58,Not sure I'm understanding what you are saying. Can you explain what do you mean?,97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",not sure Im understand say can explain mean
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-30 16:03:40,"I think another good approach, which I considered at some point, is to check the arguments of the ``open`` call. Depending on these, my idea was to return a different object. You can try this idea, in combination with another trick for not regenerating the classes all the time. Instead of building them as you are building them now, you might try to use this:

```
node = extract_node('''
from io import YourIOClass
YourIOClass
''')
inferred = next(n.infer())
return inferred.instantiate_class()
```
What do you think? Can you try this to see if it can work?",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",I think anoth good approach I consid point check argument open call depend idea return differ object you tri idea combin anoth trick regener class time instead build build might tri use what think can tri see work
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-30 16:04:35,"This means instead of returning a code string, you can return an instance instead.",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",thi mean instead return code string return instanc instead
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 16:05:20,"Currently, for each inference of ""open"", mock is recreated each time. It may (and should) be created only once, and on each inference it should just create a Instance node.",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",current infer open mock recreat time It may creat infer creat instanc node
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 16:07:03,"Yes, for Python 3 it'll have to check input arguments to figure out correct instance.

Using import in place of hand-written mocks is also a great idea that I wasn't aware of. Thanks!",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",ye python 3 itll check input argument figur correct instanc use import place handwritten mock also great idea I wasnt awar thank
pull_request_commit_comment,382,pycqa,astroid,rogalski,2016-12-30 21:22:21,"As comment says, brute-force, but I guess it does what it should?",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/tests/unittest_inference.py')",As comment say bruteforc I guess
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-31 09:27:44,Why can't you use ``.locals`` here instead?,97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",whi cant use local instead
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-31 09:33:38,"No need for dedent, ``extract_node('file')`` is enough",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",No need dedent extractnodefil enough
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-31 09:34:12,Protect this with ``except InferenceError``.,97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",protect except inferenceerror
pull_request_commit_comment,382,pycqa,astroid,PCManticore,2016-12-31 09:36:14,"Also, drop the ``_get`` from the name.",97d8fde555baf76105460155fdfeb0913a7c303d,"(None, '', u'astroid/brain/brain_builtin_inference.py')",also drop get name
pull_request_commit,382,pycqa,astroid,rogalski,2016-12-29 19:47:55,infer results of open() and file() calls,67f992c74e95d5c1e0930497ce519f577374c5f3,,infer result open file call
pull_request_commit,382,pycqa,astroid,rogalski,2016-12-29 20:39:08,fix module name in py3 case,ba9dff896aea967125da66d9b52e51fa978a9bd0,,fix modul name py3 case
pull_request_commit,382,pycqa,astroid,rogalski,2016-12-30 21:13:32,"correct py3 inference, added usage of builtin objects instead of stubs, add context manager stubs",0432a6315e647e38ade645ccbdf68ac2c4871ffc,,correct py3 infer ad usag builtin object instead stub add context manag stub
pull_request_commit,382,pycqa,astroid,rogalski,2016-12-30 23:03:29,open: infer only built-in calls,98fe5c8dd2ef305bb728cb4ce91bfc8fd21ff088,,open infer builtin call
pull_request_commit,382,pycqa,astroid,rogalski,2016-12-30 23:22:46,Merge branch 'last_correct_branch' into infer-open-calls,24180efab9bcb3f593bc5f9888f153b4d9dcc8df,,merg branch lastcorrectbranch inferopencal
pull_request_commit,382,pycqa,astroid,rogalski,2017-01-01 17:50:17,minor changes based on Claudiu review (part1),97d8fde555baf76105460155fdfeb0913a7c303d,,minor chang base claudiu review part1
