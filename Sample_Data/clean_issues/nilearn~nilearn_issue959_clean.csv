rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text
issue_title,959,nilearn,nilearn,aabadie,2016-01-21 15:33:25,"This should fix #736 but it's not fully functional. The problem is memory_profiler cannot be really trusted when a function increase the memory less than 1MiB. I also couldn't apply it on a real test.

Here is an example (but it doesn't work) with it `test_masking.py`:

``` python

from nilearn._utils.testing import with_memory_usage, assert_memory_less_than

@with_memory_usage
def test_memory_usage_with_multi_epi_mask():
    # As it calls intersect_masks, we only test resampling here.
    # Same masks as test_intersect_masks
    mask_a = np.zeros((400, 400, 1), dtype=np.bool)
    mask_a[200:400, 200:400] = 1
    mask_a_img = Nifti1Image(mask_a.astype(int), np.eye(4))

    mask_b = np.zeros((800, 800, 1), dtype=np.bool)
    mask_b[200:600, 200:600] = 1
    mask_b_img = Nifti1Image(mask_b.astype(int), np.eye(4) / 2.)

    mask_ab = np.zeros((400, 400, 1), dtype=np.bool)
    mask_ab[200, 200] = 1

   # arbitrary ground truth value...
    test_mem = 2 * (mask_b_img.get_data().nbytes +
                    mask_b_img.get_data().nbytes +
                    mask_a_img.get_data().nbytes) / (1024 ** 2)
    assert_memory_less_than(test_mem, 0.1,
                            compute_multi_epi_mask,
                            [mask_a_img, mask_b_img], threshold=1., opening=0,
                            target_affine=np.eye(4),
                            target_shape=(400, 400, 1))
```

Maybe an expert such as @AlexandreAbraham will have a better idea :)
",start issue,[MRG] Memory check based on memory profiler,thi fix 736 fulli function the problem memoryprofil cannot realli trust function increas memori less 1mib I also couldnt appli real test here exampl doesnt work mayb expert alexandreabraham better idea
issue_closed,959,nilearn,nilearn,lesteve,2016-02-04 14:54:12,,closed issue,[MRG] Memory check based on memory profiler,
pull_request_title,959,nilearn,nilearn,aabadie,2016-01-21 15:33:25,"This should fix #736 but it's not fully functional. The problem is memory_profiler cannot be really trusted when a function increase the memory less than 1MiB. I also couldn't apply it on a real test.

Here is an example (but it doesn't work) with it `test_masking.py`:

``` python

from nilearn._utils.testing import with_memory_usage, assert_memory_less_than

@with_memory_usage
def test_memory_usage_with_multi_epi_mask():
    # As it calls intersect_masks, we only test resampling here.
    # Same masks as test_intersect_masks
    mask_a = np.zeros((400, 400, 1), dtype=np.bool)
    mask_a[200:400, 200:400] = 1
    mask_a_img = Nifti1Image(mask_a.astype(int), np.eye(4))

    mask_b = np.zeros((800, 800, 1), dtype=np.bool)
    mask_b[200:600, 200:600] = 1
    mask_b_img = Nifti1Image(mask_b.astype(int), np.eye(4) / 2.)

    mask_ab = np.zeros((400, 400, 1), dtype=np.bool)
    mask_ab[200, 200] = 1

   # arbitrary ground truth value...
    test_mem = 2 * (mask_b_img.get_data().nbytes +
                    mask_b_img.get_data().nbytes +
                    mask_a_img.get_data().nbytes) / (1024 ** 2)
    assert_memory_less_than(test_mem, 0.1,
                            compute_multi_epi_mask,
                            [mask_a_img, mask_b_img], threshold=1., opening=0,
                            target_affine=np.eye(4),
                            target_shape=(400, 400, 1))
```

Maybe an expert such as @AlexandreAbraham will have a better idea :)
",8bc3083da7a34c50ddc232d08823fb957aa841d0,[MRG] Memory check based on memory profiler,thi fix 736 fulli function the problem memoryprofil cannot realli trust function increas memori less 1mib I also couldnt appli real test here exampl doesnt work mayb expert alexandreabraham better idea
pull_request_merged,959,nilearn,nilearn,lesteve,2016-02-04 14:54:12,[MRG] Memory check based on memory profiler,2d26376d97be13f78e4a026104d3f58acc7afede,Pull request merge from aabadie/nilearn:mem_check to nilearn/nilearn:master,mrg memori check base memori profil
issue_comment,959,nilearn,nilearn,aabadie,2016-01-22 09:28:01,"For the record, I pushed a test function that checks that the `_iter_check_niimg` doesn't do any memory copy (as suggested by @AlexandreAbraham). The memory usage is as expected.
",,,for record I push test function check doesnt memori copi suggest alexandreabraham the memori usag expect
issue_comment,959,nilearn,nilearn,AlexandreAbraham,2016-01-22 12:08:46,"That's great !

I have another suggestion (not for your PR, in general). In nilearn, we often use weird coding patterns (I'm thinking of taking the sum of a numpy array to know if there is nan inside for example). It would be interesting to keep a performance test (time and memory usage) for some of these patterns.

It is useful for other developers and, for example, we could bench the Nifti1Image format, on which we rely heavily, and thus spot if there is performance regression.

Benching the I/O is also interesting for cluster computation: some design patterns may not be favorable on a cluster because of longer file access time.

This is not a trivial work. What do you think?
",,,that great I anoth suggest PR gener In nilearn often use weird code pattern Im think take sum numpi array know nan insid exampl It would interest keep perform test time memori usag pattern It use develop exampl could bench nifti1imag format reli heavili thu spot perform regress bench IO also interest cluster comput design pattern may favor cluster longer file access time thi trivial work what think
issue_comment,959,nilearn,nilearn,aabadie,2016-01-22 15:20:59,"> I have another suggestion (not for your PR, in general). In nilearn, we often
> use weird coding patterns (I'm thinking of taking the sum of a numpy array
> to know if there is nan inside for example). It would be interesting to keep
> a performance test (time and memory usage) for some of these patterns.

For computation time testing, it's difficult because it depends on the speed of the cpu running the test. Using reference measures computed from the current master and stored in a dedicated file, we could compare the measures of a PR against them and raise an error in case of a too large difference.

> Benching the I/O is also interesting for cluster computation: some design
> patterns may not be favorable on a cluster because of longer file access
> time.

I see the point. I don't how one can check the underlying I/O system calls from Python.
Maybe this could be done using a call to an external command like (only available on posix):

``` bash
# Return the number of system calls to read
strace python -c ""some python code with I/O"" 2>&1 | grep read | wc -l
# Return the number of system calls to write
strace python -c ""some python code with I/O"" 2>&1 | grep write | wc -l
```

The output of the commands above could then be sent back to and analyzed be the global python test script.

> This is not a trivial work.

I agree, but it's not impossible.
",,,for comput time test difficult depend speed cpu run test use refer measur comput current master store dedic file could compar measur PR rais error case larg differ I see point I dont one check underli IO system call python mayb could done use call extern command like avail posix the output command could sent back analyz global python test script I agre imposs
issue_comment,959,nilearn,nilearn,lesteve,2016-01-22 15:29:17,"> >  This is not a trivial work.
> 
> I agree, but it's not impossible.

scikit-learn tried to do these kind of performance monitoring at one point during a GSoC. From what I have heard, a significant amount of time was invested with little return because this is a lot of work to maintain the infrastructure to do it. From what I remember it was based on vbench which ended up changing its internals and breaking the work that was done on scikit-learn.
",,,scikitlearn tri kind perform monitor one point gsoc from I heard signific amount time invest littl return lot work maintain infrastructur from I rememb base vbench end chang intern break work done scikitlearn
issue_comment,959,nilearn,nilearn,lesteve,2016-01-22 15:30:25,"You seem to have introduced a PEP8 (line too long). You can look at the Travis build output [here](https://travis-ci.org/nilearn/nilearn/jobs/104104951). The best is if you run ./continuous_integration/flake8_diff.sh in your local code.
",,,you seem introduc pep8 line long you look travi build output the best run continuousintegrationflake8diffsh local code
issue_comment,959,nilearn,nilearn,aabadie,2016-01-22 15:34:15,"> You seem to have introduced a PEP8 (line too long)

Indeed, I changed the configuration of my IDE flake8 to accept lines up to 80 characters...
",,,inde I chang configur ide flake8 accept line 80 charact
issue_comment,959,nilearn,nilearn,GaelVaroquaux,2016-01-22 15:59:23,"> From what I remember it was based on vbench which ended up changing its
> internals and breaking the work that was done on scikit-learn.

Pandas is now using something different, and they are very happy with it.
We should look at that. But nilearn is probably not the place to set this
up; rather a bigger project, with more manpowerful.
",,,panda use someth differ happi We look but nilearn probabl place set rather bigger project manpow
issue_comment,959,nilearn,nilearn,aabadie,2016-01-22 16:37:49,"> But nilearn is probably not the place to set this up; rather a bigger project, with more manpowerful.

scikit-learn ?
",,,scikitlearn
issue_comment,959,nilearn,nilearn,aabadie,2016-01-22 16:40:26,"> Pandas is now using something different, and they are very happy with it.

Looking at their repos, it seems they are still using vbench. But I may have missed something.
",,,look repo seem still use vbench but I may miss someth
issue_comment,959,nilearn,nilearn,GaelVaroquaux,2016-01-22 16:42:14,"> scikit-learn ?

Yes. But let's first discuss this in an engineering meeting at the lab.
Do you want to schedule one? (doodle?)
",,,ye but let first discuss engin meet lab Do want schedul one doodl
issue_comment,959,nilearn,nilearn,aabadie,2016-01-22 17:13:02,"> Do you want to schedule one? (doodle?)

Sure. Let's do it next wednesday afternoon or thursday.
",,,sure let next wednesday afternoon thursday
issue_comment,959,nilearn,nilearn,aabadie,2016-02-02 13:48:01,"Just for the record, I think this is PR is ready for a re-review (nearly mergeable).
",,,just record I think PR readi rereview nearli mergeabl
issue_comment,959,nilearn,nilearn,lesteve,2016-02-04 14:54:09,"LGTM, let's merge this one and revisit potentially if we think we can improve it.
",,,lgtm let merg one revisit potenti think improv
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-22 15:36:57,"I am not sure what 1e6 means and I think it is misleading since it actually means 1024 *\* 2 bytes.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",I sure 1e6 mean I think mislead sinc actual mean 1024 2 byte
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-22 15:37:15,"What's the point of having callable_obj=None by default?
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",what point callableobjnon default
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-22 15:38:34,"why not do `memory_used = None` like you do for memory_usage?
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",like memoryusag
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-01-22 15:39:44,"Probably the same as the one I took as example here: https://github.com/nilearn/nilearn/pull/959/files#diff-84deb1797526e96db1bf5f1c72f508eaR36
I'll remove the default parameter.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",probabl one I took exampl ill remov default paramet
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-22 15:42:30,"I thought we agreed to check the used memory as measured by memory_profiler rather that the expected_value. Also from our little experiments I would say that setting the threshold at 10 MiB is more reasonable.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",I thought agre check use memori measur memoryprofil rather expectedvalu also littl experi I would say set threshold 10 mib reason
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-01-22 15:50:03,"Indeed this is not necessary.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",inde necessari
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-01-22 15:57:26,"> I thought we agreed to check the used memory as measured by memory_profiler rather that the expected_value.

I think that we didn't converge. Thinking of it, `expected_value` should be renamed to  `memory_limit` to be more in the spirit of the initial desired behaviour.

> I would say that setting the threshold at 10 MiB is more reasonable.

Agreed, will change.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",I think didnt converg think renam spirit initi desir behaviour agre chang
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-22 16:11:18,"> I think that we didn't converge

I should work on my impression of converging then :-). Given the %memit behaviour we saw, I would feel a lot more confident to check that the memory usage is not smaller than 10 MiB. You may need to change your test to make sure that the function uses some memory for example by creating the array inside the function if you want to make sure that something doesn't make any copy, e.g. in your test_iter_niimg stuff but that sounds fine to me.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",I work impress converg given memit behaviour saw I would feel lot confid check memori usag smaller 10 mib you may need chang test make sure function use memori exampl creat array insid function want make sure someth doesnt make copi eg testiterniimg stuff sound fine
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-01-22 17:09:09,"> Given the %memit behaviour we saw, I would feel a lot more confident to check that the memory usage is not smaller than 10 MiB

I added an extra check one the memory is measured. You were right : with 10MiB objects, the measured memory was 0.0... It works as expected with larger objects.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",I ad extra check one memori measur you right 10mib object measur memori 00 It work expect larger object
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-28 09:32:05,"Maybe we don't really care about running memory_profiler tests on CircleCI, given that we are already running them on Travis.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'circle.yml')",mayb dont realli care run memoryprofil test circleci given alreadi run travi
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-01-28 09:37:50,"Yeah, I just wanted to compare the results across CI's (as the tests fail on travis). I'll revert this.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'circle.yml')",yeah I want compar result across ci test fail travi ill revert
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-01-28 12:49:03,"Quickly looking at the memory_profiler code, it looks like timeout does nothing when memory usage is called with a tuple (func, args, kwargs).
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",quickli look memoryprofil code look like timeout noth memori usag call tupl func arg kwarg
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-01-28 13:05:48,"I removed it.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/_utils/testing.py')",I remov
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-02-02 14:43:33,"Is this still necessary? I seem to remember it was added when you tried to make the AppVeyor tests pass.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/tests/test_niimg_conversions.py')",Is still necessari I seem rememb ad tri make appveyor test pass
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-02-02 14:50:12,"Codacy disliked the previous code, if I remove the `del` line there's a flake8 issue on travis.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/tests/test_niimg_conversions.py')",codaci dislik previou code I remov line there flake8 issu travi
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-02-02 14:51:03,"This generates a flake8 issue on travis (non used variable). Replacing by `b'a' * size` makes codacy fails...
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(14, '', u'nilearn/tests/test_testing.py')",thi gener flake8 issu travi non use variabl replac make codaci fail
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-02-02 15:37:36,"FWIW I don't think codacy brings much to the table. I'll probably remove it at one point. You can use `return mem_offset` if you really care about getting rid of the flake8 warning.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/tests/test_niimg_conversions.py')",fwiw I dont think codaci bring much tabl ill probabl remov one point you use realli care get rid flake8 warn
pull_request_commit_comment,959,nilearn,nilearn,lesteve,2016-02-02 15:39:24,"Use `return mem_use`
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(14, '', u'nilearn/tests/test_testing.py')",use
pull_request_commit_comment,959,nilearn,nilearn,aabadie,2016-02-02 16:02:43,"I updated this. Travis and Codacy should be happy now.
",8bc3083da7a34c50ddc232d08823fb957aa841d0,"(None, '', u'nilearn/tests/test_niimg_conversions.py')",I updat travi codaci happi
pull_request_commit,959,nilearn,nilearn,aabadie,2016-01-28 13:18:54,adding memory consumption function based on memory profiler + test,d253e8cdbfefcca66f19ce49e2c379547114a6fa,,ad memori consumpt function base memori profil test
pull_request_commit,959,nilearn,nilearn,aabadie,2016-01-28 13:58:36,add memory profiling function with _iter_check_niimg function.,44d60ef028f4b5bd138cba567d6951e54164daca,,add memori profil function itercheckniimg function
pull_request_commit,959,nilearn,nilearn,aabadie,2016-01-28 13:59:53,activate testing with memory_profiler on travis,0bc0a870a219dbf488305571520e337b4c3e9d3e,,activ test memoryprofil travi
pull_request_commit,959,nilearn,nilearn,aabadie,2016-02-02 08:18:40,trying to fix codacy,36b0290f32b5b5f66e524ff3e6a7147b8dc1a64c,,tri fix codaci
pull_request_commit,959,nilearn,nilearn,aabadie,2016-02-02 10:42:27,trying to fix travis,d0bc2754c36c4b3ec006a9ac9fa4c4f391c98947,,tri fix travi
pull_request_commit,959,nilearn,nilearn,aabadie,2016-02-02 15:41:29,applying comments,8bc3083da7a34c50ddc232d08823fb957aa841d0,,appli comment
