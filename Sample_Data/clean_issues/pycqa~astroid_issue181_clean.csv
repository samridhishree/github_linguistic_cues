rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text
issue_title,181,pycqa,astroid,pylint-bot,2015-09-04 21:57:01,"Originally reported by: **Anonymous**

---

I have a line where I have a list of tuples and one of the elements of the tuple is an object which has a **str** conversion function. I think the most trenchant code for printing this for inspection is 

""\n"".join(["","".join(map(str,e))
              for e in list_of_tuples])

because join wants its list to consist of strings.

Using a list comprehension for this would probably look like

""\n"".join(["","".join([str(ee) for ee in e]) 
               for e in list_of_tuples])

But I haven't tried it because it's not economical compared to map.

I know I can disable bad built-in on the basis of an individual built-in. But bad-builtin is relevant for other choices between LC and map so I'm looking for something more subtle. I'm not opposed to LC's in general. As a newbie who has been exposed to FP I appreciate collection comprehensions and am delighted to use them. But map(str) should be considered a good idiom. If you set the criterion as allow builtins that transform a collection to the same collection maybe this is a worthwhile relaxation of the bad-builtin criteria

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/181
",start issue,bad builtin on map is not black-and-white,origin report anonym I line I list tupl one element tupl object str convers function I think trenchant code print inspect njoinjoinmapstr e listoftupl join want list consist string use list comprehens would probabl look like njoinjoinstre ee e e listoftupl but I havent tri econom compar map I know I disabl bad builtin basi individu builtin but badbuiltin relev choic LC map Im look someth subtl Im oppos lc gener As newbi expos FP I appreci collect comprehens delight use but mapstr consid good idiom If set criterion allow builtin transform collect collect mayb worthwhil relax badbuiltin criteria bitbucket
issue_closed,181,pycqa,astroid,pylint-bot,2015-12-09 05:54:38,,closed issue,bad builtin on map is not black-and-white,
issue_comment,181,pycqa,astroid,pylint-bot,2015-09-10 21:57:37,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hi,

Could you post the issue on pylint's tracker, please? https://bitbucket.org/logilab/pylint/
This issue tracker is for pylint's underlying AST and inference engine.
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor Hi could post issu pylint tracker pleas thi issu tracker pylint underli ast infer engin
