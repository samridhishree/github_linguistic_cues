rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text
issue_title,72,nilearn,nilearn,GaelVaroquaux,2013-06-11 14:25:14,"I suggest the following new API for the recursive caching patterns:
- A wrapper for joblib.Memory (NiLearnMemory):
  - attributes: `memory_level` (integer), `mem` (joblib.Memory)
  - methods:
    - `make_child` that returns an object of the same class with the same mem and a memory_level smaller (where the decrement would be an optional argument of the method)
    - `cache` that has the same signature as Memory.cache, but with an additional optional `level` parameter. That parameter is compared to the memory_level of the object to know whether to cache or not.
- A constructor `check_memory` that can take a string or a joblib.Memory or a NiLearnMemory object (with optional memory_level) and always returns a NiLearnMemory object.

The combination of check_memory and 'mem.make_child' should cover all our needs in NiLearn and enable us to remove the 'memory_level' parameters and 'cache' function calls in our code.
",start issue,Caching new API,I suggest follow new api recurs cach pattern A wrapper joblibmemori nilearnmemori attribut integ joblibmemori method return object class mem memorylevel smaller decrement would option argument method signatur memorycach addit option paramet that paramet compar memorylevel object know whether cach A constructor take string joblibmemori nilearnmemori object option memorylevel alway return nilearnmemori object the combin checkmemori memmakechild cover need nilearn enabl us remov memorylevel paramet cach function call code
issue_comment,72,nilearn,nilearn,GaelVaroquaux,2013-06-12 16:05:46,"Also, the caching mechanism should be default ignore verbose, n_jobs, memory, memory_level....
",,,also cach mechan default ignor verbos njob memori memorylevel
