rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text
issue_title,207,pycqa,astroid,pylint-bot,2015-10-06 23:38:16,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The YES object represents some kind of indication that astroid's inference has failed, but the name gives no indication of this.  Since we already have an InferenceError, maybe InferenceFailure or some such?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/207
",start issue,Rename YES to something more clearly describing its purpose,origin report bitbucket ceridwenv github ceridwen the ye object repres kind indic astroid infer fail name give indic sinc alreadi inferenceerror mayb inferencefailur bitbucket
issue_closed,207,pycqa,astroid,pylint-bot,2015-12-09 05:55:06,,closed issue,Rename YES to something more clearly describing its purpose,
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-06 21:46:39,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

FWIW, in PEP 484 (type hints), the somewhat similar thing is called ""Any"". I don't like InferenceFailure personally, it sounds too much like an exception...

Maybe Uninferred or Uninferrable or Something/Object/Thing?
",,,origin comment florian bruhin bitbucket thecompil github thecompil fwiw pep 484 type hint somewhat similar thing call ani I dont like inferencefailur person sound much like except mayb uninf uninferr somethingobjectth
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-06 21:54:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

How about Anything? 
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor how anyth
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 04:45:11,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Any or Anything sound good
",,,origin comment sylvain thénault bitbucket sthenault github sthenault ani anyth sound good
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 18:35:30,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Keep in mind that typing.Any represents a type, not a value, while inference returns, in general, values, as I understand it. This difference isn't always as well-defined in Python's type system as in others, because for instance classes, which are themselves types, are instances/values of metaclasses, but I think it's worth trying to keep this concept distinct from typing.Any. I'd prefer Undefined, Unknown, or Uninferrable.
",,,origin comment bitbucket ceridwenv github ceridwen keep mind typingani repres type valu infer return gener valu I understand thi differ isnt alway welldefin python type system other instanc class type instancesvalu metaclass I think worth tri keep concept distinct typingani Id prefer undefin unknown uninferr
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 19:15:11,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Dunno ? :)
",,,origin comment sylvain thénault bitbucket sthenault github sthenault dunno
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 20:24:49,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I also think that it should not be named Any, since it will definitely cause confusion. From the other alternatives, I prefer Anything or Unknown / Uninferrable. I don't like Undefined because it's not clear what's undefined, the result of the inference or something in the inference chain. Uninferrable suggests that something can't be inferred and has a negative conotation, whilst Anything suggests the same (to me at least) but has a positive connotation (in the sense that the inference engine can say that Anything can happen when inferring this node).

So either Uninferrable or Anything, your pick, @ceridwenv :-)
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor I also think name ani sinc definit caus confus from altern I prefer anyth unknown uninferr I dont like undefin clear what undefin result infer someth infer chain uninferr suggest someth cant infer neg conot whilst anyth suggest least posit connot sens infer engin say anyth happen infer node So either uninferr anyth pick ceridwenv
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-10 17:02:06,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I was thinking further about typing in connection with this.  Type inference is really a form of a theorem prover about a program, proving either that the type of a return value is some type or that the types aren't consistent in the first place.  The Any type in the typing stdlib module is what's called a https://en.wikipedia.org/wiki/Top_type , a type that's a supertype of all other types.  However, I don't see how to provide inference results with relations like, ""is a subtype of"" or ""is a supertype of,"" so I think that conceptually astroid inference results are different from types.  Thus, my vote goes for Uninferable.  (Note: I think the spelling ""inferable"" is more standard, so I think we should spell it thus: http://www.merriam-webster.com/thesaurus/inferable .)
",,,origin comment bitbucket ceridwenv github ceridwen I think type connect type infer realli form theorem prover program prove either type return valu type type arent consist first place the ani type type stdlib modul what call type that supertyp type howev I dont see provid infer result relat like subtyp supertyp I think conceptu astroid infer result differ type thu vote goe uninfer note I think spell infer standard I think spell thu
issue_comment,207,pycqa,astroid,pylint-bot,2015-10-10 17:47:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yes, we're more interested into what happens rather than what types are involved. I'm perfectly happy with Uninferable. The fix must leave YES as an alternative name to Uninferable, but it could mark it as deprecated. We'll remove YES in a couple of releases afterwards.
",,,origin comment claudiu popa bitbucket pcmanticor github pcmanticor ye interest happen rather type involv Im perfectli happi uninfer the fix must leav ye altern name uninfer could mark deprec well remov ye coupl releas afterward
issue_comment,207,pycqa,astroid,pylint-bot,2015-11-06 23:48:02,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Renamed in b68ee1186e5f.
",,,origin comment bitbucket ceridwenv github ceridwen renam b68ee1186e5f
