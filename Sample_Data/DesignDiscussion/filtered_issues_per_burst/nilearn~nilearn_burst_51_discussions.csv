Unnamed: 0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
3,issue_comment,335,nilearn,nilearn,AlexandreAbraham,2015-01-07 14:44:01,"I have these functions in my toolbox and use them all the time.
",nan,nan
4,issue_comment,335,nilearn,nilearn,banilo,2015-01-07 14:59:00,"How about a cool nifti generator? :-P

https://github.com/nilearn/nilearn/pull/272
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
7,pull_request_commit_comment,334,nilearn,nilearn,lesteve,2015-01-06 10:22:07,"PEP8
",717f1122f9e65d233dd5fa4821943c380015fb3c,"(None, '', u'nilearn/datasets.py')"
8,pull_request_commit_comment,334,nilearn,nilearn,lesteve,2015-01-06 10:31:35,"urllib.splitquery may be a bit clearer. It returns a tuple `url_without_query, query`

Also slight niggle, I would do 

``` python

displayed_url = urllib.splitquery(url)[0] if verbose == 0 else url
print 'Dowloading data from %s ...' % displayed_url
```
",717f1122f9e65d233dd5fa4821943c380015fb3c,"(None, '', u'nilearn/datasets.py')"
5,issue_comment,334,nilearn,nilearn,lesteve,2015-01-06 14:55:08,"Just as a reminder to ourselves, in we ever forget about this, the verbose parameter need to be passed into _fetch_file.
",nan,nan
6,issue_comment,334,nilearn,nilearn,AlexandreAbraham,2015-01-06 15:30:21,"Fixed in the last commit.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,331,nilearn,nilearn,bthirion,2014-12-23 16:05:57,"If there was a way to increase the size of the brains wrt the white bg, that would be great.
Looks good otherwise.
",nan,nan
5,issue_comment,331,nilearn,nilearn,lesteve,2015-01-05 15:26:42,"In general I am not 100 % convinced by cosmetic changes like this in the examples. IMHO it obfuscates them slightly by adding some boiler-plate plotting code that is not directly relevant to the functionality that the example is supposed to demonstrate.

Also something we need to remember each time we change an example is to make sure this doesn't affect the documentation. In this particular case one of the ICA plot is in the website home page carousel. It is also used in other places, for example try `git grep 'plot_canica.*\.png'` for the complete list.
",nan,nan
6,issue_comment,331,nilearn,nilearn,GaelVaroquaux,2015-01-05 15:42:48,"I have the same feeling as @lesteve, though it is not a strong opinion.
",nan,nan
7,issue_comment,331,nilearn,nilearn,banilo,2015-01-06 14:44:25,"hmm... I see your points
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,333,nilearn,nilearn,lesteve,2015-01-06 08:55:20,"I think this one is done. It's just that the website hasn't been updated since. Look at http://lesteve.github.io/ which is more up-to-date.
",nan,nan
4,issue_comment,333,nilearn,nilearn,GaelVaroquaux,2015-01-06 08:57:05,"I don't think so. The docs/index.rst should be update. Neither the
website that you point to, nor the code in master seem to include this
change, IMHO.
",nan,nan
5,issue_comment,333,nilearn,nilearn,lesteve,2015-01-06 09:54:00,"Basically, plot_demo_plotting.py has now become the simple example (so doc/index.rst didn't need to be updated). It shows the different plot_\* functions. The advanced example is plot_demo_more_plotting.py and shows all the display modes + using add_edges and add_contours on a display object.
",nan,nan
6,issue_comment,333,nilearn,nilearn,GaelVaroquaux,2015-01-06 09:55:53,"OK. It didn't seem that simple to me. Have you tried it upon our favorite
guinea pig: Baptiste?
",nan,nan
7,issue_comment,333,nilearn,nilearn,lesteve,2015-01-06 10:11:05,"I haven't tried. Not sure how to simplify it further, besides creating one example by plot_ function.
",nan,nan
8,issue_comment,333,nilearn,nilearn,AlexandreAbraham,2015-01-06 10:19:59,"I was thinking of one example of 5 lines for the glass brain only and one ""advanced"" with all the other plots. One example by plot function is only needed if we want to show the effect of different parameters.
",nan,nan
9,issue_comment,333,nilearn,nilearn,GaelVaroquaux,2015-01-06 10:21:49,"> I was thinking of one example of 5 lines for the glass brain only and one
> ""advanced"" with all the other plots.

I'd say 3 examples: the 5-liner you mention, to catch people in, as the
glass brain is a clear selling point of the package, the current simple
example, and the current full example. The 5-liner would be on the
front page, but it would link (in the docstring) to the other examples.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
23,pull_request_commit_comment,277,nilearn,nilearn,AlexandreAbraham,2014-11-11 22:11:48,"`array_equal` may not be the best function to use with float values.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
24,pull_request_commit_comment,277,nilearn,nilearn,AlexandreAbraham,2014-11-11 22:12:54,"Do you really have a use case where this parameter is useful?
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
25,pull_request_commit_comment,277,nilearn,nilearn,banilo,2014-11-12 08:10:30,"I was inspired by how the affines are compared in niimg_conversion.py. What should I use instead?
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
26,pull_request_commit_comment,277,nilearn,nilearn,banilo,2014-11-13 08:01:27,"Gael added this function and auto_resample option to the 0.1 milestone (cf. #183)
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
27,pull_request_commit_comment,277,nilearn,nilearn,bthirion,2014-11-16 21:46:02,"You probably need to explain a bit more the logic of the function here since your image concatenation can do really fancy stuff.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
28,pull_request_commit_comment,277,nilearn,nilearn,bthirion,2014-11-16 21:54:32,"the `sizes` naming  (and size in the for loop below) is not good because this is not consistent with what is called a size in numpy.  This probably fits better with the concept of len.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
5,issue_comment,277,nilearn,nilearn,banilo,2014-11-16 22:46:34,"Thanks for the advice, I tried to remedy accordingly.
",nan,nan
6,issue_comment,277,nilearn,nilearn,banilo,2014-11-19 08:19:37,"Here's a use case: some time ago, we wanted to run summary analyses on the top of a bunch of previous quantitative meta-analyses published by different laboratories (project related to cognitive primitives). That is, there were niftis in different shapes as well as data in different representations (3D/4D), since everybody simply sent there data in the form they have the habit of processing it at their respective labs.

In this particular case, it would have been nice to rapidly get an overview of all the heterogeneous data by first getting everything into one 4D image in the same space to begin with.
More generally, I see the gain of concat_img in being able to collect niftis from heterogeneous origins/data processing cultures, including NeuroVault- or OpenfMRI-like sources.
",nan,nan
29,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 10:46:06,"This could be a assert_array_equal, right?
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/tests/test_image.py')"
30,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 10:46:44,"PEP8 misalignment I think, it's probably worth spending some time setting up PEP8 warnings in your editor of choice.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/tests/test_image.py')"
31,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 10:50:22,"You can decorate the test function with nose.with_setup decorator which is quite handy for this kind of setup, teardown stuff. An example [here](https://github.com/nilearn/nilearn/blob/master/nilearn/tests/test_datasets.py#L61).
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/tests/test_image.py')"
32,pull_request_commit_comment,277,nilearn,nilearn,GaelVaroquaux,2014-11-19 10:54:59,"> Do you really have a use case where this parameter is useful?

Bunch of data acquired on different subjects. The data having been
realigned using rigid transformation, thus only the affine has been
modified. As a result, they have different affines.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
33,pull_request_commit_comment,277,nilearn,nilearn,banilo,2014-11-19 11:57:59,"practical use case:
download z-maps from Neurovault that came from different laboratories / preprocessing pipelines -> we want to run third-level analyses across those, without resampling each image by hand first
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
34,pull_request_commit_comment,277,nilearn,nilearn,GaelVaroquaux,2014-11-19 11:58:59,"> download z-maps from Neurovault that came from different laboratories /
> preprocessing pipelines -> we want to run third-level analyses across
> those, without resampling each image by hand first

Great example!

Although I would use a NiftiMasker to do that :)
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
35,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 12:13:07,"I believe the `verbose` argument is generally an int rather than a boolean in nilearn.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
36,pull_request_commit_comment,277,nilearn,nilearn,GaelVaroquaux,2014-11-19 12:22:00,"> I believe the verbose argument is generally an int rather than a boolean in
> nilearn.

Both work, as False is equivalent to 0 and True to 1.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
37,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 12:29:24,"You are not using `index` in this loop.

Probably related the comment in the line below doesn't make sense any more.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
38,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 12:36:07,"> Both work, as False is equivalent to 0 and True to 1.

Sure, but I meant more as a general convention. It seems most of the code I have seen in nilearn does `verbose=0` by default and does a ""greater than"" comparison for printing debug information.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
39,pull_request_commit_comment,277,nilearn,nilearn,GaelVaroquaux,2014-11-19 12:42:54,"> Sure, but I meant more as a general convention. It seems most of the code I
> have seen in nilearn does verbose=0 by default and does a greater than
> comparison for printing debug information.

The greater than will also work with ints. I have no preference.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
40,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-11-19 12:47:52,"You can use `%r` in your string template to avoid having to use repr (not sure what gain you expect by using repr btw)
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/image.py')"
7,issue_comment,277,nilearn,nilearn,lesteve,2014-11-19 14:45:45,"OK I just realised now that @banilo took the code of _utils.concat_niimgs with some slight modifications so that most of my comments applied mostly to the former.

Also I do believe we should think of a better way to share code to add this auto_resample functionality.
",nan,nan
8,issue_comment,277,nilearn,nilearn,banilo,2014-11-22 13:31:45,"So, how about refactoring the code like this:

Take the functionality from the private _utils.concat_niimgs to the public image.concat_img, including the arguments auto_resample (currently image.concat_img) and accept_4d (currently _utils.concat_niimgs). 

This combined public function could then be called in check_niimgs and related functions.

Additionally, the ""_img"" suffix appears to be more prevalent than ""_niimg"" in nilearn, in general.
",nan,nan
9,issue_comment,277,nilearn,nilearn,lesteve,2014-11-24 08:18:18,"> Take the functionality from the private _utils.concat_niimgs to the public image.concat_img, including the arguments auto_resample (currently image.concat_img) and accept_4d (currently _utils.concat_niimgs).
> 
> This combined public function could then be called in check_niimgs and related functions.

I would say this is the wrong way around: _utils should be used by user-facing modules otherwise you'll increase your risk creating circular depencies. Maybe the simplest is to add the functionality to _utils and then just do `from _utils import concat_img` in image.py so that it is exposed to the user.

> Additionally, the ""_img"" suffix appears to be more prevalent than ""_niimg"" in nilearn, in general.

I agree on this one.
",nan,nan
10,issue_comment,277,nilearn,nilearn,banilo,2014-11-24 08:23:37,"So, I understand...
1) we just update _utils.concat_niimgs with the new auto_resample option
2) we rename this function into ""concat_img"" and change all calls in nilearn accordingly?
",nan,nan
11,issue_comment,277,nilearn,nilearn,lesteve,2014-11-24 08:26:08,"> So, I understand...
> 1) we just update _utils.concat_niimgs with the new auto_resample option
> 2) we rename this function into ""concat_img"" and change all calls in nilearn accordingly?

I think so and if we want a user-facing concat_img we just import it in nilearn.image something like:
`from .._utils import concat_img` this way it will be accessible as `nilearn.image.concat_img`
",nan,nan
12,issue_comment,277,nilearn,nilearn,banilo,2014-11-24 08:27:31,"Good idea!, ok, I will do this in the afternoon.
",nan,nan
13,issue_comment,277,nilearn,nilearn,banilo,2014-11-27 08:41:04,"Private function _concat_niimg updated accordingly.
",nan,nan
14,issue_comment,277,nilearn,nilearn,lesteve,2014-12-17 14:43:22,"@banilo still a merge conflict on this one, have you checked where it is coming from?
",nan,nan
15,issue_comment,277,nilearn,nilearn,banilo,2014-12-18 13:48:37,"...merge conflicts resolved.
",nan,nan
41,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-12-19 08:28:09,"You have to use `from nilearn._utils.testing import assert_raises_regexp` so that it works with Python 2.6
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/tests/test_niimg_conversions.py')"
42,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2014-12-19 09:18:23,"Shouldn't there be a 's', i.e. length**s**?
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/_utils/niimg_conversions.py')"
16,issue_comment,277,nilearn,nilearn,banilo,2014-12-23 14:09:58,"Last comments integrated.

Pushing of a commit that only restores trailing white spaces does actually not work reliably for me :( This is why I made random changes in the local neighbor hood...
",nan,nan
43,pull_request_commit_comment,277,nilearn,nilearn,bthirion,2014-12-23 15:52:56,"Nosetest tells me that lines 290-297 are not tested. If it is the case, could you add a test ?
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/_utils/niimg_conversions.py')"
17,issue_comment,277,nilearn,nilearn,bthirion,2014-12-23 15:53:31,"Besides the test aspect,  the PR looks good to me.
",nan,nan
18,issue_comment,277,nilearn,nilearn,lesteve,2015-01-05 15:39:55,"An additional thing is that the promise of this PR is not fulfilled: you have not added concat_img to nilearn.image ...

I think the idea was just to do something along the lines of:
`from _utils.niimg_conversions import concat_niimg as concat_img`
in `nilearn/image/__init__.py`. A test using nilearn.image.concat_img would be good.
",nan,nan
20,issue_comment,277,nilearn,nilearn,banilo,2015-01-07 09:41:59,"All aspects should have been addressed now.
",nan,nan
19,issue_comment,277,nilearn,nilearn,AlexandreAbraham,2015-01-07 11:48:08,"Is there a usecase where we want to concat 3D and 4D images ? I would expect to concat only 3D or 4D images, mixing 3D and 4D images should raise an error, or at least a warning.
",nan,nan
44,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2015-01-12 16:36:27,"You could do something like this that would test that they are actually the exact same function

``` python
# in the imports
from ..._utils import niimg_conversions

# in the tests
def test_concat_imgs():
    image.concat_imgs is niimg_conversions.concat_niimgs
```
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/tests/test_image.py')"
45,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2015-01-12 16:39:58,"I don't understand what you mean by ""parse"" here and also a few times in the lines below. Also I am not sure what useful piece of information this comments bring.
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/_utils/niimg_conversions.py')"
46,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2015-01-12 16:47:52,"Sorry there is a missing assert_true in the previous comment:

``` python
# in the tests
def test_concat_imgs():
    assert_true(image.concat_imgs is niimg_conversions.concat_niimgs)
```
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/tests/test_image.py')"
47,pull_request_commit_comment,277,nilearn,nilearn,lesteve,2015-01-13 10:48:50,"I guess you don't need this test any more, i.e. all the testing is done in the _utils.niimg_conversions test
",4102d5190f84d0f48e3cdde7bca5891db7c97aab,"(None, '', u'nilearn/image/tests/test_image.py')"
21,issue_comment,277,nilearn,nilearn,banilo,2015-01-14 09:06:40,"As @lesteve said, this PR does not relate to the behavior you are talking about. This aspect remains unchanged.
",nan,nan
22,issue_comment,277,nilearn,nilearn,banilo,2015-01-14 09:34:46,":beer: 
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,322,nilearn,nilearn,banilo,2014-12-18 16:57:12,"``` python
# resample_img bug 1
# -> Segmentation fault: 11 in resample_img()

from nilearn.image import resample_img
import numpy as np
from nibabel import Nifti1Image

shape_in = (91, 109, 91)
aff_in = np.array([[  -2.,    0.,    0.,   90.], 
                  [   0.,    2.,    0., -126.],
                  [   0.,    0.,    2.,  -72.],
                  [   0.,    0.,    0.,    1.]])

shape_out = (53, 63, 46)
aff_out = np.array([[  -3.,    0.,    0.,   78.],
                   [   0.,    3.,    0., -111.],
                   [   0.,    0.,    3.,  -51.],
                   [   0.,    0.,    0.,    1.]])

data = np.zeros(shape_in + (1000, ), dtype=np.float)

for i_img in range(data.shape[-1]):
    data[..., i_img] = i_img + 1
img_in = Nifti1Image(data, aff_in)

for mode in ['nearest', 'continuous']:
    print ""Resampling (%s)..."" % mode
    img_out = resample_img(img_in, target_shape=shape_out,
        target_affine=aff_out, interpolation=mode)
    data_out = img_out.get_data()
    print ""Resampling done.""
    for i_img in range(data.shape[-1]):
        print ""%i..."" % i_img
        assert(data_out[..., i_img] == i_img + 1)
```
",nan,nan
4,issue_comment,322,nilearn,nilearn,banilo,2014-12-19 08:54:26,"I am still uploading one of the data files (should be accessible by noon today) but here is a script for reproducing bug 3 from above.

``` python
# resample_img bug 3
# -> image order messed up?
# (seems fine until 500th volume, but compare input preproc_RS_1000.nii.gz
#  and output resampled_4d.nii.gz at e.g. volume 600 in FSLView)
#
# Please download necessary data files:
# https://dl.dropboxusercontent.com/u/4403154/grey10_icbm.nii
# https://dl.dropboxusercontent.com/u/4403154/expression_intention-control_z_map.nii
# https://dl.dropboxusercontent.com/u/4403154/preproc_RS_1000.nii.gz

from nilearn.image import resample_img
from nilearn.input_data import NiftiMasker
import numpy as np
import nibabel as nib

mask_image = 'grey10_icbm.nii'
target_space_img = 'expression_intention-control_z_map.nii'
firstdataimg = nib.load(target_space_img)
masknii = resample_img(mask_image, target_shape=firstdataimg.shape,
                       target_affine=firstdataimg.get_affine(),
                       interpolation='nearest')
mask = masknii.get_data().astype(np.bool)
nifti_masker = NiftiMasker(mask_img=masknii, smoothing_fwhm=False,
                           standardize=False)
nifti_masker.fit()
tar_aff = np.array([[  -3.,    0.,    0.,   78.],
                    [   0.,    3.,    0., -111.],
                    [   0.,    0.,    3.,  -51.],
                    [   0.,    0.,    0.,    1.]])

r_nii = resample_img(
    nib.load('preproc_RS_1000.nii.gz'),
    target_shape=(53, 63, 46),
    target_affine=tar_aff,
    interpolation='continuous').to_filename('resampled_4d.nii.gz')
```
",nan,nan
5,issue_comment,322,nilearn,nilearn,AlexandreAbraham,2015-01-07 11:56:14,"I can't download the data.
",nan,nan
10,issue_comment,322,nilearn,nilearn,banilo,2015-01-07 12:04:52,"Smells like a dropbox-access issue.
",nan,nan
6,issue_comment,322,nilearn,nilearn,AlexandreAbraham,2015-01-07 12:30:04,"Using the code you posted, I have a bounding box issue (part of the cerebellum is cut). Apart from that, both files are identical.
",nan,nan
11,issue_comment,322,nilearn,nilearn,banilo,2015-01-07 13:09:32,"Regarding resample_img bug 3:

Nilearn seems to say that the 4D images - before and after resampling - are not the same.

```
plot_epi(nib.Nifti1Image(nib.load('resampled_4d.nii.gz').get_data()[..., 599], np.eye(4)))
```

![image](https://cloud.githubusercontent.com/assets/3907396/5645968/a757183c-9676-11e4-8016-e82021147d94.png)

```
plot_epi(nib.Nifti1Image(nib.load('preproc_RS_1000.nii.gz').get_data()[..., 599], np.eye(4)))
```

![image](https://cloud.githubusercontent.com/assets/3907396/5645962/a20f8d0a-9676-11e4-979f-94c82521b635.png)
",nan,nan
12,issue_comment,322,nilearn,nilearn,banilo,2015-01-07 13:33:33,"...this also seems to show in the histogramms:

```
plt.hist(nib.load('preproc_RS_1000.nii.gz').get_data()[..., 599].ravel(), bins=200, range=(1e-3,1))
```

![image](https://cloud.githubusercontent.com/assets/3907396/5646232/fe8c66fe-9679-11e4-8c05-015609870ba3.png)

```
plt.hist(nib.load('resampled_4d.nii.gz').get_data()[..., 599].ravel(), bins=200, range=(1e-3,1))
```

![image](https://cloud.githubusercontent.com/assets/3907396/5646230/f228072e-9679-11e4-95d9-f9d0bf79a9c4.png)
",nan,nan
7,issue_comment,322,nilearn,nilearn,AlexandreAbraham,2015-01-07 13:48:09,"I have the same histograms, however in my case the 2 images look alike. The difference in the distribution may be due to the cropping (I would however expect more 0s in the original image...).
",nan,nan
8,issue_comment,322,nilearn,nilearn,AlexandreAbraham,2015-01-11 22:29:48,"2 other bugs are:
- the brain is cropped during resampling
- data is very different from original after resampling: this is due to a bug in FSLview on Mac OS X
",nan,nan
9,issue_comment,322,nilearn,nilearn,AlexandreAbraham,2015-01-14 00:18:36,"I can't reproduce the cropping bug. I close this one, let's open other issues with precise examples if the problem comes up again.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
12,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:06:26,"Within a package, I always try to do relative imports to avoid any possible import conflicts.  Is this OK here?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
13,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:06:47,"This all got moved to `version.py`, except the few lines below.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
14,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-09 07:07:19,"> Within a package, I always try to do relative imports to avoid any possible
> import conflicts. Is this OK here?

Yes, this is good practice.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
15,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:07:31,"This code actually changes a setting, so is appropriate to stay.  The dependency check for `gzip` is already done (above), so no longer needs to be wrapped in the `try...catch` block.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
16,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:07:57,"Code is the same, except for one small tweak (comment below)
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
17,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:09:12,"I made this a `getattr`, as `gzip` doesn't have a `__version__` attribute.  This allows a bit more flexibility (though ... perhaps could be perceived as a hack?), by allowing `gzip` (and other modules not playing the `__version__` game) to be processed as dependencies in the same codepath as our other module dependencies.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(52, '', u'nilearn/version.py')"
18,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:09:35,"New function, with greater metadata (see docstrings)
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
19,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:10:11,"I'm not sure if this check is the best way to go about things, or to create two different functions (one in `setup.py`, one in `__init__.py`).  I'm open to either.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
20,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:10:36,"Make sure the `nilearn` we import is the one we're installing, not one in the system path.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
21,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:11:14,"Here (and below) allows `setup.py` to be called from a different working directory than the `nilearn` directory.  Not sure if it's every needed by `pypi`, but it did help me with testing... :)
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
22,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 07:11:48,"One nice thing about the current setup is that there's only one place where the dependencies are defined (in 'version.py'); the needed strings to pass to `setup` are created from that data here.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
23,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-09 07:54:50,"I think that rather than importing and deleting, which we did to avoid polluting the namespace, eg for tab completion, I would rename the function to _check_module_dependencies, and not delete it. IPython will by default hide these from tab-completion.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
24,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-09 08:00:28,"Why do we need a function here, and not simply a module-level dictionary (which should be named ALL_CAPS, as it is a constant): REQUIRED_MODULE_METADATA?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
25,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-09 08:01:17,"I believe that iteritems is deprecated in Python 3, and ""items()"" should be used.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
26,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-09 08:03:24,"I would rather that you use the mechanism used below in ""get_version"", that doesn't rely on importing nilearn. Indeed, there are multiple reasons why importing nilearn could fail with a non helpful error, while simply running the corresponding file (as in get_version), is quite robust.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
27,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-09 08:04:15,"I am not sure what is the purpose of this change?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
28,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-09 10:13:41,"`gzip` is not a dependency. It is optional and allows to open `.nii.gz` files, this is why it was in a `try ... catch` block.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
29,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-09 10:15:09,"See above, it is to be able to call setup.py outside of nilearn directory.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
30,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 13:38:46,"> I would rather that you use the mechanism used below in ""get_version"", that doesn't rely on importing nilearn

+1. I reckon with your changes `python setup.py install` won't work if nibabel is not installed. This is because you are importing nilearn (and hence executing `nilearn/__init__.py`) which requires nibabel before giving a chance to setup to actually install nibabel. If I am not clear enough, there is a better explanation [there](https://github.com/audreyr/cookiecutter-pypackage/issues/1). This is where the exec trick is coming from by the way.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
31,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-09 13:51:13,"... but making it mandatory is defenitely a good idea. Aprat from the .nii.gz format, a lot of datasets use this format.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
32,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-09 13:52:56,"BTW, instead of appending `__curdir__` everywhere, wouldn't it be easier to chdir at the beginning of the script?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
33,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 13:56:17,"Could you use a collections.OrderedDict? The main reason is to ensure that dependencies order makes sense as was previously the case: numpy, scipy, sklearn, nibabel.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
34,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 13:57:46,"Out of interest, what do you gain by being able to execute setup.py outside of the directory where it lives?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
7,issue_comment,345,nilearn,nilearn,bcipolli,2015-01-09 13:59:22,"Thanks for all the comments and suggestions!  I'll go through these now and push up an update to the PR this morning.
",nan,nan
35,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 14:01:46,"@AlexandreAbraham Thanks for the comment!  As far as I understood, the `import gzip` was in a `try...catch` block, but the `catch` re-raises the error.  The code is run within `nilearn/__init__.py`, so every time you import the package.  

So I read it as a hard dependency.  Am I reading the old code incorrectly?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
36,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 14:03:21,"I'm not sure at all, beyond testing--I'm not so familiar with `setup.py`.  Semantically, for me, this is simply cleaner and safer--those files are in a specific location, not relative to the current working directory.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
37,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 14:04:47,"I will do that.  I didn't do that because I thought `_check_module_dependencies` would suggest it is private to that module, not shared across files.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
38,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 14:08:15,"@GaelVaroquaux done.  @lesteve good point.  Using `collections.OrderedDict` will create a dependency on Python 2.7 (2.6 won't work).  Is that OK?  Alternately, I could go back to a list of tuples...
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
39,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 14:15:52,"> So I read it as a hard dependency. Am I reading the old code incorrectly?

gzip is a hard-dependency indeed. To be honest I reckon that having a python without gzip is not likely at all (one way I know of is to compile python yourself with the right flag). The point of the try/catch was also to have a nicer error message. 
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
40,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 14:37:43,"Good point about OrderedDict and 2.6, then a list of module_name, metadata tuples would do just fine. I believe you are only iterating over the collection anyway.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
41,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 15:08:39,"OK.  As mentioned above, with a bit more work I could include installation info (usable for error messages) in the metadata above.  I've done this now, will push the changes shortly.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
42,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 15:10:20,"I moved this back to a tuple of tuples (well, it was a list of tuples before, but it should be immutable, so made it a list of lists.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
43,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 15:10:33,"@GaelVaroquaux I did my best to avoid the `import nilearn` and figure out how to call functions, will push the changes I made shortly.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
8,issue_comment,345,nilearn,nilearn,bcipolli,2015-01-09 15:23:13,"Pushed changes.  Tested with both `nibabel` and `sklearn` uninstalled; both return errors (and with more informative info):
![image](https://cloud.githubusercontent.com/assets/4072455/5681784/4d2f628c-97d0-11e4-8b04-7caf4ac54538.png)
",nan,nan
44,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 15:56:44,"I believe you can use `_VERSION_GLOBALS['_check_module_dependencies'](manual_install_only=True)` here
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
45,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 15:58:57,"You need > 2 here. When using `python setup.py install`, sys.argv[0] is setup.py and sys.argv[1] is install.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
46,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 16:03:45,"`os.path.dirname(os.path.abspath(__file__))` is the way to circumvent this issue I know of.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
47,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 16:12:51,"Please don't remove `__version__`. It is very handy to figure out which version of the package you are running for example, via:

``` python
import nilearn
print nilearn.__version__
```
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(4, '', u'nilearn/__init__.py')"
48,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 16:15:08,"typo in the second occurence of installed: intalled -> in**s**talled
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
49,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 16:19:22,"not a big fan of the `manual_install` naming but I have to admit I haven't found a great alternative yet ...
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
50,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 16:28:22,"I would point to the installation instructions on the website: http://nilearn.github.io/introduction.html#installation
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
51,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 17:19:07,":+1: 
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
52,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 17:20:09,"I believe '>1' is right, or '>=2'.  The second arg must be present, and I think those two checks check that. I also tested this, and believe this is right.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
53,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 17:21:16,":+1: 
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
54,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 17:21:42,"Right... I was thinking all wrong here.  Thanks!
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(4, '', u'nilearn/__init__.py')"
55,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-09 17:26:02,"Same here, and also stuck...
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
9,issue_comment,345,nilearn,nilearn,bcipolli,2015-01-09 17:28:25,"@lesteve made requested changes.  Re: testing--I worded that poorly.  I checked that without `nibabel` and `sklearn`, an error re: `sklearn` is thrown (i.e. showing that `nilearn` isn't imported within setup).

I verified that `nibabel` is installed if the other ""manual"" packages exist and it does not.  
",nan,nan
56,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 18:23:54,"Yep you are completely right, I spoke too fast on this one ...
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
57,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-09 18:26:34,"Took me a while to remember why we used exec rather than execfile and the reason is execfile doesn't exist in Python 3.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
10,issue_comment,345,nilearn,nilearn,bcipolli,2015-01-12 14:26:16,"Rolled back from `execfile` to `exec`; I think all of the issues brought up have been addressed.
",nan,nan
58,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-12 15:38:07,"I am guessing this four lines can now be removed now that you do the chdir above?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
59,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-12 15:40:53,"You can probably remove the comment
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
60,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-12 15:41:45,"Just to be clear, I don't think the sys.path.insert is needed since we don't import nilearn.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
61,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-12 19:32:22,"> > -    return len(sys.argv) > 1 and sys.argv[1] == 'install'
> 
> You need > 2 here. When using python setup.py install, sys.argv[0] is setup.py
> and sys.argv[1] is install.

It should probably be 'install' in sys.arg[1:], as it is legit to do
'python setup.py build install'.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
62,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-12 21:57:33,"I am nitpicking again, but why not using the mechanism provided by setuptools?

``` python
from setuptools import setup
from setuptools.command.install import install


class CustomInstallCommand(install):
    """"""Customized setuptools install command - prints a friendly greeting.""""""
    def run(self):
        print ""Hello, developer, how are you? :)""
        install.run(self)
```
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
63,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-12 22:02:57,"Not setuptools. Never setuptools. Setuptools is not the official way of
installing Python packages and should never be imported by default a
setup.py: it monky-patches distutils and thus changes the way Python
packages are installed (and not in a good way).

Maybe, these things can be done using pure distutils, in which case we
should probably use them.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
64,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-12 22:14:43,"The exact same mechanism exists in distutils:

``` python
import os, sys
from distutils.core import setup
from distutils.command.install import install as _install


class install(_install):
    def run(self):
        print 'pre-install stuff'
        _install.run(self)

setup(
    ...
    cmdclass={'install': install},
)
```

Note that setuptools is actually used in nilearn, this is why I suggested the previous one.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
65,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-12 22:21:46,"> The exact same mechanism exists in distutils:

Great!

> Note that setuptools is actually used in nilearn, this is why I suggested the
> previous one.

Shit. I missed that. AFAICT it was added by @lesteve in decembre.

This is really a no-no. Using setuptools makes installs be eggs, which
circumvent the normal Python import mechanisms and has many detrimental
consequences [*]. We should not be using setuptools. Besides, this adds a
dependency (setuptools is not in the standard library).

[*] One of them, amongst others:
http://gael-varoquaux.info/programming/long-syspath-and-consequences-one-more-reason-not-to-use-easy_install.html
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
66,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-12 22:53:19,"setuptools is recommended by the [Python Packaging User Guide](https://packaging.python.org/en/latest/current.html) over distutils.

It was used before I changed setup.py for example back in [2012](https://github.com/nilearn/nilearn/blob/2d2c50159164159482f5047b36a3f6f4e31a3aa2/setup.py)

For completeness it is also listed in the dependencies in README.rst.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
67,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-12 23:03:34,"Note that it doesn't matter in the end:

```
Even for projects that do choose to use distutils, when pip
installs such projects directly from source (rather than installing
from a prebuilt wheel file), it will actually build your project using
setuptools instead.
```
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
68,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-13 06:01:29,"> setuptools is recommended by the Python Packaging User Guide over distutils.

Yes. This has been a long running argument. It brings certain good
things, and has benefits.

As long as it is not in the standard library, I am against using it. The
reason it has never made in the standard library, although it has strong
proponents, is that it has never met the quality standards corresponding
to the standard library. Unlike pip, which is now in the standard library
for Python 3.5. It is improving, though, and I am hopeful that something
good will come out of it. However, in the mean time, I think that we can
stick to distutils.

> It was used before I changed setup.py for example back in 2012

OK. I am not sure how I missed that :$.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
69,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-13 15:15:48,"I think the choice of using distutils vs setuptools can be made separately from this PR which is almost there in terms of fulfilling its original promise.

A few comments:
- I seem to remember distutils doesn't have find_packages, which makes it a pain because you have to list all the subpackages by hand and it is quite easy to forget to add a subpackage in setup.py next time each time we add a subpackage.
- ensurepip which bootstraps pip in python 2.7.9 and 3.4 installs both pip and setuptools so the latter must have been deemed of reasonable quality
- Full disclosure: setuptools was used in nilearn in 2012 but only for a selection of commands that requires setuptools and 'install' is not one of them
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
70,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-13 17:37:05,"> I think the choice of using distutils vs setuptools can be made
> separately from this PR which is almost there in terms of fulfilling
> its original promise.

Yes! Agreed.

>   • I seem to remember distutils doesn't have find_packages, which makes it a
>     pain because you have to list all the subpackages by hand and it is quite
>     easy to forget to add a subpackage in setup.py next time each time we add a
>     subpackage.

That's a benefit benefit indeed. Setuptools do bring benefits.

>   • Full disclosure: setuptools was used in nilearn in 2012 but only for a
>     selection of commands that requires setuptools and 'install' is not one of
>     them

OK. Yes, this makes sens. That's the way it should be. In now way the
install mechanism of setuptools should be used. Setuptools should be used
for operations that cannot be done with distutils.

I'd really like to stress that while there are benefits, setuptools has
historically been very controversial, because it made choices that had
wide reaching impacts on the import mechanisms and the installation of
packages. There is a reason for which after 10 years it is not in the
standard library.

Installation is something that we really want robust and reliable. We do
not want to be making it brittle.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
71,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 12:47:02,"I reckon you and I are the only ones who touched nilearn/version.py so I assume the comment should reflect that.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
72,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:00:54,"I would just use `install_requires` for the variable name and remove the comment that doesn't bring too much additional information.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
73,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:12:26,"I think you can remove len(sys.argv) > 1 now. The comment could be removed too although I don't feel too strongly about it.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
74,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-14 13:14:36,"> The comment could be removed too although I don't feel too strongly
> about it.

I think that we should keep it, to avoid forgetting such case (as we
cannot easily have a test).
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
75,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:14:38,"I am a bit confused, don't you need the os.chdir to be at module-scope level because of the `open('README.rst)`? I seem to remember that was the case at one point, but maybe I just dreamt about the whole thing.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
76,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:23:58,"I would do minver -> min_version everywhere
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
77,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-14 13:24:42,"> I would do minver -> min_version everywhere

+1. We prefer underscore-separated words in variable names.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
78,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:26:14,"This comment should be moved just before the definition of REQUIRED_MODULE_METADATA
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
79,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:40:34,"OK here is the best candidate I could find: required_at_installation_time. Not so great so better suggestions more than welcome!

I would use installation_time=False for this parameter and I would replace manual_install by required_at_installation_time in the required modules metadata.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
80,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:42:39,"Maybe at_installation_time or during_installation is slightly better to make it more obvious that it is a boolean rather than a float. 
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
81,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-14 13:43:42,"> OK here is the best candidate I could find: required_at_installation_time. Not
> so great so better suggestions more than welcome!

required_at_installation would also work, IMHO.

> I would use installation_time=False for this parameter and I would replace
> manual_install by required_at_installation_time in the required modules
> metadata.

Same overall feeling here.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
82,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-14 13:44:42,"> Maybe at_installation_time or during_installation is slightly better to
> make it more obvious that it is a boolean rather than a float.

In LaTeX coding standards, booleans are often 'is_installation_time'
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
83,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:50:00,"Rather than a continue I would negate the predicate and put it in front of the `_import_module_with_version_check(...)`
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
84,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:53:20,"I would reinstate the original error message:
'Python has been compiled without gzip support, reading nii.gz files will be impossible.'
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
85,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 13:56:58,"This docstring is not accurate any more. Something like ""Executes nilearn/version.py in a globals dictionary and return it'
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'setup.py')"
86,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 14:02:03,"OK then my current preference: `required_at_installation` for the required module metatdata key and `is_nilearn_installing` for the `_check_module_dependencies` parameter name. Could be easily swayed by better alternatives though!
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
87,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-14 14:03:33,"> OK then my current preference: required_at_installation for the
> required module metatdata key and is_nilearn_installing for the
> _check_module_dependencies parameter name. Could be easily swayed by
> better alternatives though!

Good with me...
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
88,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 14:35:09,"It's not a list but a tuple (to be honest a list would be fine too, mutable vs immutable is not so crucial here). 

I would also make it more explicit that we care about order because we want to check required dependencies in a meaningful order (from most core/common packages to less core/common ones roughly). In this regards gzip should probably be first in the list.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
89,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-14 14:36:42,"I reckon this part of the comment should go, _check_module_dependencies is documented well enough and how REQUIRED_MODULE_METADATA is used is quite straightforwardvariable naming make the rest reasonably.

As a side-comment  that's what I am a bit biased about comments with too small added value, they tend to rot very quickly, only five commits and already a few inaccuracies have crept in:
- manual should have been replaced by manual_install
- check_module_dependencies should have been _check_module_dependencies (missing leading underscore)
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
90,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-15 07:46:08,"This is called `snake_case` as opposed to `CamelCase`.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
91,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-15 07:48:15,"It is not the only problem: most (if not all) of the datasets won't be fetchable.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
92,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 08:19:49,"Just as a reminder, not having gzip support will result in an exception not a warning. You won't be able to fetch any datasets because you won't be able to import nilearn. Feel free to suggest a better error message!
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
93,pull_request_commit_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-15 08:28:00,"> This is called snake_case as opposed to CamelCase.

Nice, I like it (said in a Borat way)!
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
94,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-15 15:08:20,"If `nilearn` will work for `.nii` files, then seems non-fatal to lack `gzip`.  Perhaps just having a warning inside `_check_module_dependencies`, and (re-)wrapping any `gzip` imports / manipulations in a non-fatal `try..catch` block would be best?

Something like :

``` python
warnings.warn(""This version of Python does not contain gzip support; ""
              ""fetching datasets / reading nii.gz files ""
              ""will raise exceptions."")
```

Or, in this case, perhaps we just wrap the one true `gzip` import (that I can find), and explain the error there:
https://github.com/nilearn/nilearn/blob/master/nilearn/datasets.py#L267
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
95,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 15:22:57,"1) It's such a edge case that will never ever happen in practice 2) I'd rather consider a python without gzip broken and raise an exception early that letting the user use a restricted set of nilearn features
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
96,pull_request_commit_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-15 15:32:17,":+1:, even in Gentoo, there is no flag to remove it.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
97,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-15 15:34:35,"OK, then how about we just remove the (global) gzip check?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
98,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 15:47:57,"I would be fine to remove the try catch around import gzip TBH.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
11,issue_comment,345,nilearn,nilearn,bcipolli,2015-01-15 19:06:22,"@lesteve @GaelVaroquaux I removed the gzip checks, made the comment / variable name tweaks requested, and pushed the `chdir` in `setup.py` back to the file level.
",nan,nan
99,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 20:51:46,"I guess this code was there just for gzip so we can remove it and go back to:

``` python
module_version = module.__version__
```

I am not sure whether there is any guarantee but I have never met a widely used python package that didn't have a `__version__` attribute.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(52, '', u'nilearn/version.py')"
100,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-15 20:53:20,"Actually, I ran into one today: `uptime`.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(52, '', u'nilearn/version.py')"
101,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 21:11:23,"I guess I wouldn't qualify it as ""widely used"" though
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(52, '', u'nilearn/version.py')"
102,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-15 21:14:42,"I agree.  I think it just takes one--if we remove this code and add a dependency with no `__version__`, there's no way forward and no good error.  I suggest either keeping this in, or throwing a meaningful error (with text about alternative options of what to do).
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(52, '', u'nilearn/version.py')"
103,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 21:20:10,"I find the ""each time"" wording a bit misleading I would use ""when"" (The way the import mechanism works in python if you do import nilearn twice the code in `nilearn/__init__.py` is actually executed only once). TBH that's another case of small added value comment if you ask me: we are in `nilearn/__init__.py` so it's quite clear this code is executed when nilearn is imported and the function has a self-explanatory name.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
104,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 21:24:32,"I am not sure what you mean by that, care to elaborate?
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
105,pull_request_commit_comment,345,nilearn,nilearn,lesteve,2015-01-15 21:39:45,"I don't feel too strongly about it so feel free to leave the code as it is. I would argue that adding a dependency would only be done by a developer not a user and the error you get is developer-friendly enough.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(52, '', u'nilearn/version.py')"
106,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-15 23:42:31,"OK.  The behavior of `_check_module_dependencies` was unclear to me (whether it warns or throws), but I like the idea of having really clear goals with comments (vs. good naming of functions).  Removed.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/__init__.py')"
107,pull_request_commit_comment,345,nilearn,nilearn,bcipolli,2015-01-15 23:46:32,"I think this docstring sucks; the format is non-standard and it's pretty unclear.  I'll push a better one now.
",6e6b559a38eb1cf8596471a8ea6bd8ff11c0df06,"(None, '', u'nilearn/version.py')"
6,issue_comment,345,nilearn,nilearn,AlexandreAbraham,2015-01-16 14:05:27,"Yeah, great work!
",nan,nan
5,issue_comment,345,nilearn,nilearn,GaelVaroquaux,2015-01-16 14:06:30,"Thanks Heaps!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
5,pull_request_commit_comment,344,nilearn,nilearn,GaelVaroquaux,2015-01-09 06:57:29,"I wonder if we should not be more precise, and use explicitly ""_.nii"" and ""_.nii.gz""
",669dda3ea04d1ef9037ac7a840829a0bcb1de6ca,"(None, '', u'examples/.gitignore')"
6,pull_request_commit_comment,344,nilearn,nilearn,bcipolli,2015-01-09 07:13:28,"Sure, happy to do it.  Will push a change shortly.
",669dda3ea04d1ef9037ac7a840829a0bcb1de6ca,"(None, '', u'examples/.gitignore')"
 , , , , , , , , , 
 , , , , , , , , , 
7,issue_comment,346,nilearn,nilearn,banilo,2015-01-09 10:17:37,"Cool!
",nan,nan
3,issue_comment,346,nilearn,nilearn,eickenberg,2015-01-09 10:18:06,"I confirm -- 1024 works, 1025 segfaults. Thanks for isolating!
",nan,nan
4,issue_comment,346,nilearn,nilearn,eickenberg,2015-01-09 10:20:09,"`np.log2(64 * 64 * 64 * 1024) == 28`
",nan,nan
5,issue_comment,346,nilearn,nilearn,eickenberg,2015-01-09 10:28:54,"With `shape_in == (32, 64, 64)`, @lesteve and I both find segfault at 2115, works at 2114
",nan,nan
6,issue_comment,346,nilearn,nilearn,eickenberg,2015-01-09 10:43:57,"With `shape_in == (64, 32, 64)` it segfaults at 2050 ...
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,347,nilearn,nilearn,GaelVaroquaux,2015-01-11 09:51:15,"> Was it broken or completely unavailable upstream already?

I believe that's the case: it's an upstream problem.
",nan,nan
4,issue_comment,347,nilearn,nilearn,AlexandreAbraham,2015-01-11 14:01:09,"I confirm.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
6,issue_comment,340,nilearn,nilearn,AlexandreAbraham,2015-01-15 09:55:49,"This is not as easy as it seems. In fact, it brings inconsistencies to the masker as the affine is defined in the transform rather than the fit. For example:

``` python
masker = NiftiLabelsMasker(labels_img, resample_target='data')
masker.fit()

# First dataset, target_affine is set to affine_data_1
data1 = masker.transform(dataset1)

# Second dataset, target_affine is set to affine_data_2
data2 = masker.transform(dataset2)

# Inverse transform, my data has been resampled into dataset2 space
masker.inverse_transform(data1)
```

We could say that the affine is defined on the first transform, but I find this misleading. We could also say that the `target_affine` is defined by the data given in the `fit` but it would conflict with mask computation and also be misleading compared to the behavior of the classical NiftiMasker.

I would be more in favor of accepting niimgs in the `resample_target` parameter.
",nan,nan
7,issue_comment,340,nilearn,nilearn,AlexandreAbraham,2015-01-15 10:25:35,"> If new data comes along (as in a new call to transform), the atlas would be resampled from the original atlas image if it is not on the right affine.

The problem is not the `transform` step, it is the `inverse_transform`. If resampling is done on heterogenous data, how do we chose the affine when `inverse_transforming`? For me, it is better to explicitely give an affine (or a niimg which has the desired affine).

> I realize that this makes parallel computing in the transform nasty.

I think we can consider resampling the atlas as costless. Given that masking is usually done once and cached, it doesn't bother me if there is a small overhead per process.
",nan,nan
3,issue_comment,340,nilearn,nilearn,GaelVaroquaux,2015-01-15 10:30:38,"> The problem is not the transform step, it is the inverse_transform. If
> resampling is done on heterogenous data, how do we chose the affine when
> inverse_transforming?

Good point indeed. We can specify that the inverse transform always
return the data in the space of the atlas unless an explicit affine is
passed. These are consitent semantics (in the sens that they offer little
surprises). They may lead to memory explosions, but note that
inverse_transform will be used by much less people than transform (it is
a less common case). Also, the memory explosion is more obvious because
it occurs via the size of the output created by the function. In the
current case, it is harder to guess, as it occurs in an intermediate
variable.
",nan,nan
8,issue_comment,340,nilearn,nilearn,AlexandreAbraham,2015-01-15 10:42:01,"OK, I see your point now. In my head, I thought that what you are describing was the default behavior of NiftiLabelsMasker. I think that it should actually be the default behavior and not requiring a `resample_data='data'` (which, semantically, has also no sense :P). I suggest that we talk about that during a coffee break otherwise it will take ages to reach a conclusion ;).
",nan,nan
4,issue_comment,340,nilearn,nilearn,GaelVaroquaux,2015-01-15 10:42:54,"> I suggest that we talk about that during a coffee break otherwise it
> will take ages to reach a conclusion ;).

OK. I am at neurospin tomorrow.
",nan,nan
9,issue_comment,340,nilearn,nilearn,AlexandreAbraham,2015-01-29 09:31:38,"While I'm on nilearn issues list, let's take a decision on this one: I agree with you that we should have a `resample_target='data'` and that this should be the default behavior.

PR welcome! It shouldn't be too long.
",nan,nan
5,issue_comment,340,nilearn,nilearn,GaelVaroquaux,2015-02-05 16:08:14,"Fixed!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,366,nilearn,nilearn,GaelVaroquaux,2015-01-22 18:26:09,">   • It is possible to completely turn off output.

Agreed.

>   • A number of dataset download functions print, even at verbosity=0

This is wrong and should not be like this, indeed (but for long-running
function, default should be to print some sane progress, and thus default
should not be verbose=0).

>   • Define a schema for what verbosity means (0=silent, 1=errors,
>   2=warnings, 3 =standard user output, 4=debug info, etc.), and use it

Well, this is the standard logging behavior in Python, but this is not
what we want, as we want also an indication of progress. verbosity=1
should display a bit of progress, verbosity=2 more,... This is important
when running a lot of computation/long run jobs. Also, we use a pattern
of decreasing verbosity when combining methods one into the other. That
way the progress of each nested for loop can always be seen.

Also, warnings and errors should always be displayed unless they are
absolutely harmless. We need user to see these.

> I would prefer the second solution; I think anyone wanting to actually
> manipulate the logging would either know the logging module,

This is not the way I see it. Only geeks know the logger module. Beside,
it does not implement well the pattern of decreasing verbosity, which is
really useful.
",nan,nan
8,issue_comment,366,nilearn,nilearn,bcipolli,2015-01-24 14:05:59,"OK, so the change I propose is:
- Make any `print` that isn't currently within an `if verbosity > ...` statement check for `verbosity > 0`
- Increment all other verbosity checks by one.

That seems like the simplest change.  Glad to hear if something more complex is desired.

Need to address this issue, to complete the `Python 3.x` support.
",nan,nan
4,issue_comment,366,nilearn,nilearn,GaelVaroquaux,2015-01-24 15:04:29,">   • Make any print that isn't currently within an if verbosity > ... statement
>     check for verbosity > 0

Definitely.

>   • Increment all other verbosity checks by one.

For those that are not right. But when you do this, check that the
default verbosity is still meaningful, ie that long-running operations
still print a bit of progress by default.
",nan,nan
9,issue_comment,366,nilearn,nilearn,lesteve,2015-01-24 18:30:17,"> Need to address this issue, to complete the Python 3.x support.

Just curious, how is Python 3 support related to verbosity?
",nan,nan
5,issue_comment,366,nilearn,nilearn,GaelVaroquaux,2015-01-24 18:32:35,"> Just curious, how is Python 3 support related to verbosity?

My guess: print statements :)
",nan,nan
10,issue_comment,366,nilearn,nilearn,lesteve,2015-01-24 18:39:19,"> > > Need to address this issue, to complete the Python 3.x support.
> > 
> > Just curious, how is Python 3 support related to verbosity?
> 
> My guess: print statements :)

Sure but what I don't understand is why Python 3 support would be dependent on this issue.
",nan,nan
6,issue_comment,366,nilearn,nilearn,GaelVaroquaux,2015-01-24 18:43:59,"> ```
> My guess: print statements :)
> ```
> 
> Sure but what I don't understand is why Python 3 support would be dependent on
> this issue.

Granted. It just requires touching the same lines, and thus would raise
conflicts in version control if dealt with in parallel.
",nan,nan
11,issue_comment,366,nilearn,nilearn,bcipolli,2015-01-24 21:17:17,"Debugging test failures with all the print statements is laborious.
",nan,nan
12,issue_comment,366,nilearn,nilearn,lesteve,2015-01-26 08:22:54,"> Debugging test failures with all the print statements is laborious.

Removing the `-s` flag from the nosetests command should revert to the default nosetests behaviour which is to capture stdout, maybe it does help a bit.
",nan,nan
7,issue_comment,366,nilearn,nilearn,GaelVaroquaux,2015-01-26 08:43:10,"> Removing the -s flag from the nosetests command should revert to the default
> nosetests behaviour which is to capture stdout, maybe it does help a bit.

We do not want to be using this by default in the continuous integration,
as it does swallow useful info.

The right path indeed is to clean up verbosity. This is definitely
useful.
",nan,nan
13,issue_comment,366,nilearn,nilearn,lesteve,2015-01-26 08:47:38,"> We do not want to be using this by default in the continuous integration, as it does swallow useful info.

That was more a tip for running tests locally.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,365,nilearn,nilearn,GaelVaroquaux,2015-01-22 15:03:08,"I agree with you. However, for most of our default colormaps this is
already the case, so I am not sure what we can do more.
",nan,nan
5,issue_comment,365,nilearn,nilearn,banilo,2015-01-22 15:09:04,"For example, one or two more ""transparent"" flavors could be added. Currently, I only find:

```
nilearn_cm.blue_transparent
nilearn_cm.green_transparent
nilearn_cm.red_transparent
```
",nan,nan
4,issue_comment,365,nilearn,nilearn,GaelVaroquaux,2015-01-22 15:17:34,"> For example, one or two more ""transparent"" flavors could be added.
> Currently, I only find:

You want also the cmy flavor corresponding to the rgb ones? Fine with me,
it's just a PR away :).
",nan,nan
6,issue_comment,365,nilearn,nilearn,banilo,2015-01-22 15:33:47,"It's kinda surprising, but almost 10% of men are red-green blind and 0,5% of women. So, 1 out of 20 plot viewers/paper readers will not be able to tell red and green aspects apart. In fact, this twentieth person might be one of your reviewers ;-)
",nan,nan
7,issue_comment,365,nilearn,nilearn,lesteve,2015-01-22 15:33:48,"If you really want to do that, just go there https://github.com/nilearn/nilearn/blob/master/nilearn/plotting/cm.py#L170 and add your favourite color.

Something I would say: transparent color map rendering is not great and that's the reason we dropped them from the glass brain if you remember.
",nan,nan
8,issue_comment,365,nilearn,nilearn,AlexandreAbraham,2015-01-22 15:35:16,"CMY is for printing, I don't see the relation with color blindness (yellow especially is bad for a colormap).

In order to show several things in the same plot, I made some code to take _n_ colors from any colormap and create a ""transparent to color"" colormap. Typically, if you apply that to 3 fuzzy brain maps with the spectral colormap, it will take the first, the last and the middle color of spectral, build 3 colormaps different from them, and overlay the 3 brain maps on one figure.

I know that it won't solve the color blindness problem, but if you think that (part of) this code can be useful here, it is just 2 clicks away ;).
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
6,issue_comment,362,nilearn,nilearn,lesteve,2015-01-22 08:02:48,"I have been annoyed on occasions by this too and I thought the same, i.e. ""why is it not more like nilearn_data?"".

The Memory object is coming from joblib (shipped with scikit-learn) so I am not sure we want to change Memory directly. We could use a nilearn-specific thin wrapper around it that has the logic you mention. I would probably add a bullet point to your list in 3rd position: ~/nilearn_cache or something like this if there is no explicit argument and NILEARN_CACHE is not defined.
",nan,nan
7,issue_comment,362,nilearn,nilearn,bcipolli,2015-01-22 08:10:49,":+1: for the thin wrapper!

I didn't add that third bullet, because if we did that it would change the default behavior (which is not to cache results).  It would be easy to do either way.

So what I'm thinking is to have a thin wrapper around `joblib.Memory`, and all `nilearn` functions that receive `joblib.Memory` objects will simply default to the `nilearn` default (say, `nilearn._utils.cache_mixin.Memory`, or `nilearn._utils.cache_mixin.DefaultMemory`, rather than `Memory(cachedir=None)`

At this point, I also think the `nilearn._utils.cache_mixin` module is a bit overloaded; it's already used not just for the Mixin, but caching functions.  I would suggest to rename it simply to `nilearn._utils.cache` or `nilearn._utils.caching` when this change is made.
",nan,nan
8,issue_comment,362,nilearn,nilearn,lesteve,2015-01-22 08:24:21,"Sounds good to me but I would wait for @GaelVaroquaux and @AlexandreAbraham inputs before spending too much time on this. The cache location has been like this for quite a while, so maybe they have use cases where the default cache location wouldn't be practical.
",nan,nan
9,issue_comment,362,nilearn,nilearn,AlexandreAbraham,2015-01-22 08:52:24,"> Cache files are distributed in multiple locations and therefore hard to clear.

I think that this highly depends on your usage of nilearn. The most useful caching feature, I think, is in the masker (because masking can be long). If you put all cache into one single folder, it will be simply impossible to clear. If you mask 10 datasets, you won't be able to clear the data for one dataset only.

> - Searching the source tree becomes slow (as some search programs search all files for text)
> - If the cache location isn't already in the .gitignore, then git workflow can become messy (for example, using git gui).

Those are developers' concern, not really users'.

I am not fundamentally against having a `NILEARN_CACHE` directory. However, we need to find a solution to compartmentalize cache from different scripts. Otherwise I know what will happen: people will use this system, the folder will grow until it fills the hard drive, and then people will have to delete the whole thing and will lose everything.

> ~/nilearn_cache or something like this if there is no explicit argument and NILEARN_CACHE is not defined

What if I don't want to cache?
",nan,nan
3,issue_comment,362,nilearn,nilearn,GaelVaroquaux,2015-01-22 09:33:56,"I agree with Alex's comments: its easier for the end user if the caches
are separated, because it makes it clear what cache belong to what
processing.

Ideally, in the long run, I had in mind to have the cache and the reports
next one to another. That way the user really understand that they go one
with the other, ie that the cache are intermediate files to create the
report. In the case of multiple runs of the same processing pipeline, we
could have the same cache and sub-reports. This is a bit the way FSL
organizes the storage on disk.
",nan,nan
10,issue_comment,362,nilearn,nilearn,bcipolli,2015-01-22 10:02:59,"@AlexandreAbraham, @GaelVaroquaux that makes sense.  This doesn't affect the ability to set the cache exactly as you do already.  What this enables is caching when you haven't explicitly set the cache--perhaps during script development and also nilearn testing--things that you would gladly have cached, and delete later.

None of the existing behavior changes (nothing is cached by default, and you can specify whatever Memory location you want); it just allows another capability (to cache by default to a common location, if you add an environment variable) that I am finding useful for myself.
",nan,nan
4,issue_comment,362,nilearn,nilearn,GaelVaroquaux,2015-01-22 17:07:08,"> None of the existing behavior changes (nothing is cached by default,
> and you can specify whatever Memory location you want); it just allows
> another capability (to cache by default to a common location, if you
> add an environment variable) that I am finding useful for myself.

I wonder if it's not something that we should worry about later.

Right now, my priority is to be able to teach a course on decoding and
functional connectivity to cognitive neuroscientist and that it flows
without any problem. Once we have this, we can iterate on providing more
value to user, including advanced user.

This is a general strategy for me: first grow the user base by getting
the API right and solving the easy problems. Then try to turn some of
these users in developers. Then start including more advanced features.
",nan,nan
11,issue_comment,362,nilearn,nilearn,bcipolli,2015-01-22 17:22:16,"@GaelVaroquaux Understood.  For me, I do small, inessential features like this (but also sometimes more core ones, like Python 2.6 support) as I learn a software package.  I figured this out and implemented it locally as part of understanding what the cache is (and working with it as best I could).

So, it's implemented on my machine, it's just a question of whether y'all also find it useful and want to include it in the codebase. :)  Either way is fine by me!
",nan,nan
5,issue_comment,362,nilearn,nilearn,GaelVaroquaux,2015-01-22 18:39:59,"> I do small, inessential features like this (but also sometimes more
> core ones, like Python 2.6 support) as I learn a software package.

Absolutely. It's a great way of doing it. However we have to be careful
not to put all our pet peaves in nilearn.
",nan,nan
12,issue_comment,362,nilearn,nilearn,bcipolli,2015-01-24 13:51:05,"Let me know if this is something to move forward with.  Otherwise, I suggest we close it as wontfix.

For me, this is a nice alternative to explicitly hard-coding behavior across the app (`Memory(cachedir=none)`), where we can control that behavior with a single change in the future.  The file name change from `cache_mixin.py` to `cache.py` also seems like an improvement.  And the code is done.

Either way is fine by me, just wanting to get some clarity.  Thanks!
",nan,nan
13,issue_comment,362,nilearn,nilearn,lesteve,2015-01-26 09:53:00,"It looks like there is no strong agreement on this one, so closing this a won't fix for now.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,311,nilearn,nilearn,lesteve,2014-12-12 12:32:00,"`--pre` option was new in pip 1.4. Excerpt from [there](https://pip.pypa.io/en/latest/news.html):

> 1.4 (2013-07-23)
> 
>    BACKWARD INCOMPATIBLE pip now only installs stable versions by default, and offers a new --pre option to also find pre-release and development versions. (Pull #834)

 I'll update the install instructions to differentiate between the two cases.
",nan,nan
4,issue_comment,311,nilearn,nilearn,GaelVaroquaux,2014-12-12 12:35:12,"> I'll update the install instructions to differentiate between the two cases.

That's kinda nasty, because it makes those instructions more lengthy,
which is what we are trying to avoid. It does tell us that we need to
release a 0.1 soon. Let's say as a Christmas present?
",nan,nan
5,issue_comment,311,nilearn,nilearn,lesteve,2014-12-17 10:34:31,"FWIW the warnings about missing `__init__.py` during install should have been fixed in 5a309af2b9f07550c8d07d542453839f3a285f4b. 
",nan,nan
6,issue_comment,311,nilearn,nilearn,AlexandreAbraham,2015-01-06 21:34:12,"Should we release it soon?
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,361,nilearn,nilearn,salma1601,2015-01-23 23:56:23,"**What do you use in nilearn?**
I used NiftiMapsMasker and datasets.
**What problems did you encounter? Did you find a workaround by yourself?**
From my naive point of view as a beginner in programming, I am frustrated with joblib. I rerun the Masker with different parameters without specifying different memory locations and I end up with a huge memory size of a series of files I never exploited because I don't know to which subject/set of parameters they correspond. Plus I had to move the root folder containing joblib and I had the impression that the cached files were no longer recognized.
A different minor point is that I wanted to explore non standardized signals within my ROIs but the function signal.clean forces normalization of the input signals. I'm rather used to scaling the signal to its average across timepoints (PSC units). 
**What do you want to see in nilearn in the future**
I would like to have a hrf so that to deal with connectivity during task.
**Comments on nilearn in general (what you like / don't like...)**
I like in nilearn the excellent code quality: one can go into it and understand quickly what it does. But I feel like in the user guide and the given examples the stress is put on the model but not on the neuro point of view. For instance I expect regions or at least networks to be explicit on a connectivity matrix plot for real data.
",nan,nan
4,issue_comment,361,nilearn,nilearn,bthirion,2015-01-26 21:47:56,"_What do you use in nilearn?_
 NiftiMasker (mostly), visualization; get back to the examples when running clustering, ICA etc.

_What problems did you encounter? Did you find a workaround by yourself?_
Most of them have been fixed in the course of time. 

_What do you want to see in nilearn in the future_
I'd like to see it become a complete suite for volume-based (as opposed to surface-based) data analysis: design matrix, GLM, group statistics.
Up-to-date dictionary learning.

_Comments on nilearn in general (what you like / don't like...)_
NA
",nan,nan
5,issue_comment,361,nilearn,nilearn,eickenberg,2015-01-27 13:13:27,"## What do you use in nilearn?
- `_utils.check_niimg`
- resampling / cropping functionality
- `NiftiMasker`
- `plotting._plot_img_with_bg` ;) (but other ones, too, of course)
- `datasets` fetchers!

## What problems?
- This is probably overfitting the Haxby2001 dataset usecase, but neither `NiftiMasker` nor `MultiNiftiMasker` are appropriate here, since `NiftiMasker` cannot set breakpoints for detrending and standardizing and `MultiNiftiMasker` needs different `niimgs` to do it. Potential solution: When slicing `niimgs` becomes possible, one could use the `MultiNiftiMasker` with slices
- `plotting.plot_img`, the ""general"" plotting function is not a functional superset of `plotting.plot_stat_map` (no background possible IIRC)
- `NiftiMasker.mask_strategy` is somehow always the wrong one for the data I want to treat ;)
- not a problem if handled correctly: nilearn should not overfit usecases or become an eclectic collection of not universally accepted tools. Right now everything is OK.

## Future?
- GLM, please! In a way that can read onset descriptor files but doesn't oblige me to use them. Minimum amount of classes involved (e.g. ideally 0 or 1, implementing a transformer type interface).
- Interactive plotting would to me be worth its number of lines in gold units. Every time I plot a stat map, I want to scroll around, but can't. This could be done with `pynax` in the slimmest possible way.

## Comments on nilearn in general

`sum` all comments of predecessors together. All in all I think nilearn can be said to be perceived as very reliable, with sane defaults, which is a lot of work and thought to create. So great work everybody!
",nan,nan
10,issue_comment,361,nilearn,nilearn,mrahim,2015-01-27 23:07:25,"## What do you use in nilearn?

Mainly image manipulation, masking, and plotting.

## What problems?

A cosmetic issue when plotting positive values only, by using `plot_stat_map` on which are displayed symmetric values. I use `plot_img` as an alternative at this time.

## Future?

GLM, of course !

## Comments on nilearn in general

A great added value to nilearn is the easy way to accomodate with the functionalities through the well written examples, even for non-advanced Python programmers. Focus should be kept on it.
",nan,nan
6,issue_comment,361,nilearn,nilearn,AlexandreAbraham,2015-02-10 10:19:51,"Thanks everybody for your participation! So, apparently, most of people are using nilearn for masking, which is a good thing considering the effort that we put in the maskers ;).

It's not the first time that I hear people complaining about the caching system. I will open an issue about that.

AFAIK, the GLM will not be added in a near future but it's on the roadmap.
",nan,nan
7,issue_comment,361,nilearn,nilearn,fabianp,2015-02-26 13:26:25,"I would be glad to participate with feedback and ideas on the GLM when time comes. From my experience the GLM in nipy would be a good starting point, but IMHO the API could be made simpler by  removing some of the classes in there.
",nan,nan
8,issue_comment,361,nilearn,nilearn,AlexandreAbraham,2015-02-26 13:49:10,"Cool. @GaelVaroquaux is interested by that too. Do you think that we should open a brainstorming wiki page?
",nan,nan
9,issue_comment,361,nilearn,nilearn,eickenberg,2015-02-26 14:04:19,"+1 -- the GLM in nipy is good, except that it has too many classes and
afaik it depends on statsmodels, which is unnecessary. Constructing a
better, intuitive architecture around it will be the main issue, and it may
not be so easy, so +1 for brainstorming

On Thu, Feb 26, 2015 at 2:49 PM, Alexandre Abraham <notifications@github.com

> wrote:
> 
> Cool. @GaelVaroquaux https://github.com/GaelVaroquaux is interested by
> that too. Do you think that we should open a brainstorming wiki page?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/issues/361#issuecomment-76180361.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
10,pull_request_commit_comment,307,nilearn,nilearn,eickenberg,2014-12-06 18:51:53,"Can you motivate this change?
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_multi_nifti_masker.py')"
11,pull_request_commit_comment,307,nilearn,nilearn,eickenberg,2014-12-06 18:54:16,"Is ""type"" here referring to wrong type of shape?
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/tests/test_masking.py')"
12,pull_request_commit_comment,307,nilearn,nilearn,banilo,2014-12-06 18:54:46,"The variable name appears to be misleading, it's passed on as 'mask_img' a few lines below.
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_multi_nifti_masker.py')"
13,pull_request_commit_comment,307,nilearn,nilearn,banilo,2014-12-06 18:56:17,"This lines is now caught by check_niiimg, causing a TypeError, rather than a ValueError because of the shape as before.
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/tests/test_masking.py')"
14,pull_request_commit_comment,307,nilearn,nilearn,bthirion,2014-12-07 17:10:59,"Yes, but why do you make it a 3D image ? 
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_multi_nifti_masker.py')"
5,issue_comment,307,nilearn,nilearn,bthirion,2014-12-07 17:11:15,"LGTM otherwise.
",nan,nan
15,pull_request_commit_comment,307,nilearn,nilearn,banilo,2014-12-11 14:51:43,"After discussion with Junior, masks for MultiNiftiMasker are always 3D. Thus, there appeared indeed to be a little bug in this test since a 4D images was passed on to the object as mask argument.
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_multi_nifti_masker.py')"
6,issue_comment,307,nilearn,nilearn,banilo,2014-12-18 15:30:54,"Voilà, changed asserts to regexp, now. ...and squashed commits.
",nan,nan
16,pull_request_commit_comment,307,nilearn,nilearn,lesteve,2014-12-19 09:19:47,"I am guessing the assert_raises import is not necessary any more
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_base_masker.py')"
17,pull_request_commit_comment,307,nilearn,nilearn,lesteve,2014-12-19 09:22:15,"Can you use assert_raises_regexp for this one?
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/tests/test_masking.py')"
7,issue_comment,307,nilearn,nilearn,lesteve,2014-12-19 09:22:56,"Other than the minor comments, looks good
",nan,nan
18,pull_request_commit_comment,307,nilearn,nilearn,banilo,2014-12-23 13:19:22,"assert_raises is still used in test_auto_mask(), which is not touched by this PR.
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_base_masker.py')"
8,issue_comment,307,nilearn,nilearn,banilo,2014-12-23 13:44:35,"last requests done.
",nan,nan
19,pull_request_commit_comment,307,nilearn,nilearn,lesteve,2015-01-05 09:52:02,"Unless I am missing something, assert_raises is not used in test_base_masker.py.
",46c8cac595072cd7384b5747b8a65a2411226615,"(None, '', u'nilearn/input_data/tests/test_base_masker.py')"
9,issue_comment,307,nilearn,nilearn,banilo,2015-01-06 14:45:06,"Any news on this PR?
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,363,nilearn,nilearn,lesteve,2015-01-22 08:06:15,"Reducing the warnings noise is a worthwhile goal. I am wondering how painful this would be to get rid of the numpy/scipy warnings across all the supported versions.
",nan,nan
5,issue_comment,363,nilearn,nilearn,AlexandreAbraham,2015-01-22 08:55:55,"I thing we should the pertinent ones. For example, `numpy boolean negative (the unary - operator) is deprecated`. Fixing all of them is a lost battle. Some of these warnings are normal and should be kept.

I think the one about the memory should be fixed. For example, if you run a NiftiMasker with default parameters, you will get a warning. This annoys me a lot.
",nan,nan
3,issue_comment,363,nilearn,nilearn,GaelVaroquaux,2015-01-22 15:42:15,"> I think the one about the memory should be fixed. For example, if you run a
> NiftiMasker with default parameters, you will get a warning. This annoys me a
> lot.

Agree. We should not raise a warning with default settings.
",nan,nan
7,issue_comment,363,nilearn,nilearn,bcipolli,2015-01-29 03:29:11,"Debugging Python 3.x errors and warnings is challenging, as they mix with these existing warnings.  After completing the output PR, I will work on resolving these next.

Note that some of the warnings are expected, and the tests simply need to be changed to catch and check the warnings (which seems like the right thing anyway!).
",nan,nan
6,issue_comment,363,nilearn,nilearn,AlexandreAbraham,2015-06-01 13:06:25,"Closing as partially fixed. Thanks @bcipolli for spotting warnings that were hiding errors.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,328,nilearn,nilearn,lesteve,2014-12-19 15:37:18,"Thanks for the kind words!

We could also have defined the dependencies in setup.py. The thing is that for example numpy needs to be compiled from source when using pip install. This compilation step is likely to fail (for example because you don't have the package with the required C headers on Linux, or even more likely on Windows where most of our users don't have any C compiler installed) 

Basically we are strongly encouraging users to install numpy, scipy and scikit-learn via their OS package managers on Linux or Anaconda on Windows and OSX.

@GaelVaroquaux @AlexandreAbraham any other opinions?
",nan,nan
4,issue_comment,328,nilearn,nilearn,GaelVaroquaux,2014-12-19 15:53:52,"> @GaelVaroquaux @AlexandreAbraham any other opinions?

Not much to add to what you said. That said, we should note that since
the alpha release, we have added the nibabel dependency in the
requirement file. So things will be a bit more streamlined in the next
release.

Time for an beta?
",nan,nan
5,issue_comment,328,nilearn,nilearn,bcipolli,2014-12-19 17:12:12,"Ok.  Perhaps having an explicit way to (a) install dependencies that play nice and (b) a way to error out the `pip install` of `nilearn` when they don't have `numpy`, `scipy`, or `scikit-learn` will help more novice  (installation-wise) users understand what's expected of them.

Glad to look into how to accomplish this in a `setup.py` file (sounds like a `requirements.txt` file may not be flexible enough to accomplish the above), if that sounds like a reasonable direction.
",nan,nan
6,issue_comment,328,nilearn,nilearn,GaelVaroquaux,2014-12-19 17:51:51,"> Ok. Perhaps having an explicit way to (a) install dependencies that play nice
> and (b) a way to error out the pip install of nilearn when they don't have
> numpy, scipy, or scikit-learn will help more novice (installation-wise) users
> understand what's expected of them.

Maybe shooting a warning (or an error) in the setup.py would be a good
way to do this.

To do this, we should probably move the '_check_dependencies' out from
nilearn/__init__.py to nilearn.version and 'import' it in the setup.py as
the version number is currently imported.

I think that we would accept a PR (pull request) doing that.
Unfortunately, I'll be offline for 2 weeks starting tomorrow. So I cannot
review it, but maybe other people of the nilearn team will be able to.
",nan,nan
7,issue_comment,328,nilearn,nilearn,lesteve,2014-12-19 18:12:19,"> To do this, we should probably move the '_check_dependencies' out from nilearn/__init__.py to nilearn.version and 'import' it in the setup.py as the version number is currently imported. 

I think the general idea has legs but needs to be tweaked a bit. The caveat is that you don't want to throw when nibabel is not installed in setup.py because setup.py is supposed to install it.

Also it'd be good to check what setup.py install error exactly looks like, to make sure we get an error that is actually helpful.
",nan,nan
8,issue_comment,328,nilearn,nilearn,GaelVaroquaux,2014-12-19 18:40:52,"> I think the general idea has legs but needs to be tweaked a bit. The caveat is
> that you don't want to throw when nibabel is not installed in setup.py because
> setup.py is supposed to install it.

Good point. That means that you probably need to have a keyword argument
in the dependency checker.

Also, we should raise an error only if an install is asked, and not other
options.
",nan,nan
9,issue_comment,328,nilearn,nilearn,bcipolli,2015-01-08 15:35:00,"@GaelVaroquaux I was planning to take a look at this after Jan. 15 (I have two things due then); would that work for you?
",nan,nan
10,issue_comment,328,nilearn,nilearn,bcipolli,2015-01-08 18:47:55,"OK.  If this is something you'd like in the release, just give me an idea of your timelines and I'll make time to do it!
",nan,nan
11,issue_comment,328,nilearn,nilearn,bcipolli,2015-01-09 05:25:25,"I will take a look at this now.
",nan,nan
12,issue_comment,328,nilearn,nilearn,bcipolli,2015-01-09 07:15:21,"Pull request is all set.  Will be heading to bed shortly, but tried to document what I did in the PR.  Will be able to discuss / update with any requests in the morning!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
8,issue_comment,348,nilearn,nilearn,AlexandreAbraham,2015-01-11 14:03:39,"If I remember well, all scans in subject 5 are marked as ""resting state"" because the data is crap for this subject.
",nan,nan
5,issue_comment,348,nilearn,nilearn,eickenberg,2015-01-11 14:10:53,"Subject 5 task labels are distributed normally as far as I can see.
",nan,nan
6,issue_comment,348,nilearn,nilearn,eickenberg,2015-01-11 14:12:24,"Actually, no, there seems to be a slight irregularity in one of the runs or something

```
In [26]: d = pl.csv2rec(h.session_target[3], delimiter="" "")

In [27]: u, i = np.unique(d['labels'], return_inverse=True)

In [28]: np.bincount(i)
Out[28]: array([108, 108, 108, 108, 108, 588, 108, 108, 108])

In [29]: d = pl.csv2rec(h.session_target[4], delimiter="" "")

In [30]: u, i = np.unique(d['labels'], return_inverse=True)

In [31]: np.bincount(i)
Out[31]: array([ 99,  99,  99,  99,  99, 660,  99,  99,  99])

```
",nan,nan
7,issue_comment,348,nilearn,nilearn,eickenberg,2015-01-11 14:18:22,"Yes, Subject 5, chunk 8 is fully labelled as ""rest"" (121 data points, instead of the usual 49 rest + 8 \* 9 task)
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,357,nilearn,nilearn,GaelVaroquaux,2015-01-20 06:30:34,"Hey,

I hadn't realized that we didn't work under Python 2.6.

I agree that, as we are start to want more users, we should worry about
compatibility with, first 2.6, and then 3.3 and 3.4.

Here is the way that I suggest tackling this issue (thanks Ben for
stepping up): first (for Python 2.6), port the ideas in scikit-learn's
.travis.yml to have the tests running under 2.6, then get it running;
submit a PR. Once the PR is in, do the same for Python 3.0.
",nan,nan
5,issue_comment,357,nilearn,nilearn,bcipolli,2015-01-20 06:37:58,":+1: Sounds great, and am very close to having exactly that done :)

@GaelVaroquaux One question: `scikit-learn`'s `.travis.yml` file doesn't deal with `NEURODEBIAN`.  Can you let me know how you'd like to include testing `NEURODEBIAN`?  Perhaps just on Python 2.7?  Not too familiar with it, so no idea what might make sense.
",nan,nan
6,issue_comment,357,nilearn,nilearn,lesteve,2015-01-20 08:23:15,"I reckon testing with NEURODEBIAN=1 only for Python 2.7 would be fine. 

I am not sure you can use NEURODEBIAN=1 to work with python2.6. According to [this](http://docs.travis-ci.com/user/ci-environment/#CI-environment-OS), Travis boxes Linux distribution is based on Ubuntu 12.04 and Python 2.6 has been dropped from 12.04 according to this [link](https://wiki.ubuntu.com/Python). Just saying I am not sure how Travis python version interacts with apt-get install python-numpy for example.

Maybe you have done that already but there is a way to set-up Travis so that it builds every time you are pushing into one of your branch, which is quite useful. Pandas developers page mentions this Travis [page](http://docs.travis-ci.com/user/getting-started/).
",nan,nan
7,issue_comment,357,nilearn,nilearn,lesteve,2015-01-20 08:35:43,"Before I forget while you are touching .travis.yml, it'd be great to have the neurodebian specific stuff only executed when NEURODEBIAN=1. Right now getting the Neurodebian GPG key fails from time to time (sudo apt-key adv --recv-keys --keyserver pgp.mit.edu 2649A5A9) and we are doing it whether we are using the Neurodebian repo or not.
",nan,nan
8,issue_comment,357,nilearn,nilearn,lesteve,2015-01-20 08:38:55,"Also Python3 compatibility would definitely be great. @ogrisel mentioned [futurize](http://python-future.org/futurize.html) last time we chatted about it.
",nan,nan
9,issue_comment,357,nilearn,nilearn,lesteve,2015-03-06 10:05:46,"closed via #476 
",nan,nan
3,issue_comment,357,nilearn,nilearn,ogrisel,2015-03-06 13:11:23,"\o/
",nan,nan
10,issue_comment,357,nilearn,nilearn,eickenberg,2015-03-06 13:12:20,"Now Olivier can do neuroimaging!

On Fri, Mar 6, 2015 at 2:11 PM, Olivier Grisel notifications@github.com
wrote:

> \o/
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/issues/357#issuecomment-77556194.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
16,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 10:37:06,"This is a bit surprising, the iterator only throws when next is called.

We could do something similar to the coroutine decorator to make sure that the error is raised at construction time:

``` python

def wrapped(raise_error):
    if raise_error:
        raise ValueError('Nope')
    yield

    for i in range(10):
        yield i

def gen(raise_error):
    it = wrapped(raise_error)
    next(it)
    return it

g = gen(raise_error=True)
```
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
17,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-19 11:55:08,"I think we should not make this option available to people. You can create an `_index_img` method that does not do the `check_niimg` and call it from both functions.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
18,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 11:58:56,"Yep I could do that, this was mostly done this way by laziness I must admit.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
19,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-19 12:00:15,"As dimensionality of the data has been checked, you can use `...`:

```
return nibabel.Nifti1Image(imgs.get_data()[..., index],
    imgs.get_affine(),
    header=imgs.get_header())
```
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
20,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-19 12:12:24,"Forget that, I remember reading somewhere that `...` was faster than `:,:,:` but a quick benchmark shows that it's the same.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
21,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 12:21:03,"I have to admit I just copied and pasted @GaelVaroquaux's code. From a quick grep, we do tend to use `...` more often than `:, :, :`. `...` also looks slightly easier on the eyes in my biased opinion.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
22,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-19 12:39:09,"For the record, I tried several strategies to iterate on Nifti Images and they seem to have the same performance:

```
python -m timeit -s '
import numpy as np
import nibabel
d = nibabel.load(""bold.nii"")
for i in range(d.get_data().shape[3]):
    a = d.get_data()[:, :, :, i]'

python -m timeit -s '
import numpy as np
import nibabel
d = nibabel.load(""bold.nii"")
for i in range(d.get_data().shape[3]):
    a = d.get_data()[..., i]'

python -m timeit -s '
import numpy as np
import nibabel
d = nibabel.load(""bold.nii"")
for id in np.rollaxis(d.get_data(), 3, 0):
    a = id'

python -m timeit -s '
import numpy as np
import nibabel
d = nibabel.load(""bold.nii"")
for id in d.get_data().T:
    a = id.T'
```
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
23,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:00:21,"perhaps, add an informative error message when index is out of bounds and/or image is not 4D?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
24,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:02:20,"The later could be done easily by `accept_3d=False`.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
25,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:04:48,"accept_3d=False?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
26,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:08:00,"yield does not exist for python <2.5, but that's ok, I guess.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
27,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-19 14:09:01,"> yield does not exist for python <2.5, but that's ok, I guess.

Yes, quite clearly
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
28,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 14:10:08,"accept_3d is False by default.

I haven't looked at the out of bounds error, I have to say. Also I should probably add some tests for it.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
29,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 14:27:19,"re out of bounds error. This is how it looks at the moment. Is that not good enough?

```
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-6-32c3bef60180> in <module>()
----> 1 image.index_img(img, 9)

/home/lesteve/dev/nilearn/nilearn/image/image.pyc in index_img(imgs, index)
    534     """"""
    535     imgs = check_niimgs(imgs)
--> 536     return _index_img(imgs, index)
    537 
    538 

/home/lesteve/dev/nilearn/nilearn/image/image.pyc in _index_img(imgs, index)
    511     """"""Helper function for index_img and iter_img
    512     """"""
--> 513     return nibabel.Nifti1Image(imgs.get_data()[..., index],
    514                                imgs.get_affine(),
    515                                header=imgs.get_header())

IndexError: index 9 is out of bounds for axis 3 with size 6
```
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
30,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-19 14:38:24,"Edit: I didn't get Loïc's remark at first time. OK for the coroutine but document it because it is quite a mindfuck to read ;)
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
31,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:38:58,":+1:
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
32,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:49:20,"`this_img_3d`is actually 4d in the last 2 iterations.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
33,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 14:53:45,"As _index_img() also passes on the header, one might add a test for this.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
34,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 14:54:59,"Just for the sake of clarity, here is what I meant originally: it would make more sense and be more user-friendly if `gen = iter_img(img_3d)` was raising an error saying that `iter_img` only takes 4d images. At the moment, it doesn't and the error is raised only when doing `next(iter)` as the test shows.

My snippet above was meant to be a demonstration how to get `gen = iter_img(img_3d)` to raise an error.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
35,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 14:56:19,"Fair point, I'll change that.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
36,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 14:59:56,"Is there a good way to do that? I originally tried to test the header, but actually the following statement doesn't hold:

`index_img(img, index).get_header() == img.get_header()`

One of the reason is the header contains the shape of the data and that the indexed image generally doesn't have the same dimensions as the original image.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
37,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 15:09:11,"That's unfair. I wasn't allow to do this :-P
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(12, '', u'nilearn/image/__init__.py')"
38,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-19 15:11:59,"Yes, I agree with @AlexandreAbraham that it's code that's really hard to read. My gut feeling is: isn't there a simpler way to do this? Such code gets me nervous.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
39,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 15:17:20,"here and for `ìndex``argument: perhaps add/exchange by ""slicing"" to explicitly communicate that more than one target image can be drawn from imgs. At first sight, the user might think index_img is constrained to retrieving single niftis.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
40,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 15:28:58,"Doing it in **init**() of classical generator object could be more readable?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
41,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-19 15:33:14,"That might have been a bit harsh on you indeed ;-). In my defense I added a line in the immediate vicinity so I was allowed to fix this PEP8 infraction.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(12, '', u'nilearn/image/__init__.py')"
42,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-19 15:36:50,"Since we are at it, is `ìndex=[]`` tested somewhere?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(46, '', u'nilearn/image/tests/test_image.py')"
43,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-19 16:00:12,"> IndexError: index 9 is out of bounds for axis 3 with size 6

I think that it is good enough for now.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
44,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-19 16:00:36,"> Doing it in init() of classical generator object could be more readable?

That's possible.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/tests/test_image.py')"
45,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-20 08:28:29,"Sorry I didn't see @GaelVaroquaux's comment about being nervous with this kind of code before pushing (now it is hidden somewhere in one of the outdated diffs, annoying). I can replace it by a object instead if people feel better about that:

``` python
class Iterator(object):
    def __init__(self, imgs):
        self.imgs = check_niimgs(imgs)
    def __iter__(self):
        for i in range(_get_shape(self.imgs)[3]):
            yield _index_img(self.imgs, i)
```
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
46,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-20 08:32:13,"> class Iterator(object):
>     def **init**(self, imgs):
>         self.imgs = check_niimgs(imgs)
>     def **iter**(self):
>         for i in range(_get_shape(imgs)[3]):
>             yield _index_img(imgs, i)

I actually feel better about this. You will seldom hear me argue for a
class instead of functions, but I feel that the class is more explicite
here.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
7,issue_comment,356,nilearn,nilearn,lesteve,2015-01-20 08:44:42,"> You will seldom hear me argue for a class instead of functions

My thoughts exactly ;-) to be fair it does make the code simpler. I have pushed the change now.
",nan,nan
47,pull_request_commit_comment,356,nilearn,nilearn,eickenberg,2015-01-20 22:28:21,"`index=slice(0, imgs.shape[0], 2)` will not make a copy, whereas `index=range(0, imgs.shape[0], 2)` will. Do we trust that any user who knows the difference between these expressions also knows about memory-related issues of their use? (I would say yes)
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
48,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-20 22:35:07,"> Do we trust that any user who knows the difference between these
> expressions also knows about memory-related issues of their use?

Clueless users don't, but we cannot solve their problems with low-level
code. Advanced users do, and we should enable them by no trying to
second-guess their goals.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
49,pull_request_commit_comment,356,nilearn,nilearn,eickenberg,2015-01-20 22:40:45,":+1: 

(clueless users don't know the difference between slicing and fancy indexing, and probably won't even think about assigning values to a nifti slice. Experienced users would probably be annoyed if the behaviour of slicing was changed.)
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
8,issue_comment,356,nilearn,nilearn,lesteve,2015-01-22 10:35:29,"Tried to improve the index_img docstring and I think I have addressed all comments. If I don't hear anything I'll merge this afternoon.
",nan,nan
50,pull_request_commit_comment,356,nilearn,nilearn,bthirion,2015-01-22 10:53:44,"Sorry if I'm mistaken, but to me it looks like the output is always 4D (with the forth dimension being 0 if index == [] or 1 if index == [0]) ? 
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
51,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-22 11:57:38,"Point-at-the-end-of-line here but not e.g. for `index`. Inconsistent?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
52,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 12:00:36,"If `index == 0`, then the output is 3D.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
53,pull_request_commit_comment,356,nilearn,nilearn,bthirion,2015-01-22 12:04:28,"Oops, it is indeed the case whenever index is a scalar.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
9,issue_comment,356,nilearn,nilearn,bthirion,2015-01-22 12:05:06,"LGTM
",nan,nan
54,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 12:07:45,"Sidenote: you can also end up with more dimensions: `index == None` (or `np.newaxis` for the purists) will give you 5D data (which totally fine for Nifti1Image).
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
55,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 12:08:09,"typo `nibabel.Nifti1IMage` -> `nibabel.Nifti1Image`
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
56,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 12:10:07,"I prefer to have classes declaration outside of the function unless it is mandatory. But that's personal taste I think.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
57,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-22 13:13:31,"Yeah I agree in general but this function is such a tight wrapper around the class that it doesn't really make sense to expose the class.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
58,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-22 13:17:26,"Done a few lines above. `index=[]` is actually a valid index, looks like you were expecting an out of bounds error from the positioning of your comment.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(46, '', u'nilearn/image/tests/test_image.py')"
59,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-22 13:17:39,"Done.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
60,pull_request_commit_comment,356,nilearn,nilearn,banilo,2015-01-22 13:20:15,"Ok, thanks. I did not know it is a valid argument.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(46, '', u'nilearn/image/tests/test_image.py')"
61,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-22 13:26:54,"> I prefer to have classes declaration outside of the function unless it is
> mandatory. But that's personal taste I think.

No, it's definitely good policy. With this code it becomes much harder to
introspect or to pickle (pickle is pretty much based on reflexivity, and
this breaks reflexity)
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
62,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-22 13:57:23,"FWIW, I seem to be able to pickle iter_img fine, even with the nested class. Nested classes within a class on the other hand are not picklable.

The main reason I put it inside the class it that otherwise iter_img and Checked4DImageIterator are an alias of each other, which doesn't seem ideal.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
63,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 14:54:16,"> FWIW, I seem to be able to pickle iter_img fine, even with the nested class

From my understanding of Python scopes, you shouldn't be able to pickle the result of iter_img (the iterator itself) but I can be wrong.

> The main reason I put it inside the class it that otherwise iter_img and Checked4DImageIterator are an alias of each other, which doesn't seem ideal.

I have no strong feeling. I just prefer classes outside of functions for the sake of readability. I honestly didn't think of people trying to pickle iterators.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
64,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-22 15:06:26,"> From my understanding of Python scopes, you shouldn't be able to pickle the result of iter_img (the iterator itself) but I can be wrong.

Yep you are right, I just checked pickling the `iter_img` function originally.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
10,issue_comment,356,nilearn,nilearn,lesteve,2015-01-22 15:14:45,"> >    From my understanding of Python scopes, you shouldn't be able to pickle the result of iter_img (the iterator itself) but I can be wrong.
> 
> Yep you are right, I just checked pickling the iter_img function originally.

OK I caved in and moved the class outside the iter_img function.
",nan,nan
11,issue_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 15:17:45,"... but we just concluded that inside was better! Or am I wrong?
",nan,nan
12,issue_comment,356,nilearn,nilearn,lesteve,2015-01-22 15:28:58,"> ... but we just concluded that inside was better! Or am I wrong?

I think the outcome was that nested classes wasn't good practice, and we found a case where pickability was broken. Good enough for me to drop it. Also adding an underscore in front of the class name, namely using _Checked4DImageIterator makes me happy enough about the whole thing.
",nan,nan
65,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-22 17:36:14,"What I find is somewhat a pity here is that if I am giving a list of strings (3D nifti files), the full data gets loaded. I know it makes for custom code, but we should maybe try to find a way that in this situation only the files that will be used get loaded.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(39, '', u'nilearn/image/image.py')"
66,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-22 17:40:57,"Same remark here: the data gets loaded when the iterator is created. Not only does it get loaded, but it gets concatenated to a 4D image. That means that it is using way more memory than it should be.

We should try to find a way around this.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(None, '', u'nilearn/image/image.py')"
5,issue_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-22 17:42:29,"General design seems absolutely right to me.

I have this quirk about the conversion to 4D in-memory NiftiImage object that I think should be addressed. With data like the HCP data, people are really running into memory problems.
",nan,nan
67,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 18:34:51,"There could be 2 modes: browsing (in that case a list of 3D files will not be loaded, or just memmapped) and computing (in that case the whole thing is loaded). However, is this a real usecase? I have the impression that this is more for plotting maps rather than indexing scans in a whole sequence.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(39, '', u'nilearn/image/image.py')"
68,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-22 18:38:34,"> There could be 2 modes: browsing (in that case a list of 3D files will not be
> loaded, or just memmapped) and computing (in that case the whole thing is
> loaded).

Modal functions are not good for API. Users tend to get them wrong.

Aside from making the code simpler, I don't see a benefit of the greedy
loading.

> However, is this a real usecase? I have the impression that this is
> more for plotting maps rather than indexing scans in a whole sequence.

It's for everywhere. One example: if I need to load a resting-state data,
but discard the first 3 images.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(39, '', u'nilearn/image/image.py')"
69,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-22 18:57:57,"> Aside from making the code simpler, I don't see a benefit of the greedy loading.

I don't get this remark. You mean that we should be able to give an `index` parameter to `check_niimg`?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(39, '', u'nilearn/image/image.py')"
70,pull_request_commit_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-22 19:02:00,"> ```
> Aside from making the code simpler, I don't see a benefit of the greedy
> loading.
> ```
> 
> I don't get this remark. You mean that we should be able to give an index
> parameter to check_niimg?

Ah! Your remark applied to check_niimg and not to index_niimg? Then I
mostly agree with it that two modes could be useful. My remark does apply
here, as it is a developer-oriented function.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(39, '', u'nilearn/image/image.py')"
13,issue_comment,356,nilearn,nilearn,lesteve,2015-01-27 10:44:52,"> What I find is somewhat a pity here is that if I am giving a list of strings (3D nifti files), the full data gets loaded.

OK I added a `return_iterator` optional argument to `check_niimgs` which I am now using in `iter_img` in order to address this problem.

Also just a heads up, I had to rebase to solve merge conflicts with upstream master.
",nan,nan
71,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-27 15:04:25,"Isn't that suboptimal if niimgs is a 4d nifti?
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(40, '', u'nilearn/_utils/niimg_conversions.py')"
72,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-29 07:36:23,"> Isn't that suboptimal if niimgs is a 4d nifti?

Remind me what did you mean by suboptimal? I seem to remember that you were concerned that `check_niimg` will be called on individual 3d images but that's not the case because `_index_niimgs` doesn't include checks and only does the data slicing + 3d image creation.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(40, '', u'nilearn/_utils/niimg_conversions.py')"
73,pull_request_commit_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-29 08:30:58,"That was just a question ;). Forget it I was wrong.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(40, '', u'nilearn/_utils/niimg_conversions.py')"
74,pull_request_commit_comment,356,nilearn,nilearn,lesteve,2015-01-29 09:09:21,"OK merging then. Further optimisation can be added later if needed.
",3071c38abaab4dd0013500a085d83f0d9a305dfb,"(40, '', u'nilearn/_utils/niimg_conversions.py')"
14,issue_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-29 09:22:53,"Great!
",nan,nan
6,issue_comment,356,nilearn,nilearn,GaelVaroquaux,2015-01-29 09:29:39,"This is really awesome.

Now we should adapt all the examples to use these functions. The goal
would be to call get_data on the Nifti1Images as little as possible.

In general, I always like to design such function via the modification of
example files: it tells me if I am making the life of users easier or
not.
",nan,nan
15,issue_comment,356,nilearn,nilearn,AlexandreAbraham,2015-01-29 09:35:22,"> In general, I always like to design such function via the modification of example files: it tells me if I am making the life of users easier or not.

No doubts on this one. It will definitely get rid of some nasty code in the examples.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
6,issue_comment,353,nilearn,nilearn,eickenberg,2015-01-16 14:17:47,"Definitely looks like it does what it is supposed to do :)

Some cosmetics / potential benchmark questions:
- I'd use `np.concatenate([...], axis=0)` instead of `np.vstack` just to be clear what is being done
- apart from `np.tensordot`, there is also the option to just `reshape(4, -1)` and `np.dot` (probably faster). (And the slower option: `np.einsum`)
- [We may be able to transform the other way round, i.e. transform the seed into voxel space. For (up to permutation) symmetric 3x3 parts of the affine, we would then be able to just shrink or dilate along the principle axes and thus be able to use `ogrid`. But that is probably way to complicated for the simple generation of a mask]
- `None == np.newaxis`
- `NiftiBallsMasker` is a funny name in a slightly unfortunate way :) (Might have to use the misnomer _sphere_ to avoid this ...)

Why does `_create_sphere` set that part of `array` to 1? Is the rest known to be 0?
",nan,nan
3,issue_comment,353,nilearn,nilearn,GaelVaroquaux,2015-01-16 14:18:54,">   • NiftiBallsMasker is a funny name in a slightly unfortunate way :) (Might
>     have to use the misnomer sphere to avoid this ...)

+1. I am the one who suggested it :$
",nan,nan
7,issue_comment,353,nilearn,nilearn,AlexandreAbraham,2015-01-19 11:50:55,"> NiftiBallsMasker is a funny name in a slightly unfortunate way :) (Might have to use the misnomer sphere to avoid this ...)

Gaël suggested it and I did not change it on purpose. For the same reason, we used the word ""sphere"" instead of ""ball"" in the SearchLight code/documentation and the main feedback I had on this was ""but Searchlight uses balls, not spheres"". A sphere is a surface, a ball is a volume and people knows that. If you have a solution to make the name more serious, I'd like to know it, but I think that using ""sphere"" would be a mistake.
",nan,nan
8,issue_comment,353,nilearn,nilearn,bcipolli,2015-01-19 16:04:47,"Can the `s` be dropped?  `NiftiBallMasker` is something I'd be willing to say out loud... :)
",nan,nan
9,issue_comment,353,nilearn,nilearn,eickenberg,2015-01-20 10:00:39,"@AlexandreAbraham I am aware of the mathematical definition of these words, and even the non-mathematical definition of a sphere in Wikipedia clearly indicates that it refers to the 2D surface in 3D space. However, I think the effect of names is not to be underestimated and it is beneficial to avoid sources of awkwardness where we can ... :)

@bcipolli I think that is probably the best option. Thanks for the suggestion!

Otherwise something like `NiftiRadiusMasker` should probably be descriptive enough as well.
",nan,nan
10,issue_comment,353,nilearn,nilearn,banilo,2015-01-20 10:11:56,"Am I the only one who is forced to think of this regarding the masker name?

![image](https://cloud.githubusercontent.com/assets/3907396/5815319/091d1c1a-a095-11e4-8774-b2b92f997ef9.png)
",nan,nan
11,issue_comment,353,nilearn,nilearn,lesteve,2015-01-20 10:18:16,"> NiftiBallMasker is something I'd be willing to say out loud

Just to point it out in case it wasn't obvious already: the slightly annoying thing with NiftiBallMasker (without s) is that the other maskers use the plural: NiftiLabel**s**Masker, NiftiMap**s**Masker.
",nan,nan
4,issue_comment,353,nilearn,nilearn,GaelVaroquaux,2015-01-20 10:21:58,"OK, to be pragmatic, in the neuroimaging litterature, the term of sphere
is widely used, eventhough it is incorrect. I think that it is used more
often than ""balls"". So let's go for ""NiftiSpheresMasker"".
",nan,nan
12,issue_comment,353,nilearn,nilearn,banilo,2015-01-20 20:24:54,"Sorry for crashing the party, my impression is that ""sphere"" and ""ball"" is what usually comes up in method sections, where the radius is specified etc. Yet, in the (actually more often read) introduction and discussion sections frequent notions appear to be
- seed
- ROI / region of interst
- VOI / volume of interest

More concretely, do you anticipate that people will use spheres/balls for somethings else than time-series extraction for seed correlation or graph analyses? If not, then NiftiSeedMasker might be a viable alternative.
",nan,nan
13,issue_comment,353,nilearn,nilearn,banilo,2015-01-20 20:25:38,"Sorry for crashing the party, my impression is that ""sphere"" and ""ball"" is what usually comes up in method sections, where the radius is specified etc. Yet, in the (actually more often read) introduction and discussion sections frequent notions appear to be
- seed
- ROI / region of interst
- VOI / volume of interest

More concretely, do you anticipate that people will use spheres/balls for somethings else than time-series extraction for seed correlation or graph analyses? If not, then NiftiSeedMasker might be a viable alternative.
",nan,nan
14,issue_comment,353,nilearn,nilearn,eickenberg,2015-01-20 20:26:08,"""""""searchlight""""""?

On Tuesday, January 20, 2015, Danilo Bzdok notifications@github.com wrote:

> Sorry for crashing the party, my impression is that ""sphere"" and ""ball"" is
> what usually comes up in method sections, where the radius is specified
> etc. Yet, in the (actually more often read) introduction and discussion
> sections frequent notions appear to be
> - seed
> - ROI / region of interst
> - VOI / volume of interest
> 
> More concretely, do you anticipate that people will use spheres/balls for
> somethings else than time-series extraction for seed correlation or graph
> analyses? If not, then NiftiSeedMasker might be a viable alternative.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/issues/353#issuecomment-70726147.
",nan,nan
15,issue_comment,353,nilearn,nilearn,banilo,2015-01-20 20:28:49,"> searchlight

Are you suggesting SeedMVPAMasker?
",nan,nan
16,issue_comment,353,nilearn,nilearn,bthirion,2015-01-20 20:43:35,"-1 for me. First we need homogeneity in the naming. Second, a seed is not necessary a ball (it can be  a predefined ROI, a single voxel). I think that the term does not convey an accurate idea about the object.
",nan,nan
5,issue_comment,353,nilearn,nilearn,GaelVaroquaux,2015-01-20 21:01:23,"> More concretely, do you anticipate that people will use spheres/balls for
> somethings else than time-series extraction for seed correlation or graph
> analyses? If not, then NiftiSeedMasker might be a viable alternative.

That would be a horrible misnomer. A seed is not necessary a ball. And
the ball is not always used for seeding (eg with graph analyses). While
the sphere/ball is a small misnomer, that one would be misleading.
",nan,nan
17,issue_comment,353,nilearn,nilearn,AlexandreAbraham,2015-06-22 15:42:33,"Fixed by #430.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
10,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 18:14:58,"Blew away the old algorithm (well, it's essentially the same, but easier to PEP8)
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(29, '', u'nilearn/datasets.py')"
11,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-15 18:24:46,"This code is used when the size of the file is not sent in the http request header. It must stay.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
12,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-15 18:28:55,"If you feel like it, I was planning at some point to change that by the uptime of the machine. otherwise, the estimated time is false if your computer goes to sleep.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
13,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 18:40:13,"Ah, ok--I thought it was there for the 'optional argument'.  Will put back with a comment.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
14,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 18:47:06,"Do you know a simple way to do that?  I did a quick search and didn't see anything simple to get around that issue.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
15,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-15 19:02:18,"There is an uptime module in python.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
9,issue_comment,351,nilearn,nilearn,bcipolli,2015-01-15 21:24:24,"@AlexandreAbraham I added the code to use `uptime` when available, let me know what you think when you have a min!
",nan,nan
16,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-15 21:58:17,"Do you think that we should put a message like `- stalled` when the bitrate is very low? This is the behavior of `wget`.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
17,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-15 22:01:23,"This is a tricky question... If uptime calculation is not supported on a system, will it fail at import or at function call? Apart from that, this PR is ready to go.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
18,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 22:17:21,"I think this better wait for a different system, where:
- callbacks are not based on getting packets, but rather on a timer (otherwise, if you get hung on a packet, you get no update)
- we keep track of only the most recent packets; otherwise, if you download 300MB at a fast speed, it'll be a long time before we report being ""stalled"" (since the current scheme is cumulative over the entire download)
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
19,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 22:18:39,"Good point--this `try..catch` is good for when the module is not installed, but potentially NOT good for if `uptime` is installed but not supported.  I can call `uptime.uptime()` and catch whatever error (will check the docs) there too.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
20,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 22:19:56,"Indeed, according to the docs, there _IS_ no error thrown--`uptime.uptime()` simply returns `None`.   Will account for that...
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
21,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-15 22:23:29,"That's true but I don't think that we want to spend more time on this matter. Your PR fix several annoying bugs and that's good but I think that there are more urgent things to fix ;).
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
22,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 23:37:52,":+1: I meant to be suggesting that we move on too :)
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
23,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-15 23:38:01,"Just pushed an update for this.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
24,pull_request_commit_comment,351,nilearn,nilearn,lesteve,2015-01-16 14:20:33,"I am just wondering if we should bother about uptime. My point is that yes it makes the total download time more accurate but:
- it does so only in a very restricted edge case: you have to interrupt the download of a dataset and shut down your computer for a while
- it's not like the dataset download time is a critical piece of information and I must say I have probably never paid attention to it ...
- uptime is quite an obscure 3rd party package and it is very unlikely to be installed on anyone's machine. 
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
25,pull_request_commit_comment,351,nilearn,nilearn,GaelVaroquaux,2015-01-16 14:22:05,"> I am just wondering if we should bother about uptime. 

I was thinking the same. It seems that the cost / benefit ratio isn't
really very good. It terms of long term maintenance, my gut feeling is to
favor the simpler solution.

G
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
26,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-16 15:31:31,"I am somewhat agnostic, but I would suggest that the data fetching part of this package could really be an attractive aspect of it.  I think having excellent download tools is going to be extremely important for the USA's BRAIN initiative (among others; it's the one I'm most familiar with) and the current push for data sharing.

I plan to post an issue to discuss later, but I think that the `nilearn` dataset functionality can be used as a starting point for something much bigger.  This is something I would be happy to work on, and I think I have some contacts that could help get some traction on it.  For this reason, I suggest keeping this kind of code in--I think it'll become more important over time.

With that said, it's such a simple snippet, I would only mention this once now and leave it to others to decide what's the right way to go!
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
27,pull_request_commit_comment,351,nilearn,nilearn,AlexandreAbraham,2015-01-16 21:33:06,"> it's not like the dataset download time is a critical piece of information and I must say I have probably never paid attention to it ...

I think that's the point: you never needed it so you never paid attention. But when you want to know (typically when you have a slow connection), having false information is very annoying. And this is not an edge case: when downloading a big dataset, I put my computer to sleep a lot (I do it 3 times a day: when commuting and when sleeping). Also, when I wanted to get my bandwith back temporary, I paused the process using Ctrl + Z, this also invalidate estimated time. Because of that, I ended up using wget instead of nilearn.
But I agree: this solution is not optimal (I thought that uptime was a standard module as it was installed on my box) and this is not the most important bug. Do we have a solution that can be coded fast and solve this problem ?
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
28,pull_request_commit_comment,351,nilearn,nilearn,GaelVaroquaux,2015-01-17 10:26:42,"> I am somewhat agnostic, but I would suggest that the data fetching part
> of this package could really be an attractive aspect of it.

Maybe, but we are speculating on the future. Who knows how the resources
to maintain nilearn are going to evolve, and how the demand is going to
evolve. Right now, we are a small team, and I am afraid that the
complexity of the download code is starting to become disproportionate to
its usefulness. Importantly, the priority of nilearn is to be useful to
neuroimaging and we need to invest best our efforts to find the simplest
way to achieve this goal.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
29,pull_request_commit_comment,351,nilearn,nilearn,GaelVaroquaux,2015-01-17 13:21:38,"> Do we have a solution that can be coded fast and solve this problem ?

Implement a residual time based on a local speed of download. Or simply
move on.
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
30,pull_request_commit_comment,351,nilearn,nilearn,bcipolli,2015-01-17 19:34:46,"I suggest to move on.  

If so, the first commit contains the original changes and none of this uptime stuff.  Perhaps it can be cherry-picked into master?  Or do you prefer I force the change to my branch, so we can merge here? 
",3451a2a4e81d1c8c0b469b42f025185e4ab51ec5,"(None, '', u'nilearn/datasets.py')"
6,issue_comment,351,nilearn,nilearn,lesteve,2015-01-18 13:24:15,"> I suggest to move on.

Sounds good to me. It makes more sense if we merged this branch, I'd say. Shouldn't be too hard to do (not tested):

```
git reset @~2 --hard
git push origin download_resume_reporting -f
```
",nan,nan
7,issue_comment,351,nilearn,nilearn,bcipolli,2015-01-18 13:48:02,"@lesteve not tested... but perfect :)  ready to go!
",nan,nan
8,issue_comment,351,nilearn,nilearn,lesteve,2015-01-18 13:50:19,"Good stuff, merging then.
",nan,nan
5,issue_comment,351,nilearn,nilearn,GaelVaroquaux,2015-01-18 15:19:03,"Thanks @bcipolli !
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,350,nilearn,nilearn,bcipolli,2015-01-15 16:36:57,"I am using this, so happy to make a simple fix.  I noticed that there are a few small issues in `nilearn/datasets.py:_chunk_report':
https://github.com/nilearn/nilearn/blob/master/nilearn/datasets.py#L89
- parameters `total_size` and `t0` are said to be optional, but they don't have default args.
- No default `t0` is actually suggested, and passing any non-meaningful value will output a non-meaninful remaining time.
- If `total_size=None` is passed, the `stderr.write` has no trailing whitespace.

It seems best to me to eliminate the idea that these args can be optional.  The codepath isn't used (and therefore not tested) anyway.

Alternately, I could implement things to make those _actually_ optional arguments, and add code for when `t0` is not specified (but `total_size` is).
",nan,nan
3,issue_comment,350,nilearn,nilearn,AlexandreAbraham,2015-01-15 16:43:11,"Hey Ben,

> parameters total_size and t0 are said to be optional, but they don't have default args.

As said above in a comment, I took this code somewhere and adapted it for our usage. I removed a lot of unused code and forgot to update the dosctring. We don't need to make these parameters optionals.

Feel free to refactor this code.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
14,pull_request_commit_comment,359,nilearn,nilearn,bcipolli,2015-01-20 15:36:04,"This all got moved into the `install.sh` file.
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(13, '', u'.travis.yml')"
7,issue_comment,359,nilearn,nilearn,lesteve,2015-01-20 17:13:46,"Thanks a for for this, this is super useful!

> Tests for all three scenarios are working (or were working; seems the PGP key for neurodebian is choking at this moment, out of the blue)...

Yeah this is quite annoying when that happens, not sure whether there is a way to work around it. I restarted the job on Travis and everything seems fine now.
",nan,nan
15,pull_request_commit_comment,359,nilearn,nilearn,lesteve,2015-01-20 17:19:38,"It'd be quite nice to add other dependencies versions here. I am thinking matplotlib and nibabel.
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(None, '', u'continuous_integration/install.sh')"
16,pull_request_commit_comment,359,nilearn,nilearn,lesteve,2015-01-20 17:25:49,"Nice catch, it took me a little while to figure out why you were renaming the list comprehension variables ... (answer: shadowing the _get_json_and_transform 'direction' parameter)
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(16, '', u'nilearn/plotting/glass_brain.py')"
5,issue_comment,359,nilearn,nilearn,GaelVaroquaux,2015-01-20 17:29:03,"Thanks for the PR. This is absolutely great!

> - Many `assert_X` functions are unavailable in Python 2.6; convert the few we were using to `assert_true`

Have you check in sklearn.utils.testing. I believe that we have
backported everything that was necessary there.

> - Context manager for `nose.assert_raises` doesn't exist in Python 2.6; use our custom `assert_raises_regexp`, which was more appropriate anyway (since we wanted to check the error message of the error anyway).

Same thing, there is a fairly developed framework for testing assertions
in scikit-learn. We should rely on it, as these things are actually quite
tricky to get right.
",nan,nan
17,pull_request_commit_comment,359,nilearn,nilearn,lesteve,2015-01-20 17:30:27,"I don't think the COVERAGE environment variable is used anywhere in the scripts or travis.yml. Also coverage is enabled in setup.cfg.

Which reminds me It'd be quite nice to setup coversall one day similarly to what scikit-learn is doing.
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(None, '', u'.travis.yml')"
18,pull_request_commit_comment,359,nilearn,nilearn,lesteve,2015-01-20 17:32:56,"bonus points if you fix this PEP8 warning, while you are touching the line above.
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(None, '', u'nilearn/_utils/niimg_conversions.py')"
8,issue_comment,359,nilearn,nilearn,lesteve,2015-01-20 17:38:20,"> Same thing, there is a fairly developed framework for testing assertions in scikit-learn. We should rely on it, as these things are actually quite tricky to get right.

For nilearn._utils.testing.assert_raises_regexp, I actually copied the code from scikit-learn. The main reason I did that is [there](https://github.com/nilearn/nilearn/commit/a0c7693e0325dea9c7ce04a8512936eede881d32). Also this was added only in scikit-learn 0.15, so we can not rely only on scikit-learn for this functionality since we need to support much older versions.
",nan,nan
6,issue_comment,359,nilearn,nilearn,GaelVaroquaux,2015-01-20 17:39:09,"> Also this was added only in scikit-learn 0.15, so we can not rely only
> on scikit-learn for this functionality since we need to support much
> older versions.

OK. Good reason.
",nan,nan
9,issue_comment,359,nilearn,nilearn,bcipolli,2015-01-20 18:21:05,"> For nilearn._utils.testing.assert_raises_regexp, I actually copied the code from scikit-learn. The main reason I did that is there. Also this was added only in scikit-learn 0.15, so we can not rely only on scikit-learn for this functionality since we need to support much older versions.

Good point, but supporting scikit-learn < 0.15 for users is different than supporting it for developers.  I think that, to avoid copying code and to use the full scikit-learn test functionality, it would be reasonable to require developers to use scikit-learn >= 0.15 (and show a meaningful error if they are not).

That doesn't seem to challenging to do... I'd be willing to make that happen if others are on-board with it.
",nan,nan
10,issue_comment,359,nilearn,nilearn,lesteve,2015-01-20 18:48:40,"> Good point, but supporting scikit-learn < 0.15 for users is different than supporting it for developers. 

Not sure where you would draw the line and which mechanism you would use. The thing is that Travis need to run the tests with old versions of scikit-learn so I don't really see how we can avoid providing an assert_raises_regexp inside nilearn.

Also as you might have seen from the link in my previous message there is a small but very nasty bug that is only fixed in scikit-learn master: assert_raises_regexp provided by scikit-learn is using match rather than search to check the error message. As far as I was concerned that was the last straw that broke the camel's back of my attempts at reusing scikit-learn assert_raises regexp.
",nan,nan
11,issue_comment,359,nilearn,nilearn,bcipolli,2015-01-20 18:50:16,"> The thing is that Travis need to run the tests with old versions of scikit-learn so I don't really see how we can avoid providing an assert_raises_regexp inside nilearn.

Good point.  OK then! :)
",nan,nan
19,pull_request_commit_comment,359,nilearn,nilearn,bcipolli,2015-01-20 19:00:27,"Yup!  And nice catch; I should have added a comment to the PR to point out that change...
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(16, '', u'nilearn/plotting/glass_brain.py')"
20,pull_request_commit_comment,359,nilearn,nilearn,bcipolli,2015-01-20 19:01:40,"I will remove these and add an issue for setting up `coversall`.  It's along the lines of things I'm able and happy to contribute.
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(None, '', u'.travis.yml')"
21,pull_request_commit_comment,359,nilearn,nilearn,GaelVaroquaux,2015-01-20 19:59:23,"> I will remove these and add an issue for setting up coversall. It's along the
> lines of things I'm able and happy to contribute.

It's really great to have you on board, Ben!
",1ebfe989d5732ea01e4cbdf804123b63c3cc4bac,"(None, '', u'.travis.yml')"
12,issue_comment,359,nilearn,nilearn,bcipolli,2015-01-20 20:59:11,"Made the few cleanup / reporting tweaks; and made no further changes to the tests.  Let me know if there's anything else to do here; otherwise, I'll focus my time on completing Python 3.x support.

Thanks!
",nan,nan
13,issue_comment,359,nilearn,nilearn,lesteve,2015-01-21 21:26:39,"This looks good to me, merging, Thanks a lot for that!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
