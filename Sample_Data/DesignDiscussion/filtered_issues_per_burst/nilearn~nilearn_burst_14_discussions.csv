Unnamed: 0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
164,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-12 07:28:23,"I had some hesitation between 'mask' and 'masker' for the name of this argument. I think 'masker' would be better but I left mask for further discussion.
",6164294177c34f257dbd354cf97d643597255a0d,"(55, 55, u'nisl/decomposition/multi_pca.py')"
165,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-12 07:30:32,"Thresholding strategy should be documented and discussed. If threshold is a float, I use it as a ratio of number of voxels that will be kept, but we can see this as a percentile of values kept, or directly as a threshold value...
",6164294177c34f257dbd354cf97d643597255a0d,"(72, 134, u'nisl/decomposition/canica.py')"
166,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-12 07:34:42,"> I had some hesitation between 'mask' and 'masker' for the name of this
> argument.

Mask is better. It makes it more explicite that a mask can be passed in.
Passing in a masker concerns only a small fraction of power users. These
can read the docs.
",6164294177c34f257dbd354cf97d643597255a0d,"(55, 55, u'nisl/decomposition/multi_pca.py')"
8,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 13:48:21,"Names of parameters that ...
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
9,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 13:48:42,"None **or** list
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
10,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 13:57:16,"Here ""parameters"" is closely related to scikit-learn. Please explain somewhere in the docstring what it is exactly (parameter of the __init__ method), and maybe a link to _get_param_names() from scikit-learn. 
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
11,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 14:06:52,"I know this is a safety net to avoid breaking some possibly long computation, but it will also hide some programming errors. 
In the present case, there is not many exception that can be raised (probably KeyError, AttributeError and some errors related to string formatting). At the very least, if the caught exception is a serious one like SyntaxError, re-raise it.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
12,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 14:08:51,"This docstring is unclear. What is the intent of this function? Reading the code, it appears that it was designed to get the name of the estimator (in a scikit-learn sense) that called this function, and something more generic. Please give at least some hint.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
13,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 14:10:30,"Fair enough. But what does it do?
",62249599c64671fba6fc09efae482d09155340d2,"(28, '', u'nisl/decomposition/canica.py')"
14,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 14:28:40,"OK for the first remark. For the second one, I don't think it's a good idea to provide a link to another package's private function.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
15,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 14:41:04,"I think we should make a list of Builtin Exception that we want to catch or not. I think that SyntaxError, ImportError and maybe TypeError should not be catched.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
16,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 14:46:24,"I don't think that this behavior may be used often : it is hard to know at which level in the stack the calling object is and, if we could, it could be different depending on the situation. Maybe a 'max_stack_level' that look for the 'closest' scope holding a 'self' var should be better.
",62249599c64671fba6fc09efae482d09155340d2,"(65, '', u'nisl/_utils/class_inspect.py')"
17,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 14:47:17,"Does not exist anymore. Has been replaced by sessuin_pca for which I have written a piece of doc.
",62249599c64671fba6fc09efae482d09155340d2,"(28, '', u'nisl/decomposition/canica.py')"
18,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:03:44,"None instead of float (same thing for high_pass below)
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
19,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:05:47,"Misalignment here (pep8 complains)
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
20,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:07:10,"""on which PCA"" (no ""the"")
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
21,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:11:52,"I really don't like this attribute name (`self.mask_`) because it does not contain a mask, but a masker, which is completely different. Please rename it to `masker_`, unless there is some good reason to keep `mask_`.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
22,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:17:15,"PEP8 complains here
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
23,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 15:20:33,"I agree that this name is ambiguous. Maybe we should take mask as a parameter, put the mask in mask_img_ and the masker in masker_ ?
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
24,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:21:18,"PEP8
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
25,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:22:57,"I agree. To be on the safe side in this case, white-list some exceptions, like those you just listed. In any other case, catch only the required exception.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
26,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:25:10,"If I understand the code correctly, there is no need for a mask_img_, since a masker is computed in any case, and the mask image is retrieved as self.mask_.mask_img_. Just rename mask_ to masker_, and you're good.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
27,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:27:54,"Why are you building such a list ?
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
28,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 15:29:47,"it avoids duplicating code if confounds is None (we can't iter on it in the next line if it's simply None).
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
29,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 15:30:16,"Yes, you're right.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
30,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:30:49,"Canical -> Canonical
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
31,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:32:08,"Describe the computed attributes like mask(er)_, component_img_.
",62249599c64671fba6fc09efae482d09155340d2,"(188, '', u'nisl/decomposition/multi_pca.py')"
32,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:33:41,"Sorry, I'm not fully awake, it seems.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
33,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:35:52,"For your (and my) records:Â itertools.repeat() does the same thing while requiring a constant amount of memory. Probably useless here.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
34,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 15:40:37,"Good practices are never useless ;)
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
35,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:41:00,"This will break: %i and no parameter provided.
",62249599c64671fba6fc09efae482d09155340d2,"(266, '', u'nisl/decomposition/multi_pca.py')"
36,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 15:45:21,"This will not break, this will do worse: print '%i'.
",62249599c64671fba6fc09efae482d09155340d2,"(266, '', u'nisl/decomposition/multi_pca.py')"
37,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:48:15,"`getattr` raises AttributeError if the given attribute does not exist. Returning None for a missing attribute would be javascript's  behaviour :-)
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
38,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:50:22,"Use `hasattr` instead.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
7,issue_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:53:06,"There is not tests/test_multi_pca.py. Is this intentional?
",nan,nan
39,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:57:15,"Some init parameters are not described in the docstring (e.g. threshold)
",62249599c64671fba6fc09efae482d09155340d2,"(43, '', u'nisl/decomposition/canica.py')"
40,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 15:59:16,"Can self.threshold really be anything? It seems to me that a numpy array with a precise shape is excepted. If this is the case, add the test, and raise ValueError if no case fit.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
41,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 16:01:00,"What does ""for the moment"" mean? Are we talking about execution or development? Is it stored temporarily during an execution, or is this a temporary development?
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
42,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 16:10:33,"This function is unused: remove.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/io/base_masker.py')"
43,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 16:12:52,"basemasker.filter_and_mask. The function isn't a method anymore.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
44,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 16:15:40,"This is not what we want here ;). We are sure that these params exist. We want to know if the user has overriden them. For example, if you pass a NiftiMultiMasker, whose smoothing_fwhm is custom, to CanICA, the custom parameter will be overwritten by the one given to CanICA. That is why we want to know is the value of the parameter is None (default) and if it is not, that means that the user has put custom value, and then we warn him that we override it.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
45,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 16:19:09,"Then the code is wrong for another reason: the default value is not None for all the parameters (e.g. memory or memory_level)
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
46,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-13 16:26:39,"Nitpicking: use print as a function, for future compatibility with Python 3.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/io/base_masker.py')"
47,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 16:35:41,"It's a development note. I think that whether or not we compute it must be discussed.

It is only used further in transform and inverse_transform methods. I think that if the user wants it to be computed once and for all, he just has to provide a Memory object. On the other hand, it may be useful for the user to have a direct access to the components in a niimg format. This is more consistent with the behavior of the object : niimg in, niimg out. Maybe we should keep components_img_ and remove components_
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
48,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-13 16:44:38,"In fact, we should find a better way to do that then.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
49,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 01:06:16,"> > -    ignore: None of list of strings
> 
> None or list

Hum, I think that I disagree: list of strings is more explicit
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
50,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 01:08:47,"> I agree that this name is ambiguous. Maybe we should take mask as a parameter,
> put the mask in mask_img_ and the masker in masker_ ?

I am -1 on duplicating where the mask is stored. I am +0 on dropping
mask_img_ and simply using masker_.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
51,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 01:11:08,"> What does ""for the moment"" mean? Are we talking about execution or
> development? Is it stored temporarily during an execution, or is this a
> temporary development?

I think that I would like it to be removed: I don't like the idea of
having duplicated info in an estimator.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
5,issue_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 01:16:35,"> ```
> There is not tests/test_multi_pca.py. Is this intentional?
> ```
> 
> I think Gael was working on it. I don't know if he has started or if it's a
> WIP.

I don't understand. On my box, I have a battery of tests there. I don't
have time to check what is going on (am in a Starbucks), but there should
be 100% test coverage on multi_pca.py
",nan,nan
52,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-14 06:52:02,"> I think that I would like it to be removed: I don't like the idea of having duplicated info in an estimator.

I agree on that point, thus the comment to launch a discussion about it. The question is: should we keep components_ or components_img_ ? As said before, I'm +1 for components_img_ (niimg in, niimg out).
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
53,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-14 08:36:39,"Considering only performance, the best choice is the masked version `self.components_`, because timeseries extraction uses masked data in the end (nisl/region.py:255). In the current state, components are un-masked in `MultiPCA.fit` (multi_pca.py:240), and masked again in transform, through the call to NiftiMapsMasker.transform (multi_pca.py:263). The present state works fine, but it will use too much time and memory for no good reason (`self.components_` and `self.components_img_` are the same -big- thing, and conversion between them is performed multiple times). 

However, in the present state, there is no way to pass masked data to NiftiMapsMasker, meaning that  `self.components_` will have to be unmasked at some point. Thus, it's `self.components_` that must be dropped, at least until some optimization is performed.

Another performance issue: it seems that `components_img_` is computed twice in some cases. `CanICA.fit` calls `MultiPCA.fit`, and both call `masker_.inverse_transform`. This precise problem can be solved by doing lazy evaluation.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
54,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-14 08:40:36,"What about something like that (for a given parameter ""param_name""): 

```
orig_value = getattr(obj, param_name)
if orig_value != getattr(self, param_name): warnings.warn("""")
setattr(obj, param_name, getattr(self, param_name))
```
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/multi_pca.py')"
55,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-14 08:49:13,"This is not imported in **init**.py. Intended?
",62249599c64671fba6fc09efae482d09155340d2,"(87, '', u'nisl/decomposition/multi_pca.py')"
6,issue_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 12:42:24,"> ```
> You simply forgot to add the file, no big deal.
> ```

What a dumass! Done
",nan,nan
56,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 12:44:34,"> I agree on that point, thus the comment to launch a discussion about it. The
> question is: should we keep components_ or components_img_ ? As said before,
> I'm +1 for components_img_ (niimg in, niimg out).

For internals, we need components_ (for instance to get MultiPCA to talk
to ICA, or for the transform), so I am +1 to keep components_ rather than
components_img_

We should instruct people to use
multi_pca.masker_.inverse_transform(multi_pca.components_)
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
57,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 12:46:17,"> However, in the present state, there is no way to pass masked data to
> NiftiMapsMasker, meaning that self.components_ will have to be unmasked
> at some point.

How about short-circuiting this object and using it's internals rather
than the full object (i.e. a function that does the work rather than the
method)?

> Another performance issue: it seems that components_img_ is computed
> twice in some cases. CanICA.fit calls MultiPCA.fit, and both call
> masker_.inverse_transform. This precise problem can be solved by doing
> lazy evaluation.

But also by better organisation of the code, which we should attempt.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
58,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 12:47:22,"> > +class MultiPCA(BaseEstimator, TransformerMixin):
> 
> This is not imported in init.py. Intended?

So far yes. I'll like to keep it not for public consumption temporarily,
as we play with the design for a few months.
",62249599c64671fba6fc09efae482d09155340d2,"(87, '', u'nisl/decomposition/multi_pca.py')"
59,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-14 13:01:03,"Short-circuiting this object is feasible, but requires some refactoring in NiftMapsMasker, to expose an internal function that can take masked data as input (sort of reminds me of some functions that I wrote a few weeks ago and which were eliminated ;-) ). 

A better organization of the code is always a good thing. The question is: should we do this now? Might not it be a good idea to release a mildly-optimized implementation that works to get feedback first?
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
60,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-14 14:50:28,"> A better organization of the code is always a good thing. The question is:
> should we do this now?

No

> Might not it be a good idea to release a mildly-optimized
> implementation that works to get feedback first?

I agree
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
61,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-17 11:38:18,".full_version doesn't exist in numpy 1.3.0 (but short_version does). Is it really required?
",62249599c64671fba6fc09efae482d09155340d2,"(5, '', u'nisl/tests/test_masking.py')"
62,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-17 11:45:11,"This line triggers a bug on Python 2.6. See also nisl/image.py:104. 

Use `hasattr(niimg, ""__iter__"")` instead.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/niimg_conversions.py')"
63,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-17 12:21:20,"ratio might have the value ""None"" after this if/elif. Would be better to add an else: and raise ValueError with a clear user message.
",62249599c64671fba6fc09efae482d09155340d2,"(271, '', u'nisl/decomposition/canica.py')"
64,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-17 12:26:22,"np.abs(ica_maps) is computed two times in this branch. Might be better to memorize it.

The following lines re-invent scipy.stats.scoreatpercentile(), which is used in high_variance_confounds(). I don't know if it would be faster/use less memory than this implementation though.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
65,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-17 16:10:55,"As full_version seems to be used only for non release build, I thinks this is harmless.

@GaelVaroquaux : any thought on that ?
",62249599c64671fba6fc09efae482d09155340d2,"(5, '', u'nisl/tests/test_masking.py')"
66,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-17 16:45:52,"> .full_version doesn't exist in numpy 1.3.0 (but short_version does). Is it
> really required?

Yes. So we need to test for full_version. If it's not present, we know we
have an old numpy.
",62249599c64671fba6fc09efae482d09155340d2,"(5, '', u'nisl/tests/test_masking.py')"
67,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-17 16:47:08,"> np.abs(ica_maps) is computed two times in this branch. Might be better to
> memorize it.

Not memorizing it: it is fast to compute and not worth the speed/time
tradeoff of caching. If we can avoid recomputing be rearranging the code
it is better.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/decomposition/canica.py')"
68,pull_request_commit_comment,77,nilearn,nilearn,GaelVaroquaux,2013-06-17 16:48:15,"> As full_version seems to be used only for non release build, I thinks this is
> harmless.
> 
> @GaelVaroquaux : any thought on that ?

Well the reason I used it, is that the code without it breaks on a dev
version. This needs to be sorted out. Sorry, I don't have time to look at
it.
",62249599c64671fba6fc09efae482d09155340d2,"(5, '', u'nisl/tests/test_masking.py')"
69,pull_request_commit_comment,77,nilearn,nilearn,pgervais,2013-06-17 19:23:35,"> Well the reason I used it, is that the code without it breaks on a
> dev version. This needs to be sorted out. Sorry, I don't have time
> to look at it.
> I'll take care of it.
",62249599c64671fba6fc09efae482d09155340d2,"(5, '', u'nisl/tests/test_masking.py')"
70,pull_request_commit_comment,77,nilearn,nilearn,AlexandreAbraham,2013-06-19 09:23:09,"I have adressed this problem in commit fd67f54
I just added a white list of acceptable exceptions (we may have to modify it).

Good thing is that we could make some system to remove exception catching when in dev mode.
",62249599c64671fba6fc09efae482d09155340d2,"(None, '', u'nisl/_utils/class_inspect.py')"
 , , , , , , , , , 
 , , , , , , , , , 
11,pull_request_commit_comment,74,nilearn,nilearn,AlexandreAbraham,2013-06-12 07:08:30,"If opening is now activated by default, we could just remove the first step here (or find an example in which opening value needs to be changed, but I think we don't have one).
",6a4d274c5d8d0c235d07ca4bab33eb45a08e78bd,"(8, 119, u'doc/extracting_data.rst')"
13,pull_request_commit_comment,74,nilearn,nilearn,AlexandreAbraham,2013-06-12 07:10:35,"od -> of
",ebf89f6ec439fb3e7c8c29f52f77d0ffa7f0dfec,"(48, 65, u'plot_simulated_data.py')"
5,issue_comment,74,nilearn,nilearn,GaelVaroquaux,2013-06-12 09:35:03,"Looks good. Merging. Thanks!
",nan,nan
12,pull_request_commit_comment,74,nilearn,nilearn,bthirion,2013-06-13 08:08:20,"You're right. We should remove this paragraph. Actually, I am thinking of this more as an illustration of the feature rather than a necessary step in the present case (I'm not even sure that opening brings a crucial improvement here).
",6a4d274c5d8d0c235d07ca4bab33eb45a08e78bd,"(8, 119, u'doc/extracting_data.rst')"
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,82,nilearn,nilearn,GaelVaroquaux,2013-06-19 23:03:46,"> After discussion with Philippe, we find much more consistant to ignore masker
> parameters given to MultiPCA in this case (if the user gives us a masker, we
> assume that he knows what he's doing).

I'd rather have it the other way: explicit is better than implicit.
",nan,nan
6,issue_comment,82,nilearn,nilearn,pgervais,2013-06-21 08:57:25,"My thoughts on this. 

MultiPCA needs a mask for its computations. The user can provide it or let the object compute it from data. The latter situation can be handled in two ways: either by providing a masker object, or by providing the _options_ taken by the masker object (and let MultiPCA create one). What the user would write is respectively (in extremely simplified form, for the purpose of the example):

```
MultiPCA(smoothing_fwhm=2)
```

or 

```
masker = MultiNiftiMasker(smoothing_fwhm=2)
MultiPCA(mask=masker)
```

The second situation being useful when the same masker (not mask) is to be reused in different places.

The question raised in this issue is what should happen in this situation:

```
masker = MultiNiftiMasker(smoothing_fwhm=2)
MultiPCA(mask=masker, smoothing_fwhm=3)
```

What I think after talking with Alexandre is that this situation must not happen: this is an **error**. The Python langage prevents a keyword argument from being provided twice. Let's do the same. The present example is a conflict, which is ambiguous. Giving priority to either value (that in masker or that provided to MultiPCA itself) is implicit in all cases.
",nan,nan
4,issue_comment,82,nilearn,nilearn,GaelVaroquaux,2013-11-05 13:44:33,"> For the moment, if we are in such a case, the value of the MultiPCA is taken
> and we raise a warning.

I am not sure what your sentence mean.
",nan,nan
5,issue_comment,82,nilearn,nilearn,GaelVaroquaux,2013-11-05 13:51:54,"> if there is a conflict between the parameters of the MultiNiftiMasker and of
> the MultiPCA, the parameters of the MultiPCA are kept and a warning message
> tell the user that parameters of the masker were overridden

All good!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
5,issue_comment,69,nilearn,nilearn,GaelVaroquaux,2013-06-10 15:10:16,"> I thinks the file ""niimg_conversions.py"" is missing.

Done
",nan,nan
6,pull_request_commit_comment,69,nilearn,nilearn,bthirion,2013-06-10 22:05:23,"'whose output'
",549f55343341a222500b855e7ec7f03ee89bad7d,"(None, '', u'nisl/_utils/cache_mixin.py')"
7,pull_request_commit_comment,69,nilearn,nilearn,bthirion,2013-06-10 22:06:58,"connected components
",549f55343341a222500b855e7ec7f03ee89bad7d,"(None, '', u'nisl/_utils/ndimage.py')"
8,pull_request_commit_comment,69,nilearn,nilearn,bthirion,2013-06-10 22:17:52,"the ""copy"" keyword
",549f55343341a222500b855e7ec7f03ee89bad7d,"(None, '', u'nisl/_utils/numpy_conversions.py')"
9,pull_request_commit_comment,69,nilearn,nilearn,bthirion,2013-06-10 22:19:53,"Always
",549f55343341a222500b855e7ec7f03ee89bad7d,"(None, '', u'nisl/_utils/numpy_conversions.py')"
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,80,nilearn,nilearn,GaelVaroquaux,2013-06-19 23:05:28,"> In MultiPCA, if the user provides a masker, we clone it. Unfortunately, in
> joblib 0.6, a bug prevent cloning a Memory object.

I don't understand. The memory shouldn't be cloned, only the masker. What
is the error message? Sorry, I am supposedly listening to talks, so I
cannot reproduce myself.

G
",nan,nan
4,issue_comment,80,nilearn,nilearn,GaelVaroquaux,2013-06-19 23:13:17,"> The Masker contains a Memory object. Therefore, when we clone the masker, the
> Memory is cloned too. Unfortunately, in joblib 0.6, cloning a Memory does not
> work if cachedir is None.

OK, I remember now.

> Philippe's patch fixes this bug but it breaks Travis build :-/

OK, you can do a try/except on the cloning of the masker rather than
testing for version.

G
",nan,nan
5,issue_comment,80,nilearn,nilearn,pgervais,2013-06-20 07:38:50,"I don't think there is any need for a ""clean"" patch: this is a workaround, and such things are always a little messy. If the code inside the ""try"" branch is clean, that doesn't matter to me if what is in the ""except"" clause is ugly. Using a try/except by itself is not bad practice.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
9,pull_request_commit_comment,81,nilearn,nilearn,GaelVaroquaux,2013-06-19 23:09:13,"You should say that you go up by at most 'stack_level'. Maybe that variable should be renamed 'max_stack_level'.
",0e7368491dd9fad8639224ae397c0edb3e9ed1bc,"(8, 65, u'nilearn/_utils/class_inspect.py')"
4,issue_comment,81,nilearn,nilearn,GaelVaroquaux,2013-08-01 13:10:37,"LGTM
",nan,nan
6,issue_comment,81,nilearn,nilearn,pgervais,2013-08-26 09:14:15,"This is very similar to #99. Maybe something could be factored out?
",nan,nan
5,issue_comment,81,nilearn,nilearn,GaelVaroquaux,2014-04-21 10:57:49,"> Well, this is old, we should decide if we merge it or not. I think that
> stack_level won't be used a lot in practice so this may be a bit YAGNI.
> 
> @GaelVaroquaux : what do you think ?

OK, let's avoid YAGNI and close this guy.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
8,pull_request_commit_comment,79,nilearn,nilearn,AlexandreAbraham,2013-06-16 20:17:05,"Is the regexp match really necessary since we already have the precise list of images ?
",67ff2466d3fa33039092f0224cb59e9eb136e4af,"(71, 1261, u'nisl/datasets.py')"
9,pull_request_commit_comment,79,nilearn,nilearn,AlexandreAbraham,2013-06-16 20:18:55,"A Reference is recommended for downloads: at least the URL of the dataset and, if relevant, the reference paper for the dataset.
",67ff2466d3fa33039092f0224cb59e9eb136e4af,"(41, 1231, u'nisl/datasets.py')"
4,issue_comment,79,nilearn,nilearn,GaelVaroquaux,2013-06-16 23:10:20,">   â¢ SPM auditory single subject (lagacy dataset, bad quality, but good for
>     demos/examples)
>   â¢ SPM Multimodal fmri faces vs scrambled (I worked with @alex senior on this
>     dataset recently)
>   â¢ FSL (FEEDS single subject)

Can we use these in nilearn, or do these require preprocessing, or GLM
estimation that we cannot do in nilearn? If they cannot be used to write
a nilearn example, they should not be included in nilearn, but maybe
rather in pyprocess.
",nan,nan
5,issue_comment,79,nilearn,nilearn,GaelVaroquaux,2013-06-19 15:00:55,"> Yes they need preprocessing, just like NYU rest and openfmri for example.

Than they should probably go in Pypreprocess for now.
",nan,nan
6,issue_comment,79,nilearn,nilearn,pgervais,2013-08-29 11:46:39,"Since the datasets won't process themselves magically, this PR seems to be useless now. I'm closing it.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
