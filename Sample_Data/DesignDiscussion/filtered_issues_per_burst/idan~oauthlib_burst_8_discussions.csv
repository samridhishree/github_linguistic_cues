Unnamed: 0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
4,issue_comment,64,idan,oauthlib,ib-lundgren,2012-11-08 21:13:07,"Well spotted and thanks a ton for the PR!

I'm very intrigued as to how you are finding the provider, any suggestions for changes? I have personally not have that much time to play around with actually using it in a project apart from my first stab at it with https://github.com/ib-lundgren/flask-oauthprovider 
",nan,nan
5,issue_comment,64,idan,oauthlib,swsnider,2012-11-08 22:04:53,"I think the existence of a fully-working, end-to-end provider implementation would have been most helpful, and would have helped expose deficiencies of the API like this one -- right now, I'm implementing the initial client key -> request token -> access token dance in my provider, and I'm running into pointy bits, like the fact that verify() doesn't make available things like the requested realm, or the client and token that were verified -- I instead have to redo some of the initial computation, which just feels awkward.

If you're interested in my (probably bad) implementation, I've published what I have so far to https://github.com/swsnider/fierce_mercury
",nan,nan
6,issue_comment,64,idan,oauthlib,ib-lundgren,2012-11-08 22:42:14,"Indeed it would be great and I have plans for finishing the Flask one and grand plans for Django, unfortunately my time is limited but will try and sketch up what I'm planning at some point and maybe someone will jump on it.

Good that you pointed out the issue of access to params, I have a vague memory of running into the same. To make your life a little easier I've now updated verify to return a request object filled with most arguments you might be interested in (signature, client_key, resource_owner_key, nonce, timestamp,callback_uri, verifier, signature_method, realm). I've not pushed to pypi, only github atm.

before: authorized = server.verify(...)
now: authorized, request = server.verify(...)

Please let me know if there is anything else that would be good or problems you are running into. If I can't solve them in code I'll try and add to the docs. Oh and I will definitely have a look at your implementation at some point =)
",nan,nan
7,issue_comment,64,idan,oauthlib,ib-lundgren,2012-11-08 22:48:47,"When it comes to a fully-working, end-to-end provider implementation you might find my demo provider interesting at 

https://github.com/ib-lundgren/flask-oauthprovider/tree/master/examples/demoprovider (also has some client demos) (support HMAC, RSA & Plaintext + a very basic web interface to sign new clients up with OpenID).

I have been meaning to follow up with an end-to-end guide on how I implemented it but yea, time...
",nan,nan
8,issue_comment,64,idan,oauthlib,swsnider,2012-11-08 22:55:33,"I'll take a look at that, definitely. I can write up some docs probably -- if I get that done before you, I'll send another PR.

Would you mind pushing to pypi soonish? I've also had to maintain a patch in my implementation to add the realm kwparam to the Client code because the pypi version is lacking that change :(
",nan,nan
9,issue_comment,64,idan,oauthlib,ib-lundgren,2012-11-08 23:00:27,"Pushed =)
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,62,idan,oauthlib,warsaw,2012-10-28 16:11:34,"Would it not be better to explicitly sort the keyword arguments?

```
--- a/oauthlib/oauth2/draft25/parameters.py
+++ b/oauthlib/oauth2/draft25/parameters.py
@@ -64,7 +64,7 @@
     if state:
         params.append(('state', state))

-    for k in kwargs:
+    for k in sorted(kwargs):
         if kwargs[k]:
             params.append((unicode_type(k), kwargs[k]))

@@ -98,7 +98,7 @@
     if 'scope' in kwargs:
         kwargs['scope'] = scope_to_string(kwargs['scope'])

-    for k in kwargs:
+    for k in sorted(kwargs):
         if kwargs[k]:
             params.append((unicode_type(k), kwargs[k]))

--- a/tests/oauth2/draft25/test_client.py
+++ b/tests/oauth2/draft25/test_client.py
@@ -294,7 +294,7 @@
     password = ""bar""
     body = ""not=empty""

-    body_up = ""not=empty&grant_type=password&username=%s&password=%s"" % (username, password)
+    body_up = ""not=empty&grant_type=password&password=%s&username=%s"" % (password, username)
     body_kwargs = body_up + ""&some=providers&require=extra+arguments""

     token_json = ('{   ""access_token"":""2YotnFZFEjr1zCsicMWpAA"",'
--- a/tests/oauth2/draft25/test_parameters.py
+++ b/tests/oauth2/draft25/test_parameters.py
@@ -56,7 +56,7 @@
         'username': 'johndoe',
         'password': 'A3ddj3w'
     }
-    password_body = 'grant_type=password&username=johndoe&password=A3ddj3w'
+    password_body = 'grant_type=password&password=A3ddj3w&username=johndoe'

     cred_grant = {'grant_type': 'client_credentials'}
     cred_body = 'grant_type=client_credentials'
```
",nan,nan
3,issue_comment,62,idan,oauthlib,warsaw,2012-10-29 10:07:41,"Sorry, that patch isn't sufficient.  I've uploaded a patch to Ubuntu and will do a pull request.
",nan,nan
4,issue_comment,62,idan,oauthlib,ib-lundgren,2012-10-30 19:28:11,"@warsaw - Thanks for the patch & #63! 

OAuthLib aims to be very strictly spec compliant\* and while sorting the parameters seem rather innocent it's not the expected behaviour. Furthermore I much rather improve the tests and make them robust than tweak the code to fit the tests. Adding an assert_url_equals method to TestCase is rather trivial (using urlparse for the heavy lifting). 

For the two tuples I think TestCase.assertItemsEqual should be sufficient. 
-  if you find places where this could be improved upon please point it out =)
",nan,nan
5,issue_comment,62,idan,oauthlib,ib-lundgren,2012-11-08 20:05:02,"@warsaw I was not sure if you found any time to work more on the PR or not and since I found a free spot in my calendar and sorted this out. I've added you to AUTHORS, let me know if you'd prefer not to be listed.

Hopefully I covered most of it but will keep an eye out for flakyness. 

I've pushed this to PYPI as 0.3.2.

Heard from @christofferholmstedt that you are working a bit with making OAuth requests and thought I'd give a shoutout to the awesome requests library that has OAuthLib powered OAuth support built in =)

Here's an example on doing HMAC-SHA1 signed requests but RSA and plaintext are of course also supported.
http://docs.python-requests.org/en/latest/user/quickstart/#oauth-authentication
",nan,nan
6,issue_comment,62,idan,oauthlib,warsaw,2012-11-08 20:36:18,"On Nov 08, 2012, at 12:05 PM, Ib Lundgren wrote:

> @warsaw I was not sure if you found any time to work more on the PR or not
> and since I found a free spot in my calendar and sorted this out. I've added
> you to AUTHORS, let me know if you'd prefer not to be listed.

Thanks so much!  I was almost literally just getting back to this after UDS-R
and post-Copenhagen travel.  You probably beat me by just a couple of hours. :)

> Hopefully I covered most of it but will keep an eye out for flakyness. 
> 
> I've pushed this to PYPI as 0.3.2.

Fantastic, thanks.  I'll test the PyPI version.  If it looks good, I'll go
ahead and upload to Ubuntu 13.04, otherwise will file bugs if I find any other
problems.

> Heard from @christofferholmstedt that you are working a bit with making OAuth
> requests and thought I'd give a shoutout to the awesome requests library that
> has OAuthLib powered OAuth support built in =)

Indeed!  We've upgraded urllib3 and requests in 13.04 to the latest PyPI
versions.  One change we're making in the packaging though, is to use
chardet2, urllib3, and oauthlib from the Debian packages instead of the
bundled versions in requests (I wonder why they do that :/).

It all needs a bit of testing, but after I get everything uploaded properly,
I'll start converting some of the dependent packages, and continue testing.

> Here are an example on doing HMAC-SHA1 signed requests but RSA and plaintext
> is of course also supported.
> http://docs.python-requests.org/en/latest/user/quickstart/#oauth-authentication

Thanks!
",nan,nan
7,issue_comment,62,idan,oauthlib,ib-lundgren,2012-11-08 21:10:07,"The reason requests vendors OAuthLib is because we are still in a flux with quite frequent changes. @kennethreitz is a very responsive and friendly guy so if the vendoring is a concern just ping him.

Although we are unlikely to break anything related to OAuth 1 clients most of the OAuth 2 API will likely undergo quite a bit of changes. One day (probably quite a few months from now) I envision hitting 1.0 at which point the API will be stable. 

Feel free to send bugs, PRs and just about anything our way and we'll take a look at it =)
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
