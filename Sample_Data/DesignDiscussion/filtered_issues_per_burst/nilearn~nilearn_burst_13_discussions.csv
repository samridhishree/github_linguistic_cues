Unnamed: 0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
14,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:27:47,"I had left 'smooth' on purpose here, because I felt that in the context of ""apply_mask"", or a Masker object, ""fwhm"" had no meaning. Maybe we could have ""smoothing_fwhm"", but I think that I prefer ""smooth"".
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/base_masker.py')"
15,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:28:19,"I hadn't realized, but the docstring should specify that it is a FWHM.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/nifti_masker.py')"
16,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:32:40,"We need a more explicit name. Maybe ""resampling_target"".
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/nifti_region.py')"
17,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 09:37:19,"For me, ""smooth"" hints at a boolean flag. I definitely prefer smoothing_fwhm, even if it's longer. 
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/base_masker.py')"
18,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:37:52,"I wonder if it is worth define 3 different variables (affine1, affine2, and affine3), if we set them all equal. I am just trying to make the test shorter and thus more readable.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/tests/test_nifti_region.py')"
19,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 09:38:46,"A more correct version can be found in NiftiMapsMasker docstring. I'll fix this one.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/nifti_masker.py')"
20,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 09:40:09,"I considered for a moment ""target_img"", because it was consistent with target_shape and target_affine. resampling_target sounds good to me.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/nifti_region.py')"
21,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:40:50,"fwhm_sigma is somewhat a misnomer as it is a sigma (as in the formula of the Gaussian), not an FWHM. This is why I had left the original name.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/masking.py')"
22,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 09:41:11,"I'll clean this, it was initially a copy-paste of test_nifti_maps_masker().
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/tests/test_nifti_region.py')"
23,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:42:29,"> For me, ""smooth"" hints at a boolean flag. I definitely prefer smoothing_fwhm,
> even if it's longer.

That's fine with me.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/io/base_masker.py')"
24,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 09:43:34,"You're right. I'll rename this into ""sigma"".
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'nisl/masking.py')"
25,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:44:03,"We should always use 'nisl_cache' across the examples, to have only one cache directory.

Also, all our caching procedures should be able to take a string. This way we don't have to explain to the user where to import the Memory object, and what it is.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
26,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:45:04,"OK, I see where mem is needed... I guess we need an explanation for the user who does not know joblib.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
27,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 09:45:48,"Usage of Memory is temporary in this case: not a single example makes use of joblib right now. This wil be removed before merging.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
28,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:46:06,"I would say: just do the simple version. It will make it easier to understand for the user.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
29,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:46:51,"Hum, actually, compcorr should be in the ADHD sets of confounds, I believe, so you don't need this.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
5,issue_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 09:47:43,"Done with my review! :)
",nan,nan
30,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 11:17:02,"This is temporary, again. The goal was to compare both results. 

However, we need a way to show new users how to use the ""low-level"" API. What we did previously with plot_regions_covariance.py was to add another script, containing the ""advanced"" version. In the long run this is not a good idea, since it will basically mean duplicating every example file. 

So the question is: where do we put ""advanced"" examples?
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
31,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 11:19:50,"We'll do different advanced examples that do not reproduce exactly the
same thing. The idea being that we need less advanced examples, because
they are for advanced users ( :$). Also, the advanced API is there to do
things that are not possible with the simple API, as it is more flexible.
We'll have to look for such usecases.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
8,issue_comment,59,nilearn,nilearn,pgervais,2013-05-22 11:39:12,"I'd like to have your opinion on the resampling API. Currently, the resampling target could be only the maps or the mask, but not in any case the images themselves. In other words there is no way to resample both the maps and the mask to the shape of the images. While technically feasible, this would probably cause confusion in the API. Example of use case of resampling_target=""images"":

```
masker = NiftiMapsMasker(maps_img, mask_img=mask_img, resampling_target=""images"")
masker.fit(images)  # requires images just for shape and affine. Resample maps and mask here.
signals = masker.transform(images)
```

or 

```
masker = NiftiMapsMasker(maps_img, mask_img=mask_img, resampling_target=images)  # pass images here.
masker.fit()  # Resample maps and mask
signals = masker.transform(images)
```

What do you think? Is this feature useful?
",nan,nan
6,issue_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 11:40:38,"> What do you think? Is this feature useful?

The question is: how does resampling_target affect the output of
inverse_transform?
",nan,nan
9,issue_comment,59,nilearn,nilearn,pgervais,2013-05-22 11:41:25,"For the moment, inverse_transform returns an image with the shape/affine given by resampling_target.
",nan,nan
7,issue_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 11:44:30,"> For the moment, inverse_transform returns an image with the shape/affine given
> by resampling_target.

That's what I thought. In this case, we need the option to have 'image'
as resampling_target, I believe.
",nan,nan
10,issue_comment,59,nilearn,nilearn,pgervais,2013-05-22 11:50:57,"Then, which API is the best?
",nan,nan
32,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 14:42:19,"To be precise, high_variance_confounds() is applied in this example to the whole image, including the space around the brain, which is probably not the case for the compcorr provided with the adhd dataset.

I removed the call to high_variance_confounds() from **plot_region_covariance.py**. I tested that the result is almost unchanged. However, if I do the same in **plot_msdl_covariance_advanced.py**, the graph lasso does not converge, even if the result is really close to what it was before. We're not using the same regions (MSDL / Harvard-Oxford.)
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
33,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 14:44:25,"Then I can as well drop this example completely, because it's very similar to plot_region_covariance.py. The main differences are: different regions (maps instead of labels), and resampling.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
34,pull_request_commit_comment,59,nilearn,nilearn,pgervais,2013-05-22 14:47:26,"I should do the other way: keep plot_msdl_covariance.py and drop plot_regions_covariance.py, because the MSDL atlas can be downloaded from the internet, whereas Harvard-Oxford's needs a separate FSL installation.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
35,pull_request_commit_comment,59,nilearn,nilearn,GaelVaroquaux,2013-05-22 15:46:07,"> I should do the other way: keep plot_msdl_covariance.py and drop
> plot_regions_covariance.py, because the MSDL atlas can be downloaded from the
> internet, whereas Harvard-Oxford's needs a separate FSL installation.

I agree.
",1b2d20e79576efec7de15ad61031643cfbe5da60,"(None, '', u'plot_msdl_covariance_advanced.py')"
11,issue_comment,59,nilearn,nilearn,pgervais,2013-05-23 08:22:14,"I added resampling to NiftiLabelsMasker, mostly the same way I did for NiftiMapsMasker.

Since giving fmri images as the resampling target seems to need some more discussion (it's useful, but choosing a proper behaviour may take a while), I let it aside.

From my point of view, this PR is good to merge.
",nan,nan
12,issue_comment,59,nilearn,nilearn,pgervais,2013-05-23 16:25:22,"Some more changes.

The img_to_signals_*() functions now always output as many signals as regions. Having a array size known in advance will make downstream code simpler to write.

I added some debugging messages to both Nifti(Maps|Labels)Masker object, putting at least something behind the ""verbose"" option. I created a mixin just for this, comments welcome, as usual. 

I still didn't change the default for resampling_target, because I still think that setting ""labels"" or ""maps"" as a default will be harmful in most cases, because the voxel number in labels or maps images may be much higher than in images (in fMRI at least), and it will fill the memory very quickly. Imho, the safest choice would be to use fMRI images as target, but this option is still not implemented.
",nan,nan
13,issue_comment,59,nilearn,nilearn,pgervais,2013-05-27 09:37:11,"Rebased the branch on master for the sake of having a linear history.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
5,issue_comment,53,nilearn,nilearn,pgervais,2013-05-16 14:58:08,"I had a look at the source code. Taking into account the aspect ratio is technically not difficult. 
However, we need to have access to pixel sizes inside `SearchLight.fit()`, which is not the case right now. The fix will thus include an API change.

Two possibilities:
- The simplest way is to add an ""affine"" parameter to `SearchLight.__init__()`, and keep `mask` and `process_mask` as numpy.ndarray
- Another one would be to pass `mask` and `process_mask` as niimg.

I think the second solution is a better one, because the transformer is very specific to fMRI, and as such, should process fMRI images, not arrays.

@GaelVaroquaux, if you have some time, can you give your opinion?
",nan,nan
4,issue_comment,53,nilearn,nilearn,GaelVaroquaux,2013-05-16 15:13:32,">   • Another one would be to pass mask and process_mask as niimg.
> 
> I think the second solution is a better one, because the transformer is very
> specific to fMRI, and as such, should process fMRI images, not arrays.

Agreed!
",nan,nan
6,issue_comment,53,nilearn,nilearn,pgervais,2013-05-29 09:17:04,"@mekman: if you're still interested in searchlight, the issue you raised should be fixed by the aforementioned PR #65. Any comment is appreciated. 

I also updated the plot_haxby_searchlight.py example, so that you can figure out quickly what the changes were.
",nan,nan
3,issue_comment,53,nilearn,nilearn,mekman,2013-06-05 15:13:06,"looks good. Thanks!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,61,nilearn,nilearn,GaelVaroquaux,2013-05-26 21:18:42,"This is great. Merging!
",nan,nan
5,issue_comment,61,nilearn,nilearn,pgervais,2013-05-27 09:31:49,"Closing the pull request, since merging hasn't been done with the github interface.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
6,pull_request_commit_comment,62,nilearn,nilearn,GaelVaroquaux,2013-05-27 10:32:33,"This is not garantied to induce a copy:

<pre>
In [11]: a = np.zeros((10, 10, 10))

In [12]: af = np.identity(4)

In [13]: niimg = nibabel.Nifti1Image(a, af)

In [16]: data = niimg.get_data()

In [17]: data2 = niimg.get_data()

In [18]: np.may_share_memory(data, data2)
Out[18]: True
</pre>


Of course, if the input niimg was a file name this copy is irrelevant. This is why I think that it is of high priority to add a ""copy"" keyword argument to check_niimg.
",597894a02778c154fb31153666ac0a5db6b64826,"(None, '', u'nisl/resampling.py')"
7,pull_request_commit_comment,62,nilearn,nilearn,GaelVaroquaux,2013-05-27 10:35:19,"Very cool!
",597894a02778c154fb31153666ac0a5db6b64826,"(None, '', u'nisl/resampling.py')"
8,pull_request_commit_comment,62,nilearn,nilearn,pgervais,2013-05-27 11:00:39,"True. I already did this mistake before. I'll add the ""copy"" keyword argument asap.
",597894a02778c154fb31153666ac0a5db6b64826,"(None, '', u'nisl/resampling.py')"
9,pull_request_commit_comment,62,nilearn,nilearn,AlexandreAbraham,2013-05-27 11:09:18,"Indeed ! I did not knew this one.
",597894a02778c154fb31153666ac0a5db6b64826,"(None, '', u'nisl/resampling.py')"
10,pull_request_commit_comment,62,nilearn,nilearn,pgervais,2013-05-27 11:31:07,"I didn't either a few hours ago :-)
",597894a02778c154fb31153666ac0a5db6b64826,"(None, '', u'nisl/resampling.py')"
5,issue_comment,62,nilearn,nilearn,pgervais,2013-05-27 12:25:30,"The last commit fixed all issues raised. I didn't add the ""copy"" argument to check_niimg() though, because it would have led to an unused copy in most cases. In fact, the keyword has only an effect for no-op cases. When a resampling has to be performed for real, a copy in always made (this is by design and cannot be changed).

Code coverage is now 100% for nisl.resampling.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,64,nilearn,nilearn,GaelVaroquaux,2013-05-29 08:26:53,"> 3822.42 seconds in my machine. Mostly because of Searchlight.
> 
> In any case this makes it really painful to build the doc and to the user it
> looks as if the example was broken (there is no output whatsoever for one
> hour).

OK, the fact that there is no output needs to be changed.

That said, we need real examples on nisl, not only toys. This means that
we will have to cope with long-running doc builds (and yes searchlight is
slow and useless).
",nan,nan
4,issue_comment,64,nilearn,nilearn,GaelVaroquaux,2013-05-29 08:40:19,"> Normally, the progression is shown like that:
> Job #1, processed 190/1435 voxels(13.24%, 76 seconds remaining)
> 
> So there must be another problem...

It could be that the output is captured by the gen_rst.py. There is a
'Tee' object that is supposed to sort this out, but... Need investigation
",nan,nan
8,issue_comment,64,nilearn,nilearn,pgervais,2013-05-29 09:26:05,"I'm in the process of changing the Searchlight class API (see PR #65). I'll have a look on this problem at the same time. 
",nan,nan
9,issue_comment,64,nilearn,nilearn,pgervais,2013-05-29 09:39:43,"The reason why there's no output in the console, is because verbose=1 should be passed to Searchlight, which is not the case in plot_simulated_data.py.
",nan,nan
10,issue_comment,64,nilearn,nilearn,pgervais,2013-05-29 09:43:20,"On my machine, with one core only, the searchlight part takes 475s. 
",nan,nan
11,issue_comment,64,nilearn,nilearn,pgervais,2013-05-29 12:22:23,"After some discussion with Gael, adding `estimator=svm.SVR(kernel=""linear"")` to the SearchLight initialization parameters partly solves the problem (this was a bug). The computation time is reduced, and the result is way better.
",nan,nan
5,issue_comment,64,nilearn,nilearn,GaelVaroquaux,2013-05-29 12:44:05,"> Estimated computation time on my machine is ~50 000 seconds.

Are you sure that you are talking about the plot_simulated_data example?
",nan,nan
12,issue_comment,64,nilearn,nilearn,pgervais,2013-05-29 12:49:05,"The bug is only in plot_simulated_data.py, not plot_haxby_searchlight.py, because one is a regression, and the other a classification task.
",nan,nan
6,issue_comment,64,nilearn,nilearn,GaelVaroquaux,2013-05-29 12:51:13,"> ```
> Are you sure that you are talking about the plot_simulated_data example?
> ```
> 
> No, I thought that we were talking about plot_haxby_searchlight...

So the take home message is that if you put an SVC in a regression pb, it
is very slow, and the same for an SVR in a classification pb. I believe
that it is because of the low explained variance, that makes the
optimization pb hard (probably because of the large number of support
vectors).
",nan,nan
7,issue_comment,64,nilearn,nilearn,GaelVaroquaux,2013-05-31 08:15:54,"> THANKS!! works much better now, it went down to 159s which is really
> reasonable.

Well, thanks for pointing it out. It was useful.

> I promise to have the buildbot working soon.

Great!

G
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
7,pull_request_commit_comment,65,nilearn,nilearn,agramfort,2013-05-29 12:35:32,"measures
",3239a51276ded8f0eb6d0ae36d5e82f71b81150c,"(None, '', u'plot_haxby_searchlight.py')"
5,issue_comment,65,nilearn,nilearn,pgervais,2013-05-29 16:19:00,"I fixed what I consider as a bug in 0fecd4b. I removed two lines whose usefulness is doubtful to me (to say the least) (lines 145-146). If someone has an idea, I'd appreciate it. Removing them removed artifacts that occured in plot_simulated_data.py. 

After fixing plot_simulated_data.py, the result of searchlight seems to be reasonable. It is not just noise as before.
Good to merge for me.
",nan,nan
6,issue_comment,65,nilearn,nilearn,pgervais,2013-05-31 10:47:27,"I rebased the branch on master for merging.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
5,issue_comment,66,nilearn,nilearn,GaelVaroquaux,2013-05-30 09:47:19,"In 3.1, there should be a subsection about non custom things (i.e. using the NiftiMasker as a black box, giving it filenames, using the MultiNiftiMasker when you have several subjects) before custom things :)
",nan,nan
7,issue_comment,66,nilearn,nilearn,pgervais,2013-05-30 11:13:09,"The non-custom things description is currently in part 2. I didn't repeat it. 
",nan,nan
8,issue_comment,66,nilearn,nilearn,pgervais,2013-05-31 11:56:14,"One more big incompatible change: the ""searchlight"" module was renamed to ""decoding"", which is supposed to contain in the long run every decoding algorithm implemented in nisl. This in turn may change in the future, but this is a step in the right direction.
",nan,nan
6,issue_comment,66,nilearn,nilearn,GaelVaroquaux,2013-05-31 12:44:35,"Actually, could you rather create a directory 'decoding' and put a
searchlight.py file in there. If we add more methods, having a single
file will not scale.
",nan,nan
24,pull_request_commit_comment,66,nilearn,nilearn,AlexandreAbraham,2013-05-31 13:47:26,"This breaks the examples who use mean_epi as background.
",67e45731cb3165fdd5925ea6733b4aceeeed8e76,"(5, 109, u'nisl/io/nifti_masker.py')"
25,pull_request_commit_comment,66,nilearn,nilearn,pgervais,2013-05-31 13:53:51,"Fixing it...
",67e45731cb3165fdd5925ea6733b4aceeeed8e76,"(5, 109, u'nisl/io/nifti_masker.py')"
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,67,nilearn,nilearn,GaelVaroquaux,2013-10-11 12:12:05,"@jaquesgrobler, do you think that you could take care of that? It goes along with syncing gen_rst.py across projects.
",nan,nan
6,issue_comment,67,nilearn,nilearn,jaquesgrobler,2013-10-14 06:56:59,"I actually didn't see that this was a nilearn issue haha. So i did the patch for sklearn..
It's over here - shall we review it there, then when/if it's merge I apply the reviewed patch here?

PR on sklearn over [here](https://github.com/scikit-learn/scikit-learn/pull/2515)
",nan,nan
4,issue_comment,67,nilearn,nilearn,GaelVaroquaux,2013-10-14 07:49:44,"> I actually didn't see that this was a nilearn issue haha. So i did the patch
> for sklearn..
> It's over here - shall we review it there, then when/if it's merge I apply the
> reviewed patch here?

Yes, this sounds right.

G
",nan,nan
7,issue_comment,67,nilearn,nilearn,jaquesgrobler,2013-10-14 15:38:16,"Can close this fellow now :+1: 
",nan,nan
5,issue_comment,67,nilearn,nilearn,GaelVaroquaux,2013-10-14 15:39:17,"> Can close this fellow now :+1:

Indeed. Thanks!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
