Unnamed: 0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
2,issue_comment,130,idan,oauthlib,ib-lundgren,2013-04-02 17:11:36,"You are not crazy =) The documentation should be changed to note that it is a space separated list of scopes and that the original list is available in request.scopes. 
",nan,nan
3,issue_comment,130,idan,oauthlib,johanmeiring,2013-04-03 08:54:30,"That's relief ;-)  I'll make the change and submit a pull request.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,136,idan,oauthlib,ib-lundgren,2013-04-18 20:40:56,"The difference here is the asynchronicity of the authorization code grant. The user authorization is captured in an authorization code. When the code is later exchanged for a token there is no way for the provider to know which user it is meant to associate the new token with unless it previously bound a user to the authorization code. All other core grant types obtain a token in a synchronous flow.

The check for user is just to help remind developers of this and provide a simple way to pass a long a user to later be available in the save_bearer_token call. If you don't associate a token with a user there is not much point of having oauth tokens since the requests later will only specify token, never user.

Not sure if that helped, let me know =)
",nan,nan
3,issue_comment,136,idan,oauthlib,taestone,2013-04-19 09:25:08,"thanks for comment.

I was confused because In django model, It save user_id in authcode(information about responsed authcode db) and bearer_token temporarily . For verification check with authorization code and bearer token, It seems to need for provider to have to save the both. It makes that the provider can be aware of the user who confirmed the permission. Is it just for django implementation and not common other implementation?

In resource access, it's seem for client know the user.
When accessing protected resource, the client has to know the user whose  resource it request.
",nan,nan
4,issue_comment,136,idan,oauthlib,ib-lundgren,2013-04-22 15:21:14,"Yes, the authorization code is only meant to exist temporarily and hold the authorization/permission the user gives and which user it was, among other things. This is not specific to Django but serves as an example of what needs to be done. Exactly how is up to the developer.

[This drawing from the OAuth 2 spec](http://tools.ietf.org/html/rfc6749#section-4.1) might help to clarify what is going on. This is quite similar to OAuth 1, but without the request signing.

```
 +----------+
 | Resource |
 |   Owner  |
 |          |
 +----------+
      ^
      |
     (B)
 +----|-----+          Client Identifier      +---------------+
 |         -+----(A)-- & Redirection URI ---->|               |
 |  User-   |                                 | Authorization |
 |  Agent  -+----(B)-- User authenticates --->|     Server    |
 |          |                                 |               |
 |         -+----(C)-- Authorization Code ---<|               |
 +-|----|---+                                 +---------------+
   |    |                                         ^      v
  (A)  (C)                                        |      |
   |    |                                         |      |
   ^    v                                         |      |
 +---------+                                      |      |
 |         |>---(D)-- Authorization Code ---------'      |
 |  Client |          & Redirection URI                  |
 |         |                                             |
 |         |<---(E)----- Access Token -------------------'
 +---------+       (w/ Optional Refresh Token)
```

What is happening is that the user is given an authorization code, which it carries over to the client through a redirection. This code is then exchanged for a token. The only way the provider can know which user this token should belong to is by looking it up from the authorization code. Thus we need to store user twice.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,153,idan,oauthlib,lepture,2013-05-24 13:11:15,"@ib-lundgren I do think that it is not a good idea to put django and flask decorators in oauthlib. Oauthlib should focus on the core oauth part.

It's a time to move to the rfc instead of draft 25.
",nan,nan
3,issue_comment,153,idan,oauthlib,ib-lundgren,2013-05-24 15:54:17,"@lepture I've begun to think the same lately which is why I am thinking about moving it out and into a new django-oauthlib project and instead of just a simple decorator let the project grow into a full fledged django extension. I've just not had time to set this up yet.

Regarding moving to RFC it certainly is time and I've only put it off because moving files around is boring and that OAuth 2 is split over so many more RFCs than just the core. For the sake of keeping with consistency we might want to split the draft25 folder into several RFC folders, Bearer, Core, MAC etc but not sure if that will just confuse things. 

@lepture Guess we could just start with draft25 -> rfc6749, is this something you would be interested in doing?
",nan,nan
4,issue_comment,153,idan,oauthlib,lepture,2013-05-25 00:00:18,"@ib-lundgren I'd like to help, since I am working on https://github.com/lepture/flask-oauthlib

And I am designing the provider API right now.

I have not read all the RFCs, guess I need some time. Is there any big difference between draft25 and rfc6749?
",nan,nan
5,issue_comment,153,idan,oauthlib,ib-lundgren,2013-05-25 11:58:10,"@lepture Ah excellent. Will check out flask-oauthlib next week. Planning to do OAuth 2 and 1? or just 2? 

AFAIK the spec has only changed in wording, not logic, between 25 and RFC so should not be much differences.
",nan,nan
6,issue_comment,153,idan,oauthlib,lepture,2013-05-25 12:41:41,"@ib-lundgren The client part is the same as Flask-OAuth, and it works well now. I have no idea how to test the client part.

Currently, I'd like to do the OAuth2 provider, when it finished and the API is pretty, I can take OAuth1 into account, if it can keep the same API.
",nan,nan
7,issue_comment,153,idan,oauthlib,ib-lundgren,2013-05-25 13:16:34,"@lepture I was mainly thinking about the provider part. Let me know if I can be of any help =)

Regarding OAuth 1 I was planning on remaking the API to be very similar to the one of OAuth 2 (will track this in #95). You can always have a look at [flask-oauthprovider](https://github.com/ib-lundgren/flask-oauthprovider) and see if it is of any help (current, soon to be deprecated, api).
",nan,nan
8,issue_comment,153,idan,oauthlib,ib-lundgren,2013-05-28 15:01:15,"Closing this. Will work on moving decorators out of oauthlib over this week into their own dedicated extensions.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,158,idan,oauthlib,lepture,2013-05-24 13:44:24,"One more thing, add coveralls.
",nan,nan
5,issue_comment,158,idan,oauthlib,lepture,2013-05-24 13:45:10,"@ib-lundgren You need to create an account on https://coveralls.io/ and it will calculate the coverage for you.
",nan,nan
6,issue_comment,158,idan,oauthlib,ib-lundgren,2013-05-24 15:56:56,"Thanks for the PR =) Never heard of coveralls.io before, will have a look. 

Sadly I know very little about travis setup, is there no way to define the install requirements without resorting to a shelling out to pip? Pretty sure we had a way before we moved to tox but memory fails me.
",nan,nan
12,pull_request_commit_comment,158,idan,oauthlib,ib-lundgren,2013-05-24 16:06:55,"Any reason to not run with coverage in the script: section? Presumably coveralls can just take the coverage report in the after_success?
",122d1a6c4b6e34f3cec447ec8b2577a3f627cdfd,"(21, '', u'.travis.yml')"
13,pull_request_commit_comment,158,idan,oauthlib,lepture,2013-05-24 23:52:48,"We don't want to break the test, if something is wrong with coveralls. That's why it happens after success.
",122d1a6c4b6e34f3cec447ec8b2577a3f627cdfd,"(21, '', u'.travis.yml')"
7,issue_comment,158,idan,oauthlib,lepture,2013-05-24 23:54:10,"@ib-lundgren We can use the requirements.txt. But there is a problem with unittest2, that's why I created a `.travis_install.py`.
",nan,nan
8,issue_comment,158,idan,oauthlib,lepture,2013-05-25 00:18:53,"@ib-lundgren A preview on coveralls: https://coveralls.io/r/lepture/terminal
",nan,nan
9,issue_comment,158,idan,oauthlib,lepture,2013-05-25 13:09:33,"Did you find an elegant way for travis ci?
",nan,nan
10,issue_comment,158,idan,oauthlib,ib-lundgren,2013-05-28 14:59:57,"@lepture Sorry not had time to look into it. Let's merge this and see if it works. Can try and clean up that later.
",nan,nan
11,issue_comment,158,idan,oauthlib,ib-lundgren,2013-05-28 15:09:45,"Can see coverage at https://coveralls.io/r/idan/oauthlib now. It seems like we need to work on the exclusion of other libraries unless I'm reading https://coveralls.io/builds/53818 wrong.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,159,idan,oauthlib,ib-lundgren,2013-05-24 15:45:03,"Since you are not allowed space characters in an URI you need to encode it. These are two different ways of representing an url encoded space character, both + and %20 are valid. Although + is imo easier on the eye. See http://en.wikipedia.org/wiki/Percent-encoding#The_application.2Fx-www-form-urlencoded_type for more details.
",nan,nan
3,issue_comment,159,idan,oauthlib,lepture,2013-05-24 23:56:29,"@ib-lundgren which means, `plus` is newer thant `%20` ? `%20` is the older way to encode space?

I see, both are okay.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
8,pull_request_commit_comment,161,idan,oauthlib,dahlia,2013-05-27 14:02:03,"You can use Pygmentâ€™s `HttpLexer` here e.g.:

``` rst
For example, the ""bearer"" token type defined in
[I-D.ietf-oauth-v2-bearer] is utilized by simply including the access 
token string in the request:

.. code-block:: http

   GET /resource/1 HTTP/1.1
   Host: example.com
   Authorization: Bearer mF_9.B5f-4.1JqM 
```

It will be rendered like:

> For example, the ""bearer"" token type defined in
> [I-D.ietf-oauth-v2-bearer] is utilized by simply including the access 
> token string in the request:
> 
> ``` http
> GET /resource/1 HTTP/1.1
> Host: example.com
> Authorization: Bearer mF_9.B5f-4.1JqM
> ```
",d1e2b1df73eaeebafaab0b03262e3e1375f81749,"(None, None, None)"
4,issue_comment,161,idan,oauthlib,ib-lundgren,2013-05-28 14:59:11,"Nice. Thanks for adding this. Certainly need to go through pygments/sphinx and see what gems like http lexer can be used for the rest of the docs.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
3,issue_comment,164,idan,oauthlib,coveralls,2013-05-28 21:28:49,"[![Coverage Status](https://coveralls.io/builds/54489/badge)](https://coveralls.io/builds/54489)

Coverage remained the same when pulling **83f18d7dd7d6000217834b73313a0c623aef4a00 on synasius:redirect-uri-error** into **21d31ee5aa2284b9a26037a99a7cf99a37131bd2 on idan:master**.
",nan,nan
4,issue_comment,164,idan,oauthlib,coveralls,2013-05-28 21:28:49,"[![Coverage Status](https://coveralls.io/builds/54489/badge)](https://coveralls.io/builds/54489)

Coverage increased (+0%) when pulling **83f18d7dd7d6000217834b73313a0c623aef4a00 on synasius:redirect-uri-error** into **21d31ee5aa2284b9a26037a99a7cf99a37131bd2 on idan:master**.
",nan,nan
5,issue_comment,164,idan,oauthlib,ib-lundgren,2013-05-29 11:07:10,"Looks good but I think we should take it one step further. I think having the collected request parameters available in all OAuth2Error exceptions would be helpful, if not for anything else but debugging.

Maybe pass in a keyword arg request that we extract client_id, redirect_uri, scopes etc from?

```
class OAuth2Error(Exception):
  error = None

  def __init__(self, description=None, uri=None, state=None, status_code=400, request=None):
    ...
    if request:
      self.redirect_uri = request.redirect_uri
      etc.
```
",nan,nan
6,issue_comment,164,idan,oauthlib,synasius,2013-05-29 11:38:52,"Oh, that would be nice. 
Would you like to unpack all the params collected in request._params or only some?
",nan,nan
7,issue_comment,164,idan,oauthlib,ib-lundgren,2013-05-29 11:43:39,"Let's start with cherry picking a few and add more as we find it helpful. Start with `client_id`, `redirect_uri`, `scopes`, `response_type` and `grant_type` maybe? Feel free to add more as you see fit. 

If we add `code` or a flavour of `token` we should probably make sure they are not accidentally logged anywhere, don't think that is the case though.
",nan,nan
8,issue_comment,164,idan,oauthlib,synasius,2013-05-29 11:50:49,":+1: Fully agree with you! I can update this pull req or create a new one if you prefer
",nan,nan
9,issue_comment,164,idan,oauthlib,ib-lundgren,2013-05-29 11:52:30,"Whatever you prefer =) A new will make for a slightly cleaner commit log but that is a minor issue imo.
",nan,nan
10,issue_comment,164,idan,oauthlib,synasius,2013-05-29 12:03:07,"I love clean logs so i'll go with a new pr. Back in 10 minutes
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,166,idan,oauthlib,ib-lundgren,2013-05-29 13:05:17,"Wow lot's of changes, nice work tracking them all down. Thanks for the doc changes too =)

I'm currently working on moving the django decorator into its own django extension library and ran into this redirect uri issues literally minutes ago. https://github.com/ib-lundgren/django-oauthlib/blob/master/django_oauthlib/views.py#L66. 
",nan,nan
5,issue_comment,166,idan,oauthlib,ib-lundgren,2013-05-29 13:19:12,"Forgot to tell you on this one, for next PR please add yourself to AUTHORS =)
",nan,nan
6,issue_comment,166,idan,oauthlib,synasius,2013-05-29 13:37:09,"Ok!  :) And thanks for merging!

By the way I have seen your new https://github.com/ib-lundgren/django-oauthlib project.
We are on a similar project started right after DjangoConEU: https://github.com/evonove/django-oauth-toolkit
Our goal is to provide a simple Django app that helps developer to add oauth2 and oauth1 support in their projects. We use oauthlib in the backend of course!

Project is under active development and we planned to get these features at minimum:
- oauth2 provider supporting all the standard workflows
- oauth2 client facilities
  If you are interested we would be happy to get you involved :-) 
",nan,nan
7,issue_comment,166,idan,oauthlib,ib-lundgren,2013-05-29 13:47:31,"Ah cool. Sounds exactly what I had in mind, minus the client bits as I
think it would be better to focus solely on creating a great provider
extension/app.

I've not done very much yet, only begun yesterday and most time was spent
getting random project structure setup. Thought I'd do it mainly to learn
about django and see if it caught any traction but we should definitely see
if we can merge our work. Fancy dropping into irc? #oauthlib on freenode.

On Wed, May 29, 2013 at 2:37 PM, Federico Frenguelli <
notifications@github.com> wrote:

> Ok! :) And thanks for merging!
> 
> By the way I have seen your new
> https://github.com/ib-lundgren/django-oauthlib project.
> We are on a similar project started right after DjangoConEU:
> https://github.com/evonove/django-oauth-toolkit
> Our goal is to provide a simple Django app that helps developer to add
> oauth2 and oauth1 support in their projects. We use oauthlib in the backend
> of course!
> 
> Project is under active development and we planned to get these features
> at minimum:
> - oauth2 provider supporting all the standard workflows
> - oauth2 client facilities If you are interested we would be happy to
>   get you involved :-)
> 
> â€”
> Reply to this email directly or view it on GitHubhttps://github.com/idan/oauthlib/pull/166#issuecomment-18616530
> .
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,170,idan,oauthlib,ib-lundgren,2013-05-31 09:04:08,"Can see this being useful. Could you add that to the two other https checks in parameters.py? And maybe extract the check into its own function? 

This should be added to the docs at some point too. I can do this when/if I decide to refactor part of the client API to be more consistent with the provider API.
",nan,nan
5,issue_comment,170,idan,oauthlib,lepture,2013-05-31 09:23:42,"@ib-lundgren Added a `is_secure_transport` function in utils.
",nan,nan
6,issue_comment,170,idan,oauthlib,ib-lundgren,2013-05-31 09:28:20,"Looks good =)
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
4,issue_comment,172,idan,oauthlib,lepture,2013-05-31 12:02:42,"I am happy to announce that the provider is working now. Find the example in: https://github.com/lepture/flask-oauthlib/tree/master/tests
",nan,nan
5,issue_comment,172,idan,oauthlib,ib-lundgren,2013-05-31 13:25:47,"We might just move lower() into the is_secure_transport. Fancy doing it in this PR? If not I'll sort it out next week.

Congratulations on the provider! Will definitely take a look this afternoon.
",nan,nan
6,issue_comment,172,idan,oauthlib,lepture,2013-05-31 13:48:57,"@ib-lundgren yes, you are right, moved the `lower` to `is_secure_transport`.
",nan,nan
7,issue_comment,172,idan,oauthlib,ib-lundgren,2013-05-31 13:52:19,"Excellent. Thanks!
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,73,idan,oauthlib,dahlia,2013-05-24 07:21:04,"PyCrypto currently works on PyPy, and oauthlib also currently works on PyPy.  (Tested on PyPy 2.0.2, Mac 10.8.3.)

``` console
$ tox -e pypy
GLOB sdist-make: /.../oauthlib/setup.py
pypy inst-nodeps: /.../oauthlib/.tox/dist/oauthlib-0.4.1.zip
pypy runtests: commands[0]
.....................................................................................................................................................
----------------------------------------------------------------------
Ran 149 tests in 0.846s

OK
___________________________________ summary ____________________________________
  pypy: commands succeeded
  congratulations :)
```

I think we could add `pypy` to `tox.ini` and `.travis.yml` files.  (`.travis.yml` seems not to contain even 2.6, 3.2 and 3.3.)
",nan,nan
3,issue_comment,73,idan,oauthlib,lepture,2013-05-24 09:36:45,"I don't think `Jython` worth the work.
",nan,nan
4,issue_comment,73,idan,oauthlib,ib-lundgren,2013-05-24 12:45:55,"@lepture Agreed, Jython is not going to be worth it.

@dahlia Cool to know that pypy seem to work tho, feel free to send a PR adding it to tox.ini =)

Travis is currently setup to run tox which tests 2.6, 2.7, 3.2 and 3.3, which is not obvious since the travis yaml file only mentions 2.7.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,75,idan,oauthlib,lepture,2012-11-22 05:01:48,"Great job! I am wondering what's the status of OAuth2 provider.
",nan,nan
3,issue_comment,75,idan,oauthlib,ib-lundgren,2012-11-22 21:18:22,"The OAuth 2 provider is taking shape nicely but due to the limited time I can put in it is still going to take a little while before it's ready for use. I've not really kept track of the status anywhere so guess I might as well give the update here as anywhere else.

My current plan is along the lines of:
- Add a number of convenience methods to common.Request to facilitate parameter finding for grant_types
- Sort out resource endpoint error reporting and go over authorization and token endpoint error reporting and make sure it mimics the spec and my plans
- Bearer token token_type estimation
- Weed out the most broken bits of the endpoints and grant types by implementing extensive endpoint tests
- Play around with making a basic but fully functional oauth provider with Django or Flask to find any missing features, annoyances and see if the API is at level of usability I'm happy with
- Write some docs ;)
- MAC, JWT, SAML token support
- More docs ;)

I'm already working on some of this but I've not pushed it yet. Expect to see incremental improvements each week.
",nan,nan
4,issue_comment,75,idan,oauthlib,wiliamsouza,2012-11-25 20:41:46,"Good job Ib,
tell me more about Django basic oauth provider. How can I help you?
I'm interested in oauth 2 for Installed applications like described at google documentation [1].

I think that a good starting point is to learn how google do it and start write some 
Django views that mimics the google way of do things. I mean a Django app or view to register your application,
branding information and get your generated clients ID like google api console [2]. It can be a django admin page
for now.

What do you think?

[1] https://developers.google.com/accounts/docs/OAuth2InstalledApp
[2] https://code.google.com/apis/console/
",nan,nan
5,issue_comment,75,idan,oauthlib,Evlos,2012-12-23 12:20:20,"GJ guys, hope this feature could be done soon.
",nan,nan
6,issue_comment,75,idan,oauthlib,ib-lundgren,2013-01-15 21:12:10,"Sorry for taking so long. I'm struggling to squeeze open source in as much as I'd like but rest assured when I do I'll start crossing off my oauth 2 provider to-do list =)

I have many ideas for a django-oauth extension but afraid I won't be able to get to it before the summer. It's a good idea to have a look at the Google API Console and spend time streamlining the processes around registering and maintaining clients. Essentially such an extension could boil, if done right, reduce the complexity of authorizing api use with OAuth down to a simple decorator. Now that is the future, for now I'll focus on getting the OAuth 2 support in oauthlib working, spec compliant and well tested.
",nan,nan
7,issue_comment,75,idan,oauthlib,ib-lundgren,2013-02-05 21:39:32,"OAuth 2 provider support is shaping up nicely. A preview available in the newly added docs

https://oauthlib.readthedocs.org/en/latest/server2.html
",nan,nan
8,issue_comment,75,idan,oauthlib,lepture,2013-05-30 11:17:38,"Great.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,78,idan,oauthlib,warsaw,2012-11-16 21:59:25,"On Nov 16, 2012, at 11:27 AM, Ib Lundgren wrote:

> Tox is great and I use it all the time to test against py 2.6 up to 3.3. In
> the contributing docs it would be nice to have information on how to use and
> setup tox for various environments. i.e. a little description together with
> links to OS X / Ubuntu / Fedora / Windows setup instructions.

tox is not yet available in Debian or Ubuntu.  Yes, I am actively working on
that :).
",nan,nan
3,issue_comment,78,idan,oauthlib,ib-lundgren,2012-11-16 22:22:32,"Neat! I'm using tox on Ubuntu but from PyPi which is working well although sudo pip install is a bit awkward. A package would be much appreciated.

In Ubuntu it is fairly straightforward to get multiple python versions running, although mentioning step by step would be helpful. I've not looked into running multiple python versions in other OSs so hoping some unsung hero of the internets will come to the rescue =)
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,79,idan,oauthlib,warsaw,2012-11-16 21:58:33,"On Nov 16, 2012, at 11:33 AM, Ib Lundgren wrote:

> While most users are likely better of using requests
> (http://docs.python-requests.org/en/latest/index.html) to make OAuth requests
> some might not have that option.  A few examples of how to use the Client
> class would be useful.
> 
> Some users might try to use OAuthLib with urllib2 not knowing there are
> better alternatives out there, a little note in the docs would help them out.

Yes, please!  There are very good reasons to want to use oauthlib without
requests, e.g. as a straight up replacement for the long abandoned oauth.  In
fact, a little user guide for converting from oauth to oauthlib would be
fantastic.  It's not a difficult conversion, although it's a bit of a brain
twister at first because of the different terminology.

Sorry, my stack is too deep at the moment to contribute such documentation,
but if pressed I could probably dig up a diff.
",nan,nan
3,issue_comment,79,idan,oauthlib,ib-lundgren,2012-11-16 22:25:31,"I'll try and add a few examples with urllib2 and requests soonish, unless someone beats me to it. As far as the old oauth library I've actually never used it so would not be able to create a guide on top of my head. Any chance you could dig up some code using the library?  Then I could simply port that over and show how in the docs.

Is it http://pypi.python.org/pypi/oauth/1.0.1 ?
",nan,nan
4,issue_comment,79,idan,oauthlib,warsaw,2012-11-16 23:06:09,"On Nov 16, 2012, at 02:25 PM, Ib Lundgren wrote:

> I'll try and add a few examples with urllib2 and requests soonish, unless
> someone beats me to it. As far as the old oauth library I've actually never
> used it so would not be able to create a guide on top of my head. Any chance
> you could dig up some code using the library?  Then I could simply port that
> over and show how in the docs.
> 
> Is it http://pypi.python.org/pypi/oauth/1.0.1 ?

Yep.  Notice the Uploaded date :)

Okay, piston-mini-client is one package I'm working on.  This is not fully
tested yet (note the as yet unported PLAINTEXT signature method), but it
should give you an idea of what I had to change to do the conversion.  Once I
get this working, I might even submit a more detailed blurb for the
documentation.

=== modified file 'piston_mini_client/auth.py'
--- piston_mini_client/auth.py  2012-07-30 17:09:26 +0000
+++ piston_mini_client/auth.py  2012-11-12 21:15:28 +0000
@@ -31,17 +29,15 @@

```
 def sign_request(self, url, method, body, headers):
     """"""Sign a request with OAuth credentials.""""""
```
-        # Import oauth here so that you don't need it if you're not going
-        # Import oauthlib here so that you don't need it if you're not going
       # to use it.  Plan B: move this out into a separate oauth module.
-        from oauth.oauth import (OAuthRequest, OAuthConsumer, OAuthToken,
-                                 OAuthSignatureMethod_PLAINTEXT)
-        consumer = OAuthConsumer(self.consumer_key, self.consumer_secret)
-        token = OAuthToken(self.token_key, self.token_secret)
-        oauth_request = OAuthRequest.from_consumer_and_token(
-            consumer, token, http_url=url)
-        oauth_request.sign_request(OAuthSignatureMethod_PLAINTEXT(),
-                                   consumer, token)
-        headers.update(oauth_request.to_header(self.oauth_realm))
-        from oauthlib.oauth1 import Client
-        oauth_client = Client(self.consumer_key, self.consumer_secret,
-                              self.token_key, self.token_secret,
-                              realm=self.oauth_realm)
-        uri, signed_headers, body = oauth_client.sign(
-            url, method, body, headers)
- ```
     headers.update(signed_headers)
  ```
  
  class BasicAuthorizer(object):
",nan,nan
5,issue_comment,79,idan,oauthlib,ib-lundgren,2012-11-17 00:27:30,"The oauthlib bits look alright. If you want to use plaintext as a signature method use either

```
Client(..., signature_method=""PLAINTEXT"")
```

or

```
from oauthlib.oauth1.rfc5849 import SIGNATURE_PLAINTEXT
Client(..., signature_method=SIGNATURE_PLAINTEXT)
```

Will add imports of the constants in oauthlib.oauth1.**init**.py tomorrow so you can omit ""rfc4849"". If you are interested in RSA-SHA1 signatures have a look at https://gist.github.com/2584789
",nan,nan
6,issue_comment,79,idan,oauthlib,ib-lundgren,2013-02-05 21:38:42,"It might not be much but it is a start

https://oauthlib.readthedocs.org/en/latest/
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,91,idan,oauthlib,ib-lundgren,2013-01-15 21:12:44,"Thanks! Looking forward to looking it over this weekend =)
",nan,nan
3,issue_comment,91,idan,oauthlib,wiliamsouza,2013-02-18 19:49:50,"Thanks! @tino this will help a lot :dancers: 
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
2,issue_comment,119,idan,oauthlib,wiliamsouza,2013-02-18 19:40:25,"""How to get started on an OAuth 2 provider"" That is a good question in nutshell It can be basicaly, I implement the methods  of oauthlib.oauth2.RequestValidator and pass it to oauthlib.oauth2.WebApplicationServer so I can call create_authorization_response and  create_token_response?
",nan,nan
3,issue_comment,119,idan,oauthlib,ib-lundgren,2013-02-18 20:03:32,"Essentially. yes. Note that while OAuth 2 providers are quickly maturing they are still not quite ready for prime time and there might lurk nasty bugs there.

Check out https://oauthlib.readthedocs.org/en/latest/server2.html for some info as well.
",nan,nan
 , , , , , , , , , 
 , , , , , , , , , 
