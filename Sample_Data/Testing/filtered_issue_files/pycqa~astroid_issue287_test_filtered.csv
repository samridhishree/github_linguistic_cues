rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text,Test
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text,N
issue_title,287,pycqa,astroid,dashea,2015-12-11 20:10:20,"Running _import_gi_module('gi.repository.GLib') with astroid-1.4.1 fails with a syntax error while trying to parse the generated module stub, and I found that the modcode contained properties such as:

`IO_ERR = <flags G_IO_ERR of type GLib.IOCondition>`

This is due to the switch from `type(x) == y` to `isinstance(x, y)` in a079c3d4abecee064c3ab4c44f086b618f06fa8c. GLib.IO_ERR, for example, returns gi.repository.GLib.GIOCondition for type(), but also inherits from int.
",start issue,Check for flags/enum types before checking for int,run importgimodulegirepositoryglib astroid141 fail syntax error tri pars gener modul stub I found modcod contain properti thi due switch a079c3d4abecee064c3ab4c44f086b618f06fa8c glibioerr exampl return girepositoryglibgiocondit type also inherit int,N
issue_closed,287,pycqa,astroid,PCManticore,2015-12-11 20:58:49,nan,closed issue,Check for flags/enum types before checking for int,nan,N
pull_request_title,287,pycqa,astroid,dashea,2015-12-11 20:10:20,"Running _import_gi_module('gi.repository.GLib') with astroid-1.4.1 fails with a syntax error while trying to parse the generated module stub, and I found that the modcode contained properties such as:

`IO_ERR = <flags G_IO_ERR of type GLib.IOCondition>`

This is due to the switch from `type(x) == y` to `isinstance(x, y)` in a079c3d4abecee064c3ab4c44f086b618f06fa8c. GLib.IO_ERR, for example, returns gi.repository.GLib.GIOCondition for type(), but also inherits from int.
",b0fdfe55e8428f3a9a141f70632607d6bf0d9bb2,Check for flags/enum types before checking for int,run importgimodulegirepositoryglib astroid141 fail syntax error tri pars gener modul stub I found modcod contain properti thi due switch a079c3d4abecee064c3ab4c44f086b618f06fa8c glibioerr exampl return girepositoryglibgiocondit type also inherit int,N
pull_request_merged,287,pycqa,astroid,PCManticore,2015-12-11 20:58:49,Check for flags/enum types before checking for int,47dea8e4fd97e1f69b24ce311eb4df995d283187,Pull request merge from dashea/astroid:gi-stub-enum to PyCQA/astroid:master,check flagsenum type check int,N
issue_comment,287,pycqa,astroid,PCManticore,2015-12-11 20:58:43,"Thanks! We could add some tests for this plugin in order to prevent future regressions. I must admit though that this is a black box for me, since I'm not familiar with gi.
",nan,nan,thank We could add test plugin order prevent futur regress I must admit though black box sinc Im familiar gi,Y
pull_request_commit,287,pycqa,astroid,dashea,2015-12-11 20:04:21,"Check for flags/enum types before checking for int

gobject-introspection enum and flag types inherit from int, so the check
for a unusable string represenation needs to happen before checking if
the values can be used as integers. This fixes syntax errors in the
generated stubs for gobject-introspection modules containing flag and
enum types.",b0fdfe55e8428f3a9a141f70632607d6bf0d9bb2,nan,check flagsenum type check int gobjectintrospect enum flag type inherit int check unus string represen need happen check valu use integ thi fix syntax error gener stub gobjectintrospect modul contain flag enum type,N
