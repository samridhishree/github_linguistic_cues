rectype,issueid,project_owner,project_name,actor,time,text,action,title,clean_text,Test
rectype,issueid,project_owner,project_name,actor,time,text,action,title,text,N
issue_title,84,nilearn,nilearn,pgervais,2013-06-25 16:39:31,"The current state of logging in NiLearn is not satisfactory. To attempts at organizing something have been attempted so far: LogMixin in nifti_region.py and enclosing_scope_name() in _utils/class_inspect.py, used in BaseMasker. They go in different directions.

The present pull request is an additional attempt to get to something usable. I completely abandoned the idea of a class Mixin, because it couldn't be used in a function. Thus, emitting a user message is performed with a function: log(). I added this function in _utils/logger.py. It can be used from anywhere (function, method, or top-level). 

Typical usage in a method:

```
 logger.log(""message to the user"", verbose=self.verbose)
```

The `verbose=self.verbose` is required so far, because the function cannot get access to self.verbose directly. The main advantage is that logger.log() prepends the name of the method that the user has most likely used in her script, whatever the location of the call to log(). More precisely, if the user calls the fit() method on an estimator object, and a call to log(""message"") is performed deeper in the call stack, the user will see in the message something like ""[EstimatorClass.fit] message"". 

This behaviour is achieved in log() by walking up the call stack, finding the topmost object that inherits from BaseEstimator, and reading the class and function names therein. This is much smarter than the stack_level trick used by `enclosing_scope_name`. stack_level is still supported though, but is used as a fallback is no object has been found.

I only adapted `nifti_region.py` to the new system. Launch `plot_adhd_covariance.py` to see it in action.

I would like to have feedback before proceeding.
",start issue,New logging function,the current state log nilearn satisfactori To attempt organ someth attempt far logmixin niftiregionpi enclosingscopenam utilsclassinspectpi use basemask they go differ direct the present pull request addit attempt get someth usabl I complet abandon idea class mixin couldnt use function thu emit user messag perform function log I ad function utilsloggerpi It use anywher function method toplevel typic usag method the requir far function cannot get access selfverbos directli the main advantag loggerlog prepend name method user like use script whatev locat call log more precis user call fit method estim object call logmessag perform deeper call stack user see messag someth like estimatorclassfit messag thi behaviour achiev log walk call stack find topmost object inherit baseestim read class function name therein thi much smarter stacklevel trick use stacklevel still support though use fallback object found I adapt new system launch see action I would like feedback proceed,N
issue_closed,84,nilearn,nilearn,pgervais,2013-09-02 13:19:40,nan,closed issue,New logging function,nan,N
pull_request_title,84,nilearn,nilearn,pgervais,2013-06-25 16:39:31,"The current state of logging in NiLearn is not satisfactory. To attempts at organizing something have been attempted so far: LogMixin in nifti_region.py and enclosing_scope_name() in _utils/class_inspect.py, used in BaseMasker. They go in different directions.

The present pull request is an additional attempt to get to something usable. I completely abandoned the idea of a class Mixin, because it couldn't be used in a function. Thus, emitting a user message is performed with a function: log(). I added this function in _utils/logger.py. It can be used from anywhere (function, method, or top-level). 

Typical usage in a method:

```
 logger.log(""message to the user"", verbose=self.verbose)
```

The `verbose=self.verbose` is required so far, because the function cannot get access to self.verbose directly. The main advantage is that logger.log() prepends the name of the method that the user has most likely used in her script, whatever the location of the call to log(). More precisely, if the user calls the fit() method on an estimator object, and a call to log(""message"") is performed deeper in the call stack, the user will see in the message something like ""[EstimatorClass.fit] message"". 

This behaviour is achieved in log() by walking up the call stack, finding the topmost object that inherits from BaseEstimator, and reading the class and function names therein. This is much smarter than the stack_level trick used by `enclosing_scope_name`. stack_level is still supported though, but is used as a fallback is no object has been found.

I only adapted `nifti_region.py` to the new system. Launch `plot_adhd_covariance.py` to see it in action.

I would like to have feedback before proceeding.
",21a9ecd7640f92c77dd0bad67ba64e366aefa3ab,New logging function,the current state log nilearn satisfactori To attempt organ someth attempt far logmixin niftiregionpi enclosingscopenam utilsclassinspectpi use basemask they go differ direct the present pull request addit attempt get someth usabl I complet abandon idea class mixin couldnt use function thu emit user messag perform function log I ad function utilsloggerpi It use anywher function method toplevel typic usag method the requir far function cannot get access selfverbos directli the main advantag loggerlog prepend name method user like use script whatev locat call log more precis user call fit method estim object call logmessag perform deeper call stack user see messag someth like estimatorclassfit messag thi behaviour achiev log walk call stack find topmost object inherit baseestim read class function name therein thi much smarter stacklevel trick use stacklevel still support though use fallback object found I adapt new system launch see action I would like feedback proceed,N
issue_comment,84,nilearn,nilearn,GaelVaroquaux,2013-08-01 13:10:19,"Let's:

a) Put comments in the file on the limitation of this approach

b) Merge this guy and move on
",nan,nan,let put comment file limit approach b merg guy move,N
issue_comment,84,nilearn,nilearn,GaelVaroquaux,2013-08-29 12:19:07,"Good apart from my comments.
",nan,nan,good apart comment,N
issue_comment,84,nilearn,nilearn,pgervais,2013-08-29 11:38:42,"I'm going to need this PR very soon. A final review would be appreciated before merging.
",nan,nan,Im go need PR soon A final review would appreci merg,N
issue_comment,84,nilearn,nilearn,pgervais,2013-08-29 16:20:43,"I made a lot of refactoring, corrected a bug. The code is now much clearer indeed.

@GaelVaroquaux when you have a moment, can you tell me if the tests that I added are fine for you?
",nan,nan,I made lot refactor correct bug the code much clearer inde gaelvaroquaux moment tell test I ad fine,Y
issue_comment,84,nilearn,nilearn,pgervais,2013-09-02 13:19:53,"Merged by rebasing.
",nan,nan,merg rebas,N
issue_comment,84,nilearn,nilearn,pgervais,2013-06-27 07:33:54,"Sorry for the size of the example, but this is currently the only one in NiLearn that can be used for such a computation (all the others are not coregistered).
",nan,nan,sorri size exampl current one nilearn use comput other coregist,N
pull_request_commit_comment,84,nilearn,nilearn,GaelVaroquaux,2013-08-01 13:06:55,"We don't care about non CPython
",21a9ecd7640f92c77dd0bad67ba64e366aefa3ab,"(None, '', u'nilearn/_utils/logger.py')",We dont care non cpython,N
pull_request_commit_comment,84,nilearn,nilearn,GaelVaroquaux,2013-08-29 11:49:20,"This should be in the ""notes"" section of the docstring, at the end.
",21a9ecd7640f92c77dd0bad67ba64e366aefa3ab,"(None, '', u'nilearn/_utils/logger.py')",thi note section docstr end,N
pull_request_commit_comment,84,nilearn,nilearn,GaelVaroquaux,2013-08-29 12:04:39,"I much prefer string formatting to string algebra (+). It seems to me that you could write the few lines above using string formatting (with an if statement, and maybe a temporary string) and that it would be more readable.
",21a9ecd7640f92c77dd0bad67ba64e366aefa3ab,"(None, '', u'nilearn/_utils/logger.py')",I much prefer string format string algebra It seem could write line use string format statement mayb temporari string would readabl,N
pull_request_commit_comment,84,nilearn,nilearn,GaelVaroquaux,2013-08-29 12:18:21,"Shouldn't we capture sys.stdout to do more than smoke testing?
",21a9ecd7640f92c77dd0bad67ba64e366aefa3ab,"(None, '', u'nilearn/tests/test_logger.py')",shouldnt captur sysstdout smoke test,Y
